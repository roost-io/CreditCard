// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=cardLast4_d55e48d294
ROOST_METHOD_SIG_HASH=cardLast4_745c600f87

Here are the generated test scenarios for the provided `cardLast4` method:

Scenario 1: Valid Card Last 4 Digits

Details:
  TestName: validCardLast4SetsValue.
  Description: This test verifies that providing a valid card last 4 digits string sets the corresponding private field correctly and returns the current instance.
Execution:
  Arrange: Create an instance of the CollectionAgencyInvolvementRequest class.
  Act: Invoke the cardLast4 method with a valid 4-digit string (e.g., "1234").
  Assert: Assert that the private cardLast4 field is set to the provided value using reflection. Assert that the returned object is the same instance.
Validation:
  The assertion checks that the cardLast4 method correctly sets the private field when given a valid input. It ensures that the method follows the builder pattern by returning the current instance for method chaining.

Scenario 2: Null Card Last 4 Digits

Details:
  TestName: nullCardLast4ClearsValue.
  Description: This test checks that passing a null value to the cardLast4 method clears the corresponding private field and returns the current instance.
Execution:
  Arrange: Create an instance of the CollectionAgencyInvolvementRequest class and set the cardLast4 field to a non-null value.
  Act: Invoke the cardLast4 method with a null value.
  Assert: Assert that the private cardLast4 field is set to null using reflection. Assert that the returned object is the same instance.
Validation:
  The assertion verifies that the cardLast4 method correctly handles null input by clearing the private field. It ensures that the method maintains the builder pattern by returning the current instance.

Scenario 3: Empty Card Last 4 Digits

Details:
  TestName: emptyCardLast4SetsValue.
  Description: This test checks that providing an empty string to the cardLast4 method sets the corresponding private field to an empty string and returns the current instance.
Execution:
  Arrange: Create an instance of the CollectionAgencyInvolvementRequest class.
  Act: Invoke the cardLast4 method with an empty string.
  Assert: Assert that the private cardLast4 field is set to an empty string using reflection. Assert that the returned object is the same instance.
Validation:
  The assertion verifies that the cardLast4 method correctly handles an empty string input by setting the private field accordingly. It ensures that the method follows the builder pattern by returning the current instance.

Scenario 4: Card Last 4 Digits with Leading/Trailing Whitespace

Details:
  TestName: cardLast4WithWhitespaceSetsValue.
  Description: This test verifies that providing a card last 4 digits string with leading/trailing whitespace sets the corresponding private field correctly and returns the current instance.
Execution:
  Arrange: Create an instance of the CollectionAgencyInvolvementRequest class.
  Act: Invoke the cardLast4 method with a string containing leading/trailing whitespace (e.g., " 5678 ").
  Assert: Assert that the private cardLast4 field is set to the trimmed value using reflection. Assert that the returned object is the same instance.
Validation:
  The assertion checks that the cardLast4 method correctly handles input with leading/trailing whitespace by trimming the value before setting the private field. It ensures that the method maintains the builder pattern by returning the current instance.

These test scenarios cover different cases for the `cardLast4` method, including valid input, null input, empty string input, and input with leading/trailing whitespace. They ensure that the method behaves as expected in each scenario by setting the corresponding private field correctly and returning the current instance for method chaining.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.lang.reflect.Field;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;

class CollectionAgencyInvolvementRequestCardLast4Test {

	private CollectionAgencyInvolvementRequest request;

	@BeforeEach
	void setUp() {
		request = new CollectionAgencyInvolvementRequest();
	}

	@Test
	void validCardLast4SetsValue() throws NoSuchFieldException, IllegalAccessException {
		String cardLast4 = "1234";
		CollectionAgencyInvolvementRequest result = request.cardLast4(cardLast4);
		Field field = request.getClass().getDeclaredField("cardLast4");
		field.setAccessible(true);
		assertEquals(cardLast4, field.get(request));
		assertSame(request, result);
	}

	@Test
	void nullCardLast4ClearsValue() throws NoSuchFieldException, IllegalAccessException {
		Field field = request.getClass().getDeclaredField("cardLast4");
		field.setAccessible(true);
		field.set(request, "1234");
		CollectionAgencyInvolvementRequest result = request.cardLast4(null);
		assertNull(field.get(request));
		assertSame(request, result);
	}

	@Test
	void emptyCardLast4SetsValue() throws NoSuchFieldException, IllegalAccessException {
		String cardLast4 = "";
		CollectionAgencyInvolvementRequest result = request.cardLast4(cardLast4);
		Field field = request.getClass().getDeclaredField("cardLast4");
		field.setAccessible(true);
		assertEquals(cardLast4, field.get(request));
		assertSame(request, result);
	}

	@ParameterizedTest
	@MethodSource("cardLast4WithWhitespaceProvider")
	void cardLast4WithWhitespaceSetsValue(String input, String expected)
			throws NoSuchFieldException, IllegalAccessException {
		CollectionAgencyInvolvementRequest result = request.cardLast4(input);
		Field field = request.getClass().getDeclaredField("cardLast4");
		field.setAccessible(true);
		assertEquals(expected, field.get(request));
		assertSame(request, result);
	}

	private static Stream<Arguments> cardLast4WithWhitespaceProvider() {
		return Stream.of(Arguments.of(" 5678 ", "5678"), Arguments.of("9012 ", "9012"), Arguments.of(" 3456", "3456"));
	}

	// TODO: Add test case for invalid cardLast4 format (e.g., non-numeric characters)
	// TODO: Consider validating the length of cardLast4 (should be exactly 4 digits)

}
