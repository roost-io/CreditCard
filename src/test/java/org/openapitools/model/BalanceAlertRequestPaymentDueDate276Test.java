// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=paymentDueDate_ede8a708e5
ROOST_METHOD_SIG_HASH=paymentDueDate_2c21b6ecde

Based on the provided method and imports, here are the generated test scenarios for the `paymentDueDate` method:

Scenario 1: Valid Payment Due Date

Details:
  TestName: validPaymentDueDate
  Description: This test verifies that the `paymentDueDate` method correctly sets the `paymentDueDate` field and returns the `BalanceAlertRequest` instance.
Execution:
  Arrange: Create an instance of `BalanceAlertRequest`.
  Act: Invoke the `paymentDueDate` method with a valid `LocalDate` parameter.
  Assert: Assert that the returned `BalanceAlertRequest` instance is the same as the original instance and that the `paymentDueDate` field is set to the provided `LocalDate`.
Validation:
  The assertion verifies that the `paymentDueDate` method correctly sets the `paymentDueDate` field and returns the `BalanceAlertRequest` instance, ensuring the proper behavior of the method.

Scenario 2: Null Payment Due Date

Details:
  TestName: nullPaymentDueDate
  Description: This test verifies that the `paymentDueDate` method handles a null `LocalDate` parameter correctly.
Execution:
  Arrange: Create an instance of `BalanceAlertRequest`.
  Act: Invoke the `paymentDueDate` method with a null `LocalDate` parameter.
  Assert: Assert that the returned `BalanceAlertRequest` instance is the same as the original instance and that the `paymentDueDate` field is set to null.
Validation:
  The assertion verifies that the `paymentDueDate` method correctly handles a null `LocalDate` parameter and sets the `paymentDueDate` field to null, ensuring the method's robustness.

Scenario 3: Payment Due Date in the Past

Details:
  TestName: pastPaymentDueDate
  Description: This test verifies that the `paymentDueDate` method allows setting a payment due date in the past.
Execution:
  Arrange: Create an instance of `BalanceAlertRequest` and a `LocalDate` representing a date in the past.
  Act: Invoke the `paymentDueDate` method with the past `LocalDate` parameter.
  Assert: Assert that the returned `BalanceAlertRequest` instance is the same as the original instance and that the `paymentDueDate` field is set to the provided past `LocalDate`.
Validation:
  The assertion verifies that the `paymentDueDate` method allows setting a payment due date in the past, ensuring the method's flexibility and handling of different date scenarios.

Scenario 4: Payment Due Date in the Future

Details:
  TestName: futurePaymentDueDate
  Description: This test verifies that the `paymentDueDate` method allows setting a payment due date in the future.
Execution:
  Arrange: Create an instance of `BalanceAlertRequest` and a `LocalDate` representing a date in the future.
  Act: Invoke the `paymentDueDate` method with the future `LocalDate` parameter.
  Assert: Assert that the returned `BalanceAlertRequest` instance is the same as the original instance and that the `paymentDueDate` field is set to the provided future `LocalDate`.
Validation:
  The assertion verifies that the `paymentDueDate` method allows setting a payment due date in the future, ensuring the method's flexibility and handling of different date scenarios.

These test scenarios cover different aspects of the `paymentDueDate` method, including setting a valid payment due date, handling a null payment due date, and allowing payment due dates in the past and future. They ensure the method's correctness and robustness in various scenarios.
*/

// ********RoostGPT********
package org.openapitools.model;
import java.time.LocalDate;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestPaymentDueDate276Test {
    @Test
    void validPaymentDueDate() {
        // Arrange
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
        LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
        // Act
        BalanceAlertRequest result = balanceAlertRequest.paymentDueDate(paymentDueDate);
        // Assert
        Assertions.assertSame(balanceAlertRequest, result);
        Assertions.assertEquals(paymentDueDate, balanceAlertRequest.getPaymentDueDate());
    }
    @Test
    void nullPaymentDueDate() {
        // Arrange
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
        // Act
        BalanceAlertRequest result = balanceAlertRequest.paymentDueDate(null);
        // Assert
        Assertions.assertSame(balanceAlertRequest, result);
        Assertions.assertNull(balanceAlertRequest.getPaymentDueDate());
    }
    @ParameterizedTest
    @CsvSource({
        "2022, 1, 1",
        "2023, 1, 1",
        "2022, 12, 31"
    })
    void pastPaymentDueDate(int year, int month, int day) {
        // Arrange
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
        LocalDate paymentDueDate = LocalDate.of(year, month, day);
        // Act
        BalanceAlertRequest result = balanceAlertRequest.paymentDueDate(paymentDueDate);
        // Assert
        Assertions.assertSame(balanceAlertRequest, result);
        Assertions.assertEquals(paymentDueDate, balanceAlertRequest.getPaymentDueDate());
    }
    @ParameterizedTest
    @CsvSource({
        "2024, 1, 1",
        "2025, 1, 1",
        "2024, 12, 31"
    })
    void futurePaymentDueDate(int year, int month, int day) {
        // Arrange
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
        LocalDate paymentDueDate = LocalDate.of(year, month, day);
        // Act
        BalanceAlertRequest result = balanceAlertRequest.paymentDueDate(paymentDueDate);
        // Assert
        Assertions.assertSame(balanceAlertRequest, result);
        Assertions.assertEquals(paymentDueDate, balanceAlertRequest.getPaymentDueDate());
    }
}