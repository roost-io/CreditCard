// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setPaymentDueDate_c97ef99bea
ROOST_METHOD_SIG_HASH=setPaymentDueDate_b548b87531

Here are some JUnit test scenarios for the `setPaymentDueDate` method:

Scenario 1: Valid Payment Due Date

Details:
  TestName: validPaymentDueDate()
  Description: This test verifies that the `setPaymentDueDate` method correctly sets a valid payment due date.
Execution:
  Arrange: Create an instance of the class containing the `setPaymentDueDate` method.
  Act: Invoke the `setPaymentDueDate` method with a valid `LocalDate` object representing a future date.
  Assert: Use JUnit assertions to verify that the `paymentDueDate` field of the class instance is set to the provided `LocalDate` value.
Validation:
  The assertion ensures that the `setPaymentDueDate` method correctly assigns the provided `LocalDate` value to the `paymentDueDate` field.
  This test validates that the method behaves as expected when provided with a valid payment due date.

Scenario 2: Null Payment Due Date

Details:
  TestName: nullPaymentDueDate()
  Description: This test checks the behavior of the `setPaymentDueDate` method when passed a null value.
Execution:
  Arrange: Create an instance of the class containing the `setPaymentDueDate` method.
  Act: Invoke the `setPaymentDueDate` method with a null value.
  Assert: Use JUnit assertions to verify that the `paymentDueDate` field of the class instance is set to null.
Validation:
  The assertion confirms that the `setPaymentDueDate` method allows setting the `paymentDueDate` field to null.
  This test ensures that the method handles null values gracefully and does not throw any exceptions.

Scenario 3: Past Payment Due Date

Details:
  TestName: pastPaymentDueDate()
  Description: This test verifies the behavior of the `setPaymentDueDate` method when provided with a past date.
Execution:
  Arrange: Create an instance of the class containing the `setPaymentDueDate` method.
  Act: Invoke the `setPaymentDueDate` method with a `LocalDate` object representing a past date.
  Assert: Use JUnit assertions to verify that the `paymentDueDate` field of the class instance is set to the provided past date.
Validation:
  The assertion ensures that the `setPaymentDueDate` method allows setting the `paymentDueDate` field to a past date.
  This test validates that the method does not enforce any restrictions on the date value and accepts past dates as valid input.

Scenario 4: Payment Due Date Boundary Values

Details:
  TestName: paymentDueDateBoundaryValues()
  Description: This test checks the behavior of the `setPaymentDueDate` method when provided with boundary values for the `LocalDate` object.
Execution:
  Arrange: Create an instance of the class containing the `setPaymentDueDate` method.
  Act: Invoke the `setPaymentDueDate` method with boundary values such as the minimum and maximum supported dates for `LocalDate`.
  Assert: Use JUnit assertions to verify that the `paymentDueDate` field of the class instance is set to the provided boundary values.
Validation:
  The assertion confirms that the `setPaymentDueDate` method correctly handles boundary values for the `LocalDate` object.
  This test ensures that the method does not exhibit any unexpected behavior or throw exceptions when provided with extreme date values.

These test scenarios cover different aspects of the `setPaymentDueDate` method, including valid input, null input, past dates, and boundary values. They aim to validate the method's behavior and ensure that it functions as expected under various conditions.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.time.LocalDate;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestSetPaymentDueDate913Test {
    private BalanceAlertRequest balanceAlertRequest;
    @BeforeEach
    void setUp() {
        balanceAlertRequest = new BalanceAlertRequest();
    }
    @Test
    void validPaymentDueDate() {
        LocalDate futureDate = LocalDate.now().plusDays(7);
        balanceAlertRequest.setPaymentDueDate(futureDate);
        assertEquals(futureDate, balanceAlertRequest.getPaymentDueDate());
    }
    @Test
    void nullPaymentDueDate() {
        balanceAlertRequest.setPaymentDueDate(null);
        assertNull(balanceAlertRequest.getPaymentDueDate());
    }
    @Test
    void pastPaymentDueDate() {
        LocalDate pastDate = LocalDate.now().minusDays(7);
        balanceAlertRequest.setPaymentDueDate(pastDate);
        assertEquals(pastDate, balanceAlertRequest.getPaymentDueDate());
    }
    @ParameterizedTest
    @MethodSource("boundaryValues")
    void paymentDueDateBoundaryValues(LocalDate boundaryValue) {
        balanceAlertRequest.setPaymentDueDate(boundaryValue);
        assertEquals(boundaryValue, balanceAlertRequest.getPaymentDueDate());
    }
    private static Stream<Arguments> boundaryValues() {
        return Stream.of(
                Arguments.of(LocalDate.MIN),
                Arguments.of(LocalDate.MAX)
        );
    }
}