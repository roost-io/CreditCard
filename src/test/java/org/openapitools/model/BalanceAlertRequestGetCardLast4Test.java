// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=getCardLast4_55bc26ac31
ROOST_METHOD_SIG_HASH=getCardLast4_4a5c700ec4

Here are the JUnit test scenarios for the provided getCardLast4() method:

Scenario 1: Valid cardLast4 value

Details:
  TestName: validCardLast4ReturnsCorrectValue
  Description: This test verifies that the getCardLast4() method returns the correct value when a valid cardLast4 is set.
Execution:
  Arrange: Set the cardLast4 field to a valid 4-digit string value.
  Act: Call the getCardLast4() method.
  Assert: Use assertEquals to verify that the returned value matches the expected cardLast4 value.
Validation:
  The assertion ensures that the getCardLast4() method correctly returns the value of the cardLast4 field.
  This test is important to validate that the getter method functions as expected and retrieves the correct cardLast4 value.

Scenario 2: Null cardLast4 value

Details:
  TestName: nullCardLast4ThrowsConstraintViolationException
  Description: This test verifies that the getCardLast4() method throws a ConstraintViolationException when the cardLast4 field is null.
Execution:
  Arrange: Set the cardLast4 field to null.
  Act: Call the getCardLast4() method.
  Assert: Use assertThrows to verify that a ConstraintViolationException is thrown.
Validation:
  The assertion ensures that the @NotNull constraint on the cardLast4 field is properly enforced.
  This test is important to validate that the method handles null values correctly and throws the appropriate exception.

Scenario 3: cardLast4 value with less than 4 digits

Details:
  TestName: cardLast4WithLessThan4DigitsThrowsConstraintViolationException
  Description: This test verifies that the getCardLast4() method throws a ConstraintViolationException when the cardLast4 field has less than 4 digits.
Execution:
  Arrange: Set the cardLast4 field to a string with less than 4 digits.
  Act: Call the getCardLast4() method.
  Assert: Use assertThrows to verify that a ConstraintViolationException is thrown.
Validation:
  The assertion ensures that the @Size constraint on the cardLast4 field is properly enforced for the minimum size of 4.
  This test is important to validate that the method handles invalid cardLast4 values with less than 4 digits correctly.

Scenario 4: cardLast4 value with more than 4 digits

Details:
  TestName: cardLast4WithMoreThan4DigitsThrowsConstraintViolationException
  Description: This test verifies that the getCardLast4() method throws a ConstraintViolationException when the cardLast4 field has more than 4 digits.
Execution:
  Arrange: Set the cardLast4 field to a string with more than 4 digits.
  Act: Call the getCardLast4() method.
  Assert: Use assertThrows to verify that a ConstraintViolationException is thrown.
Validation:
  The assertion ensures that the @Size constraint on the cardLast4 field is properly enforced for the maximum size of 4.
  This test is important to validate that the method handles invalid cardLast4 values with more than 4 digits correctly.

Note: The provided test scenarios assume that the necessary dependencies and configurations for JUnit and constraint validation are set up correctly in the project.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import javax.validation.ConstraintViolationException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.LocalDate;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestGetCardLast4Test {

	@Test
	void validCardLast4ReturnsCorrectValue() {
		// Arrange
		String expectedCardLast4 = "1234";
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
		balanceAlertRequest.setCardLast4(expectedCardLast4);
		// Act
		String actualCardLast4 = balanceAlertRequest.getCardLast4();
		// Assert
		assertEquals(expectedCardLast4, actualCardLast4);
	}

	@Test
	void nullCardLast4ThrowsConstraintViolationException() {
		// Arrange
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
		// Act & Assert
		assertThrows(ConstraintViolationException.class, () -> balanceAlertRequest.setCardLast4(null));
	}

	@ParameterizedTest
	@ValueSource(strings = { "", "1", "12", "123" })
	void cardLast4WithLessThan4DigitsThrowsConstraintViolationException(String invalidCardLast4) {
		// Arrange
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
		// Act & Assert
		assertThrows(ConstraintViolationException.class, () -> balanceAlertRequest.setCardLast4(invalidCardLast4));
	}

	@ParameterizedTest
	@ValueSource(strings = { "12345", "123456", "1234567890" })
	void cardLast4WithMoreThan4DigitsThrowsConstraintViolationException(String invalidCardLast4) {
		// Arrange
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
		// Act & Assert
		assertThrows(ConstraintViolationException.class, () -> balanceAlertRequest.setCardLast4(invalidCardLast4));
	}

}
