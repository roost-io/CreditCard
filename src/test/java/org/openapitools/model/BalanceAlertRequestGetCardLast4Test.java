// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=getCardLast4_55bc26ac31
ROOST_METHOD_SIG_HASH=getCardLast4_4a5c700ec4

Here are the generated JUnit test scenarios for the getCardLast4() method:

Scenario 1: Valid cardLast4 value

Details:
  TestName: validCardLast4Value()
  Description: This test verifies that the getCardLast4() method returns the correct value when a valid cardLast4 value is set.
Execution:
  Arrange: Set the cardLast4 field to a valid 4-digit string value.
  Act: Call the getCardLast4() method.
  Assert: Use assertEquals to compare the returned value with the expected cardLast4 value.
Validation:
  The assertion ensures that the getCardLast4() method correctly retrieves the value of the cardLast4 field.
  This test is important to validate that the getter method functions as expected and returns the correct value.

Scenario 2: Null cardLast4 value

Details:
  TestName: nullCardLast4Value()
  Description: This test verifies that the getCardLast4() method throws a NullPointerException when the cardLast4 value is null.
Execution:
  Arrange: Set the cardLast4 field to null.
  Act: Call the getCardLast4() method.
  Assert: Use assertThrows to verify that a NullPointerException is thrown.
Validation:
  The assertion ensures that the getCardLast4() method throws a NullPointerException when the cardLast4 value is null.
  This test is important to validate that the method handles null values correctly and prevents unexpected behavior.

Scenario 3: cardLast4 value with less than 4 digits

Details:
  TestName: cardLast4ValueWithLessThan4Digits()
  Description: This test verifies that the getCardLast4() method throws a ConstraintViolationException when the cardLast4 value has less than 4 digits.
Execution:
  Arrange: Set the cardLast4 field to a string value with less than 4 digits.
  Act: Call the getCardLast4() method.
  Assert: Use assertThrows to verify that a ConstraintViolationException is thrown.
Validation:
  The assertion ensures that the getCardLast4() method throws a ConstraintViolationException when the cardLast4 value violates the @Size constraint.
  This test is important to validate that the method enforces the minimum size constraint on the cardLast4 value.

Scenario 4: cardLast4 value with more than 4 digits

Details:
  TestName: cardLast4ValueWithMoreThan4Digits()
  Description: This test verifies that the getCardLast4() method throws a ConstraintViolationException when the cardLast4 value has more than 4 digits.
Execution:
  Arrange: Set the cardLast4 field to a string value with more than 4 digits.
  Act: Call the getCardLast4() method.
  Assert: Use assertThrows to verify that a ConstraintViolationException is thrown.
Validation:
  The assertion ensures that the getCardLast4() method throws a ConstraintViolationException when the cardLast4 value violates the @Size constraint.
  This test is important to validate that the method enforces the maximum size constraint on the cardLast4 value.

Note: The test scenarios assume that the appropriate validation annotations (@NotNull and @Size) are properly configured and working as expected. The tests focus on the behavior of the getCardLast4() method and its interaction with the cardLast4 field.
*/

// ********RoostGPT********
package org.openapitools.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

class BalanceAlertRequestGetCardLast4Test {

	private BalanceAlertRequest balanceAlertRequest;

	@BeforeEach
	void setUp() {
		balanceAlertRequest = new BalanceAlertRequest();
	}

	@Test
	void validCardLast4Value() {
		// Arrange
		String expectedCardLast4 = "1234";
		balanceAlertRequest.setCardLast4(expectedCardLast4);
		// Act
		String actualCardLast4 = balanceAlertRequest.getCardLast4();
		// Assert
		assertEquals(expectedCardLast4, actualCardLast4);
	}

	@Test
	void nullCardLast4Value() {
		// Arrange
		balanceAlertRequest.setCardLast4(null);
		// Act & Assert
		// Modify the assertion to expect IllegalArgumentException instead of
		// NullPointerException
		assertThrows(IllegalArgumentException.class, () -> balanceAlertRequest.getCardLast4());
	}

	@ParameterizedTest
	@CsvSource({ "123", "12", "1" })
	void cardLast4ValueWithLessThan4Digits(String cardLast4) {
		// Arrange
		balanceAlertRequest.setCardLast4(cardLast4);
		// Act & Assert
		// Add a custom validation check in the getCardLast4() method to throw
		// IllegalArgumentException for invalid length
		assertThrows(IllegalArgumentException.class, () -> balanceAlertRequest.getCardLast4());
	}

	@ParameterizedTest
	@CsvSource({ "12345", "123456", "1234567" })
	void cardLast4ValueWithMoreThan4Digits(String cardLast4) {
		// Arrange
		balanceAlertRequest.setCardLast4(cardLast4);
		// Act & Assert
		// Add a custom validation check in the getCardLast4() method to throw
		// IllegalArgumentException for invalid length
		assertThrows(IllegalArgumentException.class, () -> balanceAlertRequest.getCardLast4());
	}

}
