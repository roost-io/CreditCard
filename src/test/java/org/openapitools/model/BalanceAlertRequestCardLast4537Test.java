// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=cardLast4_3d92b3ad7d
ROOST_METHOD_SIG_HASH=cardLast4_cf18daeacc

Here are the JUnit test scenarios for the provided `cardLast4` method:

Scenario 1: Valid cardLast4 value

Details:
  TestName: validCardLast4Value
  Description: This test verifies that the `cardLast4` method sets the `cardLast4` field correctly when a valid value is provided and returns the `BalanceAlertRequest` instance.
Execution:
  Arrange: Create an instance of `BalanceAlertRequest`.
  Act: Invoke the `cardLast4` method with a valid string value (e.g., "1234").
  Assert: Assert that the `cardLast4` field of the `BalanceAlertRequest` instance is set to the provided value using `assertEquals`.
Validation:
  The assertion ensures that the `cardLast4` field is properly set when a valid value is passed to the method. This test is important to validate that the method correctly updates the `cardLast4` field and returns the `BalanceAlertRequest` instance for method chaining.

Scenario 2: Null cardLast4 value

Details:
  TestName: nullCardLast4Value
  Description: This test verifies that the `cardLast4` method handles a null value correctly by setting the `cardLast4` field to null and returning the `BalanceAlertRequest` instance.
Execution:
  Arrange: Create an instance of `BalanceAlertRequest`.
  Act: Invoke the `cardLast4` method with a null value.
  Assert: Assert that the `cardLast4` field of the `BalanceAlertRequest` instance is set to null using `assertNull`.
Validation:
  The assertion ensures that the `cardLast4` field is properly set to null when a null value is passed to the method. This test is important to validate that the method handles null values gracefully and returns the `BalanceAlertRequest` instance for method chaining.

Scenario 3: Empty cardLast4 value

Details:
  TestName: emptyCardLast4Value
  Description: This test verifies that the `cardLast4` method handles an empty string value correctly by setting the `cardLast4` field to an empty string and returning the `BalanceAlertRequest` instance.
Execution:
  Arrange: Create an instance of `BalanceAlertRequest`.
  Act: Invoke the `cardLast4` method with an empty string value.
  Assert: Assert that the `cardLast4` field of the `BalanceAlertRequest` instance is set to an empty string using `assertEquals`.
Validation:
  The assertion ensures that the `cardLast4` field is properly set to an empty string when an empty string value is passed to the method. This test is important to validate that the method handles empty string values correctly and returns the `BalanceAlertRequest` instance for method chaining.

Scenario 4: Method chaining

Details:
  TestName: methodChaining
  Description: This test verifies that the `cardLast4` method supports method chaining by returning the `BalanceAlertRequest` instance.
Execution:
  Arrange: Create an instance of `BalanceAlertRequest`.
  Act: Invoke the `cardLast4` method with a valid string value and chain another method call (e.g., `cardLast4("1234").someOtherMethod()`).
  Assert: Assert that the chained method call executes successfully without any exceptions.
Validation:
  The successful execution of the chained method call confirms that the `cardLast4` method returns the `BalanceAlertRequest` instance, allowing for method chaining. This test is important to ensure that the method adheres to the fluent API design pattern and enables convenient usage in client code.

Note: The provided test scenarios assume the existence of a `BalanceAlertRequest` class. Make sure to replace `someOtherMethod()` with an actual method available in the `BalanceAlertRequest` class.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.LocalDate;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestCardLast4537Test {
    private BalanceAlertRequest balanceAlertRequest;
    @BeforeEach
    void setUp() {
        balanceAlertRequest = new BalanceAlertRequest();
    }
    @ParameterizedTest
    @ValueSource(strings = {"1234", "5678", "9012"})
    void cardLast4_ValidValue_SetsCardLast4AndReturnsInstance(String cardLast4) {
        BalanceAlertRequest result = balanceAlertRequest.cardLast4(cardLast4);
        assertEquals(cardLast4, balanceAlertRequest.getCardLast4());
        assertSame(balanceAlertRequest, result);
    }
    @ParameterizedTest
    @NullSource
    void cardLast4_NullValue_SetsCardLast4ToNullAndReturnsInstance(String cardLast4) {
        BalanceAlertRequest result = balanceAlertRequest.cardLast4(cardLast4);
        assertNull(balanceAlertRequest.getCardLast4());
        assertSame(balanceAlertRequest, result);
    }
    @Test
    void cardLast4_EmptyValue_SetsCardLast4ToEmptyStringAndReturnsInstance() {
        String cardLast4 = "";
        BalanceAlertRequest result = balanceAlertRequest.cardLast4(cardLast4);
        assertEquals("", balanceAlertRequest.getCardLast4());
        assertSame(balanceAlertRequest, result);
    }
    @Test
    void cardLast4_MethodChaining_ReturnsInstance() {
        BalanceAlertRequest result = balanceAlertRequest
                .cardLast4("1234")
                .paymentDueDate(LocalDate.now())
                .currentDate(LocalDate.now());
        assertSame(balanceAlertRequest, result);
    }
}