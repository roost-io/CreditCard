// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=additionalCharges_6fb76b3996
ROOST_METHOD_SIG_HASH=additionalCharges_a47610217a

Here are the JUnit test scenarios for the provided additionalCharges method:

Scenario 1: Set Additional Charges

Details:
  TestName: setAdditionalCharges_ValidValue_UpdatesField
  Description: This test verifies that calling the additionalCharges method with a valid string value correctly updates the additionalCharges field of the CollectionNotificationRequest object.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the additionalCharges method with a valid string value.
  Assert: Use JUnit assertions to check that the additionalCharges field of the CollectionNotificationRequest object is updated with the provided value.
Validation:
  The assertion ensures that the additionalCharges field is set correctly when a valid string value is passed to the method.
  This test is important to validate that the setter method functions as expected and allows setting the additional charges for the collection notification request.

Scenario 2: Set Additional Charges to Null

Details:
  TestName: setAdditionalCharges_NullValue_UpdatesFieldToNull
  Description: This test checks that calling the additionalCharges method with a null value sets the additionalCharges field of the CollectionNotificationRequest object to null.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the additionalCharges method with a null value.
  Assert: Use JUnit assertions to verify that the additionalCharges field of the CollectionNotificationRequest object is set to null.
Validation:
  The assertion confirms that the additionalCharges field is properly set to null when a null value is passed to the method.
  This test is crucial to ensure that the setter method handles null values correctly and allows clearing the additional charges if needed.

Scenario 3: Fluent API - Return CollectionNotificationRequest Instance

Details:
  TestName: setAdditionalCharges_ReturnsCollectionNotificationRequestInstance
  Description: This test verifies that the additionalCharges method returns the same instance of CollectionNotificationRequest, allowing for fluent API usage.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the additionalCharges method with any valid string value and store the returned object.
  Assert: Use JUnit assertions to check that the returned object is the same instance as the original CollectionNotificationRequest object.
Validation:
  The assertion ensures that the additionalCharges method follows the fluent API pattern by returning the same instance of CollectionNotificationRequest.
  This test is important to validate that the method can be chained with other methods of the CollectionNotificationRequest class, enabling a fluent and readable code style.

These test scenarios cover the basic functionality of the additionalCharges method, including setting a valid value, handling null values, and verifying the fluent API behavior. They ensure that the method behaves as expected and integrates well with the CollectionNotificationRequest class.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestAdditionalCharges472Test {
    @Test
    void setAdditionalCharges_ValidValue_UpdatesField() {
        // Arrange
        CollectionNotificationRequest request = new CollectionNotificationRequest();
        String additionalCharges = "10.00";
        // Act
        request.additionalCharges(additionalCharges);
        // Assert
        assertEquals(additionalCharges, request.getAdditionalCharges());
    }
    @Test
    void setAdditionalCharges_NullValue_UpdatesFieldToNull() {
        // Arrange
        CollectionNotificationRequest request = new CollectionNotificationRequest();
        request.setAdditionalCharges("10.00");
        // Act
        request.additionalCharges(null);
        // Assert
        assertNull(request.getAdditionalCharges());
    }
    @Test
    void setAdditionalCharges_ReturnsCollectionNotificationRequestInstance() {
        // Arrange
        CollectionNotificationRequest request = new CollectionNotificationRequest();
        String additionalCharges = "10.00";
        // Act
        CollectionNotificationRequest result = request.additionalCharges(additionalCharges);
        // Assert
        assertSame(request, result);
    }
}