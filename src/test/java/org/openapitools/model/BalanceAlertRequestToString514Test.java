// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=toString_4f6c6df0bb
ROOST_METHOD_SIG_HASH=toString_ceffa8036e

Here are some JUnit test scenarios for the provided toString method:

Scenario 1: Test toString with valid data

Details:
  TestName: toStringWithValidData
  Description: This test verifies that the toString method returns the expected string representation when provided with valid data for paymentDueDate, currentDate, and cardLast4.
Execution:
  Arrange: Create a BalanceAlertRequest object with valid values for paymentDueDate, currentDate, and cardLast4.
  Act: Call the toString method on the BalanceAlertRequest object.
  Assert: Use assertEquals to compare the returned string with the expected string representation.
Validation:
  The assertion verifies that the toString method correctly formats the BalanceAlertRequest object's data into the expected string representation.
  This test ensures that the toString method adheres to the specified format and includes all the relevant data fields.

Scenario 2: Test toString with null paymentDueDate

Details:
  TestName: toStringWithNullPaymentDueDate
  Description: This test checks how the toString method handles a null value for the paymentDueDate field.
Execution:
  Arrange: Create a BalanceAlertRequest object with null for paymentDueDate and valid values for currentDate and cardLast4.
  Act: Call the toString method on the BalanceAlertRequest object.
  Assert: Use assertEquals to compare the returned string with the expected string representation, which should include "null" for the paymentDueDate field.
Validation:
  The assertion verifies that the toString method properly handles a null value for paymentDueDate and includes "null" in the string representation.
  This test ensures that the toString method doesn't throw an exception or produce unexpected results when encountering a null value.

Scenario 3: Test toString with null currentDate

Details:
  TestName: toStringWithNullCurrentDate
  Description: This test checks how the toString method handles a null value for the currentDate field.
Execution:
  Arrange: Create a BalanceAlertRequest object with valid values for paymentDueDate and cardLast4, and null for currentDate.
  Act: Call the toString method on the BalanceAlertRequest object.
  Assert: Use assertEquals to compare the returned string with the expected string representation, which should include "null" for the currentDate field.
Validation:
  The assertion verifies that the toString method properly handles a null value for currentDate and includes "null" in the string representation.
  This test ensures that the toString method doesn't throw an exception or produce unexpected results when encountering a null value.

Scenario 4: Test toString with null cardLast4

Details:
  TestName: toStringWithNullCardLast4
  Description: This test checks how the toString method handles a null value for the cardLast4 field.
Execution:
  Arrange: Create a BalanceAlertRequest object with valid values for paymentDueDate and currentDate, and null for cardLast4.
  Act: Call the toString method on the BalanceAlertRequest object.
  Assert: Use assertEquals to compare the returned string with the expected string representation, which should include "null" for the cardLast4 field.
Validation:
  The assertion verifies that the toString method properly handles a null value for cardLast4 and includes "null" in the string representation.
  This test ensures that the toString method doesn't throw an exception or produce unexpected results when encountering a null value.

These test scenarios cover different aspects of the toString method, including handling valid data and null values for each field. They ensure that the toString method generates the expected string representation in various scenarios.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import java.time.LocalDate;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestToString514Test {
    @Test
    @DisplayName("Test toString with valid data")
    void toStringWithValidData() {
        // Arrange
        LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
        LocalDate currentDate = LocalDate.of(2023, 6, 10);
        String cardLast4 = "1234";
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest()
                .paymentDueDate(paymentDueDate)
                .currentDate(currentDate)
                .cardLast4(cardLast4);
        // Act
        String result = balanceAlertRequest.toString();
        // Assert
        String expected = "class BalanceAlertRequest {\n" +
                "    paymentDueDate: 2023-06-15\n" +
                "    currentDate: 2023-06-10\n" +
                "    cardLast4: 1234\n" +
                "}";
        assertEquals(expected, result);
    }
    @Test
    @DisplayName("Test toString with null paymentDueDate")
    void toStringWithNullPaymentDueDate() {
        // Arrange
        LocalDate currentDate = LocalDate.of(2023, 6, 10);
        String cardLast4 = "1234";
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest()
                .currentDate(currentDate)
                .cardLast4(cardLast4);
        // Act
        String result = balanceAlertRequest.toString();
        // Assert
        String expected = "class BalanceAlertRequest {\n" +
                "    paymentDueDate: null\n" +
                "    currentDate: 2023-06-10\n" +
                "    cardLast4: 1234\n" +
                "}";
        assertEquals(expected, result);
    }
    @Test
    @DisplayName("Test toString with null currentDate")
    void toStringWithNullCurrentDate() {
        // Arrange
        LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
        String cardLast4 = "1234";
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest()
                .paymentDueDate(paymentDueDate)
                .cardLast4(cardLast4);
        // Act
        String result = balanceAlertRequest.toString();
        // Assert
        String expected = "class BalanceAlertRequest {\n" +
                "    paymentDueDate: 2023-06-15\n" +
                "    currentDate: null\n" +
                "    cardLast4: 1234\n" +
                "}";
        assertEquals(expected, result);
    }
    @Test
    @DisplayName("Test toString with null cardLast4")
    void toStringWithNullCardLast4() {
        // Arrange
        LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
        LocalDate currentDate = LocalDate.of(2023, 6, 10);
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest()
                .paymentDueDate(paymentDueDate)
                .currentDate(currentDate);
        // Act
        String result = balanceAlertRequest.toString();
        // Assert
        String expected = "class BalanceAlertRequest {\n" +
                "    paymentDueDate: 2023-06-15\n" +
                "    currentDate: 2023-06-10\n" +
                "    cardLast4: null\n" +
                "}";
        assertEquals(expected, result);
    }
}