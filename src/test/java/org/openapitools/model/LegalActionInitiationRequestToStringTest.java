// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=toString_33ea57a51c
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

Here are some JUnit test scenarios for the provided toString() method:

Scenario 1: Test toString() with all fields populated

Details:
  TestName: toStringWithAllFieldsPopulated()
  Description: This test verifies that the toString() method correctly generates a string representation of the LegalActionInitiationRequest object when all fields are populated with non-null values.
Execution:
  Arrange: Create an instance of LegalActionInitiationRequest and set values for nonPaymentStatus, legalStatus, and cardLast4 fields.
  Act: Call the toString() method on the LegalActionInitiationRequest instance.
  Assert: Use JUnit assertions to verify that the returned string contains the expected field names and their corresponding values.
Validation:
  The assertion ensures that the toString() method properly includes all field names and their respective values in the generated string representation.
  This test is important to validate that the toString() method provides a comprehensive and accurate string representation of the object's state.

Scenario 2: Test toString() with null fields

Details:
  TestName: toStringWithNullFields()
  Description: This test checks that the toString() method handles null field values gracefully and includes them in the generated string representation.
Execution:
  Arrange: Create an instance of LegalActionInitiationRequest with all fields set to null.
  Act: Invoke the toString() method on the LegalActionInitiationRequest instance.
  Assert: Use JUnit assertions to verify that the returned string contains the field names and "null" as the value for each field.
Validation:
  The assertion confirms that the toString() method correctly handles null field values and includes them in the string representation without throwing any exceptions.
  This test is crucial to ensure that the toString() method provides a consistent and readable output even when fields are null.

Scenario 3: Test toString() with empty string fields

Details:
  TestName: toStringWithEmptyStringFields()
  Description: This test verifies that the toString() method handles empty string field values correctly and includes them in the generated string representation.
Execution:
  Arrange: Create an instance of LegalActionInitiationRequest and set empty string values for nonPaymentStatus, legalStatus, and cardLast4 fields.
  Act: Call the toString() method on the LegalActionInitiationRequest instance.
  Assert: Use JUnit assertions to verify that the returned string contains the field names and empty string values for each field.
Validation:
  The assertion ensures that the toString() method correctly handles empty string field values and includes them in the string representation without any formatting issues.
  This test is important to validate that the toString() method provides an accurate representation of the object's state even when fields have empty string values.

Scenario 4: Test toString() with special characters in field values

Details:
  TestName: toStringWithSpecialCharactersInFieldValues()
  Description: This test checks that the toString() method properly handles field values containing special characters and includes them in the generated string representation without any formatting issues.
Execution:
  Arrange: Create an instance of LegalActionInitiationRequest and set field values containing special characters such as quotes, backslashes, and newline characters.
  Act: Invoke the toString() method on the LegalActionInitiationRequest instance.
  Assert: Use JUnit assertions to verify that the returned string contains the field names and their corresponding values with special characters properly escaped or formatted.
Validation:
  The assertion confirms that the toString() method correctly handles special characters in field values and includes them in the string representation without any formatting or escaping issues.
  This test is crucial to ensure that the toString() method provides a valid and readable string representation even when field values contain special characters.

These test scenarios cover different aspects of the toString() method, including handling of populated fields, null fields, empty string fields, and special characters in field values. They help ensure the robustness and correctness of the toString() method in various scenarios.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;

class LegalActionInitiationRequestToStringTest {

	@ParameterizedTest
	@MethodSource("provideArgsForToStringWithAllFieldsPopulated")
	void toStringWithAllFieldsPopulated(String nonPaymentStatus, String legalStatus, String cardLast4,
			String expectedString) {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest(nonPaymentStatus, legalStatus,
				cardLast4);
		String actualString = request.toString();
		assertEquals(expectedString, actualString);
	}

	private static Stream<Arguments> provideArgsForToStringWithAllFieldsPopulated() {
		return Stream.of(Arguments.of("status1", "legal1", "1234",
				"class LegalActionInitiationRequest {\n    nonPaymentStatus: status1\n    legalStatus: legal1\n    cardLast4: 1234\n}"),
				Arguments.of("status2", "legal2", "5678",
						"class LegalActionInitiationRequest {\n    nonPaymentStatus: status2\n    legalStatus: legal2\n    cardLast4: 5678\n}"));
	}

	@Test
	void toStringWithNullFields() {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest(null, null, null);
		String expectedString = "class LegalActionInitiationRequest {\n" + "    nonPaymentStatus: null\n"
				+ "    legalStatus: null\n" + "    cardLast4: null\n" + "}";
		String actualString = request.toString();
		assertEquals(expectedString, actualString);
	}

	@Test
	void toStringWithEmptyStringFields() {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest("", "", "");
		String expectedString = "class LegalActionInitiationRequest {\n" + "    nonPaymentStatus: \n"
				+ "    legalStatus: \n" + "    cardLast4: \n" + "}";
		String actualString = request.toString();
		assertEquals(expectedString, actualString);
	}

	@Test
	void toStringWithSpecialCharactersInFieldValues() {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest("status\"\\", "legal\n", "1234\t");
		String expectedString = "class LegalActionInitiationRequest {\n" + "    nonPaymentStatus: status\"\\\n"
				+ "    legalStatus: legal\n" + "\n" + "    cardLast4: 1234\t\n" + "}";
		String actualString = request.toString();
		assertEquals(expectedString, actualString);
	}

}
