// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=cardLast4_3d92b3ad7d
ROOST_METHOD_SIG_HASH=cardLast4_cf18daeacc

Here are the JUnit test scenarios for the provided `cardLast4` method:

Scenario 1: Valid Last 4 Digits of Card Number

Details:
  TestName: validLast4Digits
  Description: This test verifies that the `cardLast4` method correctly sets the `cardLast4` property of the `BalanceAlertRequest` object when a valid last 4 digits of a card number is provided.
Execution:
  Arrange: Create an instance of `BalanceAlertRequest`.
  Act: Invoke the `cardLast4` method with a valid last 4 digits of a card number (e.g., "1234").
  Assert: Use JUnit assertions to verify that the `cardLast4` property of the `BalanceAlertRequest` object is set to the provided value.
Validation:
  The assertion ensures that the `cardLast4` method correctly updates the `cardLast4` property of the `BalanceAlertRequest` object. This test is important to validate that the method behaves as expected when provided with valid input.

Scenario 2: Empty Last 4 Digits of Card Number

Details:
  TestName: emptyLast4Digits
  Description: This test verifies that the `cardLast4` method handles an empty string as the last 4 digits of a card number and sets the `cardLast4` property of the `BalanceAlertRequest` object accordingly.
Execution:
  Arrange: Create an instance of `BalanceAlertRequest`.
  Act: Invoke the `cardLast4` method with an empty string as the last 4 digits of a card number.
  Assert: Use JUnit assertions to verify that the `cardLast4` property of the `BalanceAlertRequest` object is set to an empty string.
Validation:
  The assertion ensures that the `cardLast4` method correctly handles an empty string input and sets the `cardLast4` property of the `BalanceAlertRequest` object accordingly. This test is important to validate the method's behavior when provided with an empty string.

Scenario 3: Null Last 4 Digits of Card Number

Details:
  TestName: nullLast4Digits
  Description: This test verifies that the `cardLast4` method handles a null value as the last 4 digits of a card number and sets the `cardLast4` property of the `BalanceAlertRequest` object to null.
Execution:
  Arrange: Create an instance of `BalanceAlertRequest`.
  Act: Invoke the `cardLast4` method with a null value as the last 4 digits of a card number.
  Assert: Use JUnit assertions to verify that the `cardLast4` property of the `BalanceAlertRequest` object is set to null.
Validation:
  The assertion ensures that the `cardLast4` method correctly handles a null input and sets the `cardLast4` property of the `BalanceAlertRequest` object to null. This test is important to validate the method's behavior when provided with a null value.

Scenario 4: Last 4 Digits of Card Number with Less Than 4 Characters

Details:
  TestName: last4DigitsWithLessThan4Characters
  Description: This test verifies that the `cardLast4` method handles a string with less than 4 characters as the last 4 digits of a card number and sets the `cardLast4` property of the `BalanceAlertRequest` object accordingly.
Execution:
  Arrange: Create an instance of `BalanceAlertRequest`.
  Act: Invoke the `cardLast4` method with a string containing less than 4 characters (e.g., "123").
  Assert: Use JUnit assertions to verify that the `cardLast4` property of the `BalanceAlertRequest` object is set to the provided value.
Validation:
  The assertion ensures that the `cardLast4` method correctly handles a string with less than 4 characters and sets the `cardLast4` property of the `BalanceAlertRequest` object accordingly. This test is important to validate the method's behavior when provided with a string that has fewer than 4 characters.

Note: The provided `cardLast4` method does not include any input validation or error handling. It simply sets the `cardLast4` property of the `BalanceAlertRequest` object to the provided value. Therefore, the test scenarios focus on verifying the basic functionality of the method with different input values.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.NullAndEmptySource;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.LocalDate;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestCardLast4Test {

	@Test
	void cardLast4_withValidLast4Digits_shouldSetCardLast4Property() {
		// Arrange
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
		String validLast4Digits = "1234";
		// Act
		BalanceAlertRequest result = balanceAlertRequest.cardLast4(validLast4Digits);
		// Assert
		assertEquals(validLast4Digits, result.getCardLast4());
		assertSame(balanceAlertRequest, result);
	}

	@ParameterizedTest
	@NullAndEmptySource
	void cardLast4_withNullOrEmptyLast4Digits_shouldSetCardLast4Property(String last4Digits) {
		// Arrange
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
		// Act
		BalanceAlertRequest result = balanceAlertRequest.cardLast4(last4Digits);
		// Assert
		assertEquals(last4Digits, result.getCardLast4());
		assertSame(balanceAlertRequest, result);
	}

	@ParameterizedTest
	@ValueSource(strings = { "1", "12", "123" })
	void cardLast4_withLessThan4Characters_shouldSetCardLast4Property(String last4Digits) {
		// Arrange
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
		// Act
		BalanceAlertRequest result = balanceAlertRequest.cardLast4(last4Digits);
		// Assert
		assertEquals(last4Digits, result.getCardLast4());
		assertSame(balanceAlertRequest, result);
	}

}