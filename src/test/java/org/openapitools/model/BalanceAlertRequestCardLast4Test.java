// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=cardLast4_3d92b3ad7d
ROOST_METHOD_SIG_HASH=cardLast4_cf18daeacc

Here are the JUnit test scenarios for the provided `cardLast4` method:

Scenario 1: Valid Card Last 4 Digits

Details:
  TestName: validCardLast4SetsValueAndReturnsRequest
  Description: This test verifies that providing a valid card last 4 digits string sets the corresponding private field and returns the BalanceAlertRequest instance.
Execution:
  Arrange: Create a new instance of the BalanceAlertRequest class.
  Act: Invoke the cardLast4 method with a valid string representing the last 4 digits of a card.
  Assert: Assert that the private cardLast4 field is set to the provided value and the method returns the same BalanceAlertRequest instance.
Validation:
  The assertion ensures that the cardLast4 method correctly sets the private field and maintains the fluent API by returning the request instance. This test is important to validate the basic functionality and chaining behavior of the method.

Scenario 2: Null Card Last 4 Digits

Details:
  TestName: nullCardLast4SetsValueToNullAndReturnsRequest
  Description: This test checks that passing a null value to the cardLast4 method sets the corresponding private field to null and returns the BalanceAlertRequest instance.
Execution:
  Arrange: Create a new instance of the BalanceAlertRequest class.
  Act: Invoke the cardLast4 method with a null value.
  Assert: Assert that the private cardLast4 field is set to null and the method returns the same BalanceAlertRequest instance.
Validation:
  The assertion verifies that the cardLast4 method handles null values gracefully by setting the private field to null and maintaining the fluent API. This test ensures the method's behavior remains consistent even when provided with null input.

Scenario 3: Empty Card Last 4 Digits

Details:
  TestName: emptyCardLast4SetsValueToEmptyStringAndReturnsRequest
  Description: This test validates that providing an empty string to the cardLast4 method sets the corresponding private field to an empty string and returns the BalanceAlertRequest instance.
Execution:
  Arrange: Create a new instance of the BalanceAlertRequest class.
  Act: Invoke the cardLast4 method with an empty string.
  Assert: Assert that the private cardLast4 field is set to an empty string and the method returns the same BalanceAlertRequest instance.
Validation:
  The assertion confirms that the cardLast4 method handles empty strings by setting the private field accordingly and maintaining the fluent API. This test ensures the method's behavior remains predictable when provided with an empty string input.

Scenario 4: Card Last 4 Digits with Leading/Trailing Whitespace

Details:
  TestName: cardLast4WithWhitespaceSetsValueWithoutWhitespaceAndReturnsRequest
  Description: This test verifies that providing a card last 4 digits string with leading/trailing whitespace to the cardLast4 method sets the corresponding private field with the whitespace trimmed and returns the BalanceAlertRequest instance.
Execution:
  Arrange: Create a new instance of the BalanceAlertRequest class.
  Act: Invoke the cardLast4 method with a string containing leading/trailing whitespace.
  Assert: Assert that the private cardLast4 field is set to the trimmed value and the method returns the same BalanceAlertRequest instance.
Validation:
  The assertion ensures that the cardLast4 method handles input with leading/trailing whitespace by trimming the value before setting the private field. This test validates the method's ability to sanitize input and maintain data consistency.

Note: The provided test scenarios assume that the BalanceAlertRequest class has appropriate getter methods or reflection capabilities to access the private fields for assertion purposes.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.ValueSource;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;

class BalanceAlertRequestCardLast4Test {

	private BalanceAlertRequest balanceAlertRequest;

	@BeforeEach
	void setUp() {
		balanceAlertRequest = new BalanceAlertRequest();
	}

	@ParameterizedTest
	@ValueSource(strings = { "1234", "5678", "9012" })
	void validCardLast4SetsValueAndReturnsRequest(String cardLast4) {
		BalanceAlertRequest result = balanceAlertRequest.cardLast4(cardLast4);
		assertEquals(cardLast4, balanceAlertRequest.getCardLast4());
		assertSame(balanceAlertRequest, result);
	}

	@Test
	void nullCardLast4SetsValueToNullAndReturnsRequest() {
		BalanceAlertRequest result = balanceAlertRequest.cardLast4(null);
		assertNull(balanceAlertRequest.getCardLast4());
		assertSame(balanceAlertRequest, result);
	}

	@Test
	void emptyCardLast4SetsValueToEmptyStringAndReturnsRequest() {
		BalanceAlertRequest result = balanceAlertRequest.cardLast4("");
		assertEquals("", balanceAlertRequest.getCardLast4());
		assertSame(balanceAlertRequest, result);
	}

	@ParameterizedTest
	@MethodSource("provideCardLast4WithWhitespace")
	void cardLast4WithWhitespaceSetsValueWithoutWhitespaceAndReturnsRequest(String input, String expected) {
		BalanceAlertRequest result = balanceAlertRequest.cardLast4(input);
		assertEquals(expected, balanceAlertRequest.getCardLast4());
		assertSame(balanceAlertRequest, result);
	}

	private static Stream<Arguments> provideCardLast4WithWhitespace() {
		return Stream.of(Arguments.of("  1234  ", "1234"), Arguments.of("\t5678\t", "5678"),
				Arguments.of("\n9012\n", "9012"));
	}

}
