// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=cardLast4_3d92b3ad7d
ROOST_METHOD_SIG_HASH=cardLast4_cf18daeacc

Here are the JUnit test scenarios for the provided `cardLast4` method:

Scenario 1: Valid Card Last 4 Digits

Details:
  TestName: cardLast4WithValidInput
  Description: This test verifies that the `cardLast4` method correctly sets the `cardLast4` field when provided with a valid input string representing the last 4 digits of a card number.
Execution:
  Arrange: Create an instance of the `BalanceAlertRequest` class.
  Act: Invoke the `cardLast4` method with a valid input string (e.g., "1234").
  Assert: Use JUnit assertions to verify that the `cardLast4` field of the `BalanceAlertRequest` instance is set to the provided value.
Validation:
  The assertion ensures that the `cardLast4` method correctly sets the `cardLast4` field when provided with a valid input string.
  This test is important to validate that the method behaves as expected and properly updates the state of the `BalanceAlertRequest` object.

Scenario 2: Null Card Last 4 Digits

Details:
  TestName: cardLast4WithNullInput
  Description: This test verifies that the `cardLast4` method handles a null input string gracefully and does not throw any exceptions.
Execution:
  Arrange: Create an instance of the `BalanceAlertRequest` class.
  Act: Invoke the `cardLast4` method with a null input string.
  Assert: Use JUnit assertions to verify that no exceptions are thrown and the `cardLast4` field of the `BalanceAlertRequest` instance remains unchanged (i.e., null).
Validation:
  The assertion ensures that the `cardLast4` method can handle a null input without throwing any exceptions.
  This test is important to validate that the method is resilient to null inputs and does not cause unexpected behavior or crashes in the application.

Scenario 3: Empty Card Last 4 Digits

Details:
  TestName: cardLast4WithEmptyInput
  Description: This test verifies that the `cardLast4` method handles an empty input string correctly and sets the `cardLast4` field accordingly.
Execution:
  Arrange: Create an instance of the `BalanceAlertRequest` class.
  Act: Invoke the `cardLast4` method with an empty input string.
  Assert: Use JUnit assertions to verify that the `cardLast4` field of the `BalanceAlertRequest` instance is set to an empty string.
Validation:
  The assertion ensures that the `cardLast4` method correctly sets the `cardLast4` field when provided with an empty input string.
  This test is important to validate that the method handles empty inputs as expected and does not cause any undesired behavior.

Scenario 4: Card Last 4 Digits with Whitespace

Details:
  TestName: cardLast4WithWhitespaceInput
  Description: This test verifies that the `cardLast4` method handles input strings with leading or trailing whitespace correctly and sets the `cardLast4` field after trimming the whitespace.
Execution:
  Arrange: Create an instance of the `BalanceAlertRequest` class.
  Act: Invoke the `cardLast4` method with an input string containing leading or trailing whitespace (e.g., " 1234 ").
  Assert: Use JUnit assertions to verify that the `cardLast4` field of the `BalanceAlertRequest` instance is set to the trimmed value (e.g., "1234").
Validation:
  The assertion ensures that the `cardLast4` method correctly trims any leading or trailing whitespace from the input string before setting the `cardLast4` field.
  This test is important to validate that the method handles input strings with whitespace consistently and provides the expected behavior.

Note: The test scenarios assume that the `BalanceAlertRequest` class has a getter method for the `cardLast4` field to facilitate assertions. If not present, you may need to modify the assertions accordingly.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import static org.junit.jupiter.api.Assertions.*;

class BalanceAlertRequestCardLast4Test {

	private BalanceAlertRequest balanceAlertRequest;

	@BeforeEach
	void setUp() {
		balanceAlertRequest = new BalanceAlertRequest();
	}

	@Test
	void cardLast4WithValidInput() {
		String validCardLast4 = "1234";
		BalanceAlertRequest result = balanceAlertRequest.cardLast4(validCardLast4);
		assertEquals(validCardLast4, result.getCardLast4());
		assertSame(balanceAlertRequest, result);
	}

	@Test
	void cardLast4WithNullInput() {
		BalanceAlertRequest result = balanceAlertRequest.cardLast4(null);
		assertNull(result.getCardLast4());
		assertSame(balanceAlertRequest, result);
	}

	@Test
	void cardLast4WithEmptyInput() {
		String emptyCardLast4 = "";
		BalanceAlertRequest result = balanceAlertRequest.cardLast4(emptyCardLast4);
		assertEquals(emptyCardLast4, result.getCardLast4());
		assertSame(balanceAlertRequest, result);
	}

	@ParameterizedTest
	@ValueSource(strings = { " 1234", "1234 ", " 1234 " })
	void cardLast4WithWhitespaceInput(String cardLast4WithWhitespace) {
		// Modify the test to expect the input value with whitespace
		BalanceAlertRequest result = balanceAlertRequest.cardLast4(cardLast4WithWhitespace);
		assertEquals(cardLast4WithWhitespace, result.getCardLast4());
		assertSame(balanceAlertRequest, result);
	}

	// Add a new test case to check if the cardLast4 method trims the input
	@ParameterizedTest
	@ValueSource(strings = { " 1234", "1234 ", " 1234 " })
	void cardLast4ShouldTrimWhitespace(String cardLast4WithWhitespace) {
		String trimmedCardLast4 = cardLast4WithWhitespace.trim();
		BalanceAlertRequest result = balanceAlertRequest.cardLast4(cardLast4WithWhitespace);
		// Add a comment to suggest trimming the input in the business logic
		// TODO: Consider trimming the cardLast4 input in the cardLast4 method
		assertEquals(trimmedCardLast4, result.getCardLast4());
		assertSame(balanceAlertRequest, result);
	}

}
