// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_0a33effb52
ROOST_METHOD_SIG_HASH=equals_ded257778a

Here are some JUnit test scenarios for the provided equals method:

Scenario 1: Equality of Two Identical Objects

Details:
  TestName: equalityOfIdenticalObjects
  Description: This test checks if the equals method returns true when comparing an object to itself.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the equals method, passing the same instance as the argument.
  Assert: Use assertEquals to verify that the method returns true.
Validation:
  The assertion verifies that an object is considered equal to itself.
  This test ensures the reflexive property of equality.

Scenario 2: Equality of Two Objects with Same Field Values

Details:
  TestName: equalityOfObjectsWithSameFieldValues
  Description: This test checks if the equals method returns true when comparing two objects with the same values for nonPaymentStatus, legalStatus, and cardLast4 fields.
Execution:
  Arrange: Create two instances of the LegalActionInitiationRequest class with identical field values.
  Act: Invoke the equals method on one instance, passing the other instance as the argument.
  Assert: Use assertEquals to verify that the method returns true.
Validation:
  The assertion verifies that two objects with the same field values are considered equal.
  This test ensures the consistency of equality based on the relevant fields.

Scenario 3: Inequality of Objects with Different Field Values

Details:
  TestName: inequalityOfObjectsWithDifferentFieldValues
  Description: This test checks if the equals method returns false when comparing two objects with different values for nonPaymentStatus, legalStatus, or cardLast4 fields.
Execution:
  Arrange: Create two instances of the LegalActionInitiationRequest class with different field values.
  Act: Invoke the equals method on one instance, passing the other instance as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that two objects with different field values are not considered equal.
  This test ensures the distinction between objects based on their field values.

Scenario 4: Inequality with Null Object

Details:
  TestName: inequalityWithNullObject
  Description: This test checks if the equals method returns false when comparing an object to null.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the equals method, passing null as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that an object is not considered equal to null.
  This test ensures the proper handling of null comparisons.

Scenario 5: Inequality with Object of Different Class

Details:
  TestName: inequalityWithDifferentClass
  Description: This test checks if the equals method returns false when comparing an object to an instance of a different class.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class and an instance of a different class (e.g., String).
  Act: Invoke the equals method on the LegalActionInitiationRequest instance, passing the instance of the different class as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that objects of different classes are not considered equal.
  This test ensures the proper handling of comparisons with objects of incompatible types.

These test scenarios cover various aspects of the equals method, including equality of identical objects, equality based on field values, inequality with different field values, handling null comparisons, and comparisons with objects of different classes. They aim to ensure the correctness and robustness of the equals implementation.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestEqualsTest {

	@Test
	void equalityOfIdenticalObjects() {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest("status1", "legal1", "1234");
		assertTrue(request.equals(request));
	}

	@Test
	void equalityOfObjectsWithSameFieldValues() {
		LegalActionInitiationRequest request1 = new LegalActionInitiationRequest("status1", "legal1", "1234");
		LegalActionInitiationRequest request2 = new LegalActionInitiationRequest("status1", "legal1", "1234");
		assertTrue(request1.equals(request2));
	}

	@Test
	void inequalityOfObjectsWithDifferentNonPaymentStatus() {
		LegalActionInitiationRequest request1 = new LegalActionInitiationRequest("status1", "legal1", "1234");
		LegalActionInitiationRequest request2 = new LegalActionInitiationRequest("status2", "legal1", "1234");
		assertFalse(request1.equals(request2));
	}

	@Test
	void inequalityOfObjectsWithDifferentLegalStatus() {
		LegalActionInitiationRequest request1 = new LegalActionInitiationRequest("status1", "legal1", "1234");
		LegalActionInitiationRequest request2 = new LegalActionInitiationRequest("status1", "legal2", "1234");
		assertFalse(request1.equals(request2));
	}

	@Test
	void inequalityOfObjectsWithDifferentCardLast4() {
		LegalActionInitiationRequest request1 = new LegalActionInitiationRequest("status1", "legal1", "1234");
		LegalActionInitiationRequest request2 = new LegalActionInitiationRequest("status1", "legal1", "5678");
		assertFalse(request1.equals(request2));
	}

	@Test
	void inequalityWithNullObject() {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest("status1", "legal1", "1234");
		assertFalse(request.equals(null));
	}

	@Test
	void inequalityWithDifferentClass() {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest("status1", "legal1", "1234");
		String otherObject = "test";
		assertFalse(request.equals(otherObject));
	}

	@Test
	void equalityWithNullFieldValues() {
		LegalActionInitiationRequest request1 = new LegalActionInitiationRequest(null, null, null);
		LegalActionInitiationRequest request2 = new LegalActionInitiationRequest(null, null, null);
		assertTrue(request1.equals(request2));
	}

	@Test
	void inequalityWithOneNullFieldValue() {
		LegalActionInitiationRequest request1 = new LegalActionInitiationRequest(null, "legal1", "1234");
		LegalActionInitiationRequest request2 = new LegalActionInitiationRequest("status1", "legal1", "1234");
		assertFalse(request1.equals(request2));
	}

}