// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_8c099943f0
ROOST_METHOD_SIG_HASH=equals_f2d574000d

Here are the JUnit test scenarios for the provided equals method:

Scenario 1: Test equality of two identical LegalActionInitiationRequest objects

Details:
  TestName: equalsSameObject
  Description: This test checks if the equals method returns true when comparing an object to itself.
Execution:
  Arrange: Create a LegalActionInitiationRequest object with sample data.
  Act: Invoke the equals method, passing the same object as the argument.
  Assert: Use assertTrue to verify that the method returns true.
Validation:
  The assertion verifies that the equals method correctly identifies an object as equal to itself.
  This test ensures the reflexive property of equality.

Scenario 2: Test equality of two different LegalActionInitiationRequest objects with the same data

Details:
  TestName: equalsDifferentObjectsSameData
  Description: This test checks if the equals method returns true when comparing two different LegalActionInitiationRequest objects with the same data.
Execution:
  Arrange: Create two LegalActionInitiationRequest objects with the same sample data.
  Act: Invoke the equals method on one object, passing the other object as the argument.
  Assert: Use assertTrue to verify that the method returns true.
Validation:
  The assertion verifies that the equals method correctly identifies two objects as equal when they have the same data.
  This test ensures the symmetric property of equality.

Scenario 3: Test inequality of two LegalActionInitiationRequest objects with different data

Details:
  TestName: equalsObjectsDifferentData
  Description: This test checks if the equals method returns false when comparing two LegalActionInitiationRequest objects with different data.
Execution:
  Arrange: Create two LegalActionInitiationRequest objects with different sample data.
  Act: Invoke the equals method on one object, passing the other object as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies two objects as unequal when they have different data.
  This test ensures that objects with different data are not considered equal.

Scenario 4: Test inequality when comparing a LegalActionInitiationRequest object to null

Details:
  TestName: equalsNull
  Description: This test checks if the equals method returns false when comparing a LegalActionInitiationRequest object to null.
Execution:
  Arrange: Create a LegalActionInitiationRequest object with sample data.
  Act: Invoke the equals method on the object, passing null as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method correctly handles the case when the argument is null.
  This test ensures that the equals method does not throw a NullPointerException and returns false when compared to null.

Scenario 5: Test inequality when comparing a LegalActionInitiationRequest object to an object of a different class

Details:
  TestName: equalsObjectDifferentClass
  Description: This test checks if the equals method returns false when comparing a LegalActionInitiationRequest object to an object of a different class.
Execution:
  Arrange: Create a LegalActionInitiationRequest object with sample data and an object of a different class (e.g., String).
  Act: Invoke the equals method on the LegalActionInitiationRequest object, passing the object of a different class as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies objects of different classes as unequal.
  This test ensures that the equals method does not consider objects of different classes as equal.

These test scenarios cover various cases, including equality of identical objects, equality of objects with the same data, inequality of objects with different data, comparison with null, and comparison with objects of different classes. They help ensure the correctness and robustness of the equals method implementation.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestEqualsTest {
    @Test
    @DisplayName("Test equality of two identical LegalActionInitiationRequest objects")
    void equalsSameObject() {
        LegalActionInitiationRequest request = new LegalActionInitiationRequest()
                .nonPaymentStatus("PENDING")
                .legalStatus("INITIATED")
                .cardLast4("1234");
        assertTrue(request.equals(request));
    }
    @Test
    @DisplayName("Test equality of two different LegalActionInitiationRequest objects with the same data")
    void equalsDifferentObjectsSameData() {
        LegalActionInitiationRequest request1 = new LegalActionInitiationRequest()
                .nonPaymentStatus("PENDING")
                .legalStatus("INITIATED")
                .cardLast4("1234");
        LegalActionInitiationRequest request2 = new LegalActionInitiationRequest()
                .nonPaymentStatus("PENDING")
                .legalStatus("INITIATED")
                .cardLast4("1234");
        assertTrue(request1.equals(request2));
        assertTrue(request2.equals(request1));
    }
    @Test
    @DisplayName("Test inequality of two LegalActionInitiationRequest objects with different data")
    void equalsObjectsDifferentData() {
        LegalActionInitiationRequest request1 = new LegalActionInitiationRequest()
                .nonPaymentStatus("PENDING")
                .legalStatus("INITIATED")
                .cardLast4("1234");
        LegalActionInitiationRequest request2 = new LegalActionInitiationRequest()
                .nonPaymentStatus("RESOLVED")
                .legalStatus("CLOSED")
                .cardLast4("5678");
        assertFalse(request1.equals(request2));
        assertFalse(request2.equals(request1));
    }
    @Test
    @DisplayName("Test inequality when comparing a LegalActionInitiationRequest object to null")
    void equalsNull() {
        LegalActionInitiationRequest request = new LegalActionInitiationRequest()
                .nonPaymentStatus("PENDING")
                .legalStatus("INITIATED")
                .cardLast4("1234");
        assertFalse(request.equals(null));
    }
    @Test
    @DisplayName("Test inequality when comparing a LegalActionInitiationRequest object to an object of a different class")
    void equalsObjectDifferentClass() {
        LegalActionInitiationRequest request = new LegalActionInitiationRequest()
                .nonPaymentStatus("PENDING")
                .legalStatus("INITIATED")
                .cardLast4("1234");
        String otherObject = "Not a LegalActionInitiationRequest";
        assertFalse(request.equals(otherObject));
    }
}