// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_0a33effb52
ROOST_METHOD_SIG_HASH=equals_ded257778a

Here are some possible JUnit test scenarios for the provided equals method:

Scenario 1: Equality of Same Object Instance

Details:
  TestName: equalsSameInstance()
  Description: This test checks if the equals method returns true when comparing an object to itself.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the equals method, passing the same instance as the argument.
  Assert: Assert that the method returns true using assertEquals(true, result).
Validation:
  The assertion verifies that the equals method correctly identifies equality when an object is compared to itself.
  This test ensures that the reflexive property of equality is satisfied.

Scenario 2: Equality of Two Equal Objects

Details:
  TestName: equalsTwoEqualObjects()
  Description: This test checks if the equals method returns true when comparing two objects with the same values for nonPaymentStatus, legalStatus, and cardLast4.
Execution:
  Arrange: Create two instances of the LegalActionInitiationRequest class with identical values for nonPaymentStatus, legalStatus, and cardLast4.
  Act: Invoke the equals method on one instance, passing the other instance as the argument.
  Assert: Assert that the method returns true using assertEquals(true, result).
Validation:
  The assertion verifies that the equals method correctly identifies equality when two objects have the same values for the compared fields.
  This test ensures that the equals method works as expected for objects with equal values.

Scenario 3: Inequality of Two Objects with Different Values

Details:
  TestName: inequalityDifferentValues()
  Description: This test checks if the equals method returns false when comparing two objects with different values for nonPaymentStatus, legalStatus, or cardLast4.
Execution:
  Arrange: Create two instances of the LegalActionInitiationRequest class with different values for at least one of the compared fields.
  Act: Invoke the equals method on one instance, passing the other instance as the argument.
  Assert: Assert that the method returns false using assertEquals(false, result).
Validation:
  The assertion verifies that the equals method correctly identifies inequality when two objects have different values for the compared fields.
  This test ensures that the equals method distinguishes objects with different values.

Scenario 4: Inequality with Null Object

Details:
  TestName: inequalityWithNull()
  Description: This test checks if the equals method returns false when comparing an object to null.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the equals method on the instance, passing null as the argument.
  Assert: Assert that the method returns false using assertEquals(false, result).
Validation:
  The assertion verifies that the equals method correctly handles the case when the compared object is null.
  This test ensures that the equals method does not throw a NullPointerException and returns false for null comparisons.

Scenario 5: Inequality with Different Class Object

Details:
  TestName: inequalityDifferentClass()
  Description: This test checks if the equals method returns false when comparing an object to an instance of a different class.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class and an instance of a different class (e.g., String).
  Act: Invoke the equals method on the LegalActionInitiationRequest instance, passing the different class instance as the argument.
  Assert: Assert that the method returns false using assertEquals(false, result).
Validation:
  The assertion verifies that the equals method correctly identifies inequality when comparing objects of different classes.
  This test ensures that the equals method does not consider objects of different classes as equal.

These test scenarios cover various aspects of the equals method, including equality of the same instance, equality of two equal objects, inequality with different values, inequality with null, and inequality with a different class object. They aim to validate the correctness of the equals method implementation and ensure that it behaves as expected in different scenarios.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestEqualsTest {

	@Test
	void equalsSameInstance() {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest("status1", "legal1", "1234");
		assertTrue(request.equals(request));
	}

	@Test
	void equalsTwoEqualObjects() {
		LegalActionInitiationRequest request1 = new LegalActionInitiationRequest("status1", "legal1", "1234");
		LegalActionInitiationRequest request2 = new LegalActionInitiationRequest("status1", "legal1", "1234");
		assertTrue(request1.equals(request2));
	}

	@Test
	void inequalityDifferentNonPaymentStatus() {
		LegalActionInitiationRequest request1 = new LegalActionInitiationRequest("status1", "legal1", "1234");
		LegalActionInitiationRequest request2 = new LegalActionInitiationRequest("status2", "legal1", "1234");
		assertFalse(request1.equals(request2));
	}

	@Test
	void inequalityDifferentLegalStatus() {
		LegalActionInitiationRequest request1 = new LegalActionInitiationRequest("status1", "legal1", "1234");
		LegalActionInitiationRequest request2 = new LegalActionInitiationRequest("status1", "legal2", "1234");
		assertFalse(request1.equals(request2));
	}

	@Test
	void inequalityDifferentCardLast4() {
		LegalActionInitiationRequest request1 = new LegalActionInitiationRequest("status1", "legal1", "1234");
		LegalActionInitiationRequest request2 = new LegalActionInitiationRequest("status1", "legal1", "5678");
		assertFalse(request1.equals(request2));
	}

	@Test
	void inequalityWithNull() {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest("status1", "legal1", "1234");
		assertFalse(request.equals(null));
	}

	@Test
	void inequalityDifferentClass() {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest("status1", "legal1", "1234");
		String otherObject = "not a LegalActionInitiationRequest";
		assertFalse(request.equals(otherObject));
	}

	// Additional test case to cover all fields being null
	@Test
	void equalityAllFieldsNull() {
		LegalActionInitiationRequest request1 = new LegalActionInitiationRequest(null, null, null);
		LegalActionInitiationRequest request2 = new LegalActionInitiationRequest(null, null, null);
		assertTrue(request1.equals(request2));
	}

}
