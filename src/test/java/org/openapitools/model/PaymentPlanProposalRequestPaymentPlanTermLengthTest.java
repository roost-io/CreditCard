// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=termLength_56fef03824
ROOST_METHOD_SIG_HASH=termLength_77e99b3589

Here are the JUnit test scenarios for the provided `termLength` method:

Scenario 1: Set Term Length to a Valid Value

Details:
  TestName: termLengthSetToValidValue()
  Description: This test checks if the `termLength` method correctly sets the `termLength` field when provided with a valid string value and returns the current instance of `PaymentPlanProposalRequestPaymentPlan`.
Execution:
  Arrange: Create an instance of `PaymentPlanProposalRequestPaymentPlan`.
  Act: Call the `termLength` method with a valid string value, such as "12 months".
  Assert: Use `assertEquals` to verify that the `termLength` field of the instance is set to the provided value and the method returns the same instance.
Validation:
  The assertion verifies that the `termLength` method correctly sets the `termLength` field and follows the fluent interface pattern by returning the current instance. This test ensures that the method behaves as expected when provided with valid input.

Scenario 2: Set Term Length to null

Details:
  TestName: termLengthSetToNull()
  Description: This test checks if the `termLength` method correctly handles setting the `termLength` field to `null` and returns the current instance of `PaymentPlanProposalRequestPaymentPlan`.
Execution:
  Arrange: Create an instance of `PaymentPlanProposalRequestPaymentPlan`.
  Act: Call the `termLength` method with a `null` value.
  Assert: Use `assertNull` to verify that the `termLength` field of the instance is set to `null` and the method returns the same instance.
Validation:
  The assertion verifies that the `termLength` method correctly sets the `termLength` field to `null` when provided with a `null` value and follows the fluent interface pattern by returning the current instance. This test ensures that the method handles `null` input gracefully.

Scenario 3: Set Term Length to an Empty String

Details:
  TestName: termLengthSetToEmptyString()
  Description: This test checks if the `termLength` method correctly handles setting the `termLength` field to an empty string and returns the current instance of `PaymentPlanProposalRequestPaymentPlan`.
Execution:
  Arrange: Create an instance of `PaymentPlanProposalRequestPaymentPlan`.
  Act: Call the `termLength` method with an empty string value.
  Assert: Use `assertEquals` to verify that the `termLength` field of the instance is set to an empty string and the method returns the same instance.
Validation:
  The assertion verifies that the `termLength` method correctly sets the `termLength` field to an empty string when provided with an empty string value and follows the fluent interface pattern by returning the current instance. This test ensures that the method handles empty string input as expected.

Scenario 4: Set Term Length Multiple Times

Details:
  TestName: termLengthSetMultipleTimes()
  Description: This test checks if the `termLength` method correctly updates the `termLength` field when called multiple times with different values and returns the current instance of `PaymentPlanProposalRequestPaymentPlan`.
Execution:
  Arrange: Create an instance of `PaymentPlanProposalRequestPaymentPlan`.
  Act: Call the `termLength` method multiple times with different valid string values.
  Assert: Use `assertEquals` to verify that the `termLength` field of the instance is set to the last provided value and the method returns the same instance.
Validation:
  The assertion verifies that the `termLength` method correctly updates the `termLength` field when called multiple times and follows the fluent interface pattern by returning the current instance. This test ensures that the method behaves consistently when called multiple times.

These test scenarios cover various cases, including setting a valid value, handling null input, handling empty string input, and setting the term length multiple times. They ensure that the `termLength` method behaves as expected in different scenarios and follows the fluent interface pattern by returning the current instance of `PaymentPlanProposalRequestPaymentPlan`.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class PaymentPlanProposalRequestPaymentPlanTermLengthTest {

	@ParameterizedTest
	@MethodSource("validTermLengthProvider")
	void termLengthSetToValidValue(String termLength) {
		PaymentPlanProposalRequestPaymentPlan paymentPlan = new PaymentPlanProposalRequestPaymentPlan();
		PaymentPlanProposalRequestPaymentPlan result = paymentPlan.termLength(termLength);
		assertEquals(termLength, paymentPlan.getTermLength());
		assertSame(paymentPlan, result);
	}

	@Test
	void termLengthSetToNull() {
		PaymentPlanProposalRequestPaymentPlan paymentPlan = new PaymentPlanProposalRequestPaymentPlan();
		PaymentPlanProposalRequestPaymentPlan result = paymentPlan.termLength(null);
		assertNull(paymentPlan.getTermLength());
		assertSame(paymentPlan, result);
	}

	@Test
	void termLengthSetToEmptyString() {
		PaymentPlanProposalRequestPaymentPlan paymentPlan = new PaymentPlanProposalRequestPaymentPlan();
		PaymentPlanProposalRequestPaymentPlan result = paymentPlan.termLength("");
		assertEquals("", paymentPlan.getTermLength());
		assertSame(paymentPlan, result);
	}

	@Test
	void termLengthSetMultipleTimes() {
		PaymentPlanProposalRequestPaymentPlan paymentPlan = new PaymentPlanProposalRequestPaymentPlan();
		paymentPlan.termLength("12 months").termLength("24 months").termLength("36 months");
		assertEquals("36 months", paymentPlan.getTermLength());
	}

	private static Stream<Arguments> validTermLengthProvider() {
		return Stream.of(Arguments.of("12 months"), Arguments.of("24 months"), Arguments.of("36 months"));
	}

}