// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_f665507c71
ROOST_METHOD_SIG_HASH=equals_ded257778a

Here are some JUnit test scenarios for the provided equals method:

Scenario 1: Comparing object with itself

Details:
  TestName: equalsReturnsTrueForSameObject
  Description: This test verifies that the equals method returns true when comparing an object with itself.
Execution:
  Arrange: Create an instance of PaymentPlanProposalRequestPaymentPlan.
  Act: Invoke the equals method, passing the same instance as the argument.
  Assert: Use assertEquals to verify that the method returns true.
Validation:
  The assertion checks that the equals method correctly identifies an object as equal to itself.
  This test ensures the reflexive property of equality, which is a fundamental requirement for the equals method.

Scenario 2: Comparing object with null

Details:
  TestName: equalsReturnsFalseForNull
  Description: This test verifies that the equals method returns false when comparing an object with null.
Execution:
  Arrange: Create an instance of PaymentPlanProposalRequestPaymentPlan.
  Act: Invoke the equals method, passing null as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion checks that the equals method correctly handles null comparisons.
  This test ensures that the equals method does not throw a NullPointerException and returns false when compared with null.

Scenario 3: Comparing object with different class

Details:
  TestName: equalsReturnsFalseForDifferentClass
  Description: This test verifies that the equals method returns false when comparing an object with an instance of a different class.
Execution:
  Arrange: Create an instance of PaymentPlanProposalRequestPaymentPlan and an instance of a different class (e.g., String).
  Act: Invoke the equals method, passing the instance of the different class as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion checks that the equals method correctly identifies objects of different classes as not equal.
  This test ensures that the equals method adheres to the contract of comparing objects based on their class type.

Scenario 4: Comparing objects with equal field values

Details:
  TestName: equalsReturnsTrueForEqualFieldValues
  Description: This test verifies that the equals method returns true when comparing two objects with equal values for all fields.
Execution:
  Arrange: Create two instances of PaymentPlanProposalRequestPaymentPlan with the same values for installmentAmount, interestRate, and termLength.
  Act: Invoke the equals method, passing one instance as the argument to compare with the other instance.
  Assert: Use assertTrue to verify that the method returns true.
Validation:
  The assertion checks that the equals method correctly identifies objects as equal when all their fields have the same values.
  This test ensures that the equals method compares the relevant fields of the objects to determine equality.

Scenario 5: Comparing objects with different field values

Details:
  TestName: equalsReturnsFalseForDifferentFieldValues
  Description: This test verifies that the equals method returns false when comparing two objects with different values for any of the fields.
Execution:
  Arrange: Create two instances of PaymentPlanProposalRequestPaymentPlan with different values for at least one field (e.g., installmentAmount).
  Act: Invoke the equals method, passing one instance as the argument to compare with the other instance.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion checks that the equals method correctly identifies objects as not equal when any of their fields have different values.
  This test ensures that the equals method considers all relevant fields when comparing objects for equality.

These test scenarios cover various aspects of the equals method, including comparing an object with itself, null, instances of different classes, and objects with equal and different field values. They help ensure the correctness and robustness of the equals implementation.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class PaymentPlanProposalRequestPaymentPlanEqualsTest {

	@Test
	void equalsReturnsTrueForSameObject() {
		PaymentPlanProposalRequestPaymentPlan paymentPlan = new PaymentPlanProposalRequestPaymentPlan();
		assertTrue(paymentPlan.equals(paymentPlan));
	}

	@Test
	void equalsReturnsFalseForNull() {
		PaymentPlanProposalRequestPaymentPlan paymentPlan = new PaymentPlanProposalRequestPaymentPlan();
		assertFalse(paymentPlan.equals(null));
	}

	@Test
	void equalsReturnsFalseForDifferentClass() {
		PaymentPlanProposalRequestPaymentPlan paymentPlan = new PaymentPlanProposalRequestPaymentPlan();
		String otherObject = "test";
		assertFalse(paymentPlan.equals(otherObject));
	}

	@ParameterizedTest
	@MethodSource("provideEqualPaymentPlans")
	void equalsReturnsTrueForEqualFieldValues(PaymentPlanProposalRequestPaymentPlan paymentPlan1,
			PaymentPlanProposalRequestPaymentPlan paymentPlan2) {
		assertTrue(paymentPlan1.equals(paymentPlan2));
	}

	private static Stream<Arguments> provideEqualPaymentPlans() {
		return Stream.of(Arguments.of(createPaymentPlan("100", "5", "12"), createPaymentPlan("100", "5", "12")),
				Arguments.of(createPaymentPlan(null, "5", "12"), createPaymentPlan(null, "5", "12")),
				Arguments.of(createPaymentPlan("100", null, "12"), createPaymentPlan("100", null, "12")),
				Arguments.of(createPaymentPlan("100", "5", null), createPaymentPlan("100", "5", null)));
	}

	@ParameterizedTest
	@MethodSource("provideUnequalPaymentPlans")
	void equalsReturnsFalseForDifferentFieldValues(PaymentPlanProposalRequestPaymentPlan paymentPlan1,
			PaymentPlanProposalRequestPaymentPlan paymentPlan2) {
		assertFalse(paymentPlan1.equals(paymentPlan2));
	}

	private static Stream<Arguments> provideUnequalPaymentPlans() {
		return Stream.of(Arguments.of(createPaymentPlan("100", "5", "12"), createPaymentPlan("200", "5", "12")),
				Arguments.of(createPaymentPlan("100", "5", "12"), createPaymentPlan("100", "6", "12")),
				Arguments.of(createPaymentPlan("100", "5", "12"), createPaymentPlan("100", "5", "24")),
				Arguments.of(createPaymentPlan(null, "5", "12"), createPaymentPlan("100", "5", "12")),
				Arguments.of(createPaymentPlan("100", null, "12"), createPaymentPlan("100", "5", "12")),
				Arguments.of(createPaymentPlan("100", "5", null), createPaymentPlan("100", "5", "12")));
	}

	private static PaymentPlanProposalRequestPaymentPlan createPaymentPlan(String installmentAmount,
			String interestRate, String termLength) {
		PaymentPlanProposalRequestPaymentPlan paymentPlan = new PaymentPlanProposalRequestPaymentPlan();
		paymentPlan.setInstallmentAmount(installmentAmount);
		paymentPlan.setInterestRate(interestRate);
		paymentPlan.setTermLength(termLength);
		return paymentPlan;
	}

}