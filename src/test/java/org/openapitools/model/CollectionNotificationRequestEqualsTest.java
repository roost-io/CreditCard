// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_472577579e
ROOST_METHOD_SIG_HASH=equals_ded257778a

Here are some JUnit test scenarios for the provided equals method:

Scenario 1: Equality of Two Identical Objects

Details:
  TestName: equalsIdenticalObjects()
  Description: This test checks if the equals method returns true when comparing an object to itself.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest with sample data.
  Act: Invoke the equals method, passing the same object as the argument.
  Assert: Use assertEquals to verify that the method returns true.
Validation:
  The assertion verifies that an object is equal to itself according to the equals method implementation.
  This test ensures the reflexive property of equality is satisfied.

Scenario 2: Equality of Two Objects with Same Data

Details:
  TestName: equalsTwoObjectsWithSameData()
  Description: This test checks if the equals method returns true when comparing two objects with identical data.
Execution:
  Arrange: Create two instances of CollectionNotificationRequest with the same sample data.
  Act: Invoke the equals method on one object, passing the other object as the argument.
  Assert: Use assertEquals to verify that the method returns true.
Validation:
  The assertion verifies that two objects with the same data are considered equal by the equals method.
  This test ensures the symmetric property of equality is satisfied.

Scenario 3: Inequality of Two Objects with Different Data

Details:
  TestName: equalsTwoObjectsWithDifferentData()
  Description: This test checks if the equals method returns false when comparing two objects with different data.
Execution:
  Arrange: Create two instances of CollectionNotificationRequest with different sample data.
  Act: Invoke the equals method on one object, passing the other object as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that two objects with different data are not considered equal by the equals method.
  This test ensures the equals method correctly identifies objects with different data as unequal.

Scenario 4: Inequality with Null Object

Details:
  TestName: equalsWithNullObject()
  Description: This test checks if the equals method returns false when comparing an object to null.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest with sample data.
  Act: Invoke the equals method, passing null as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method returns false when comparing an object to null.
  This test ensures the equals method handles null objects correctly and avoids null pointer exceptions.

Scenario 5: Inequality with Object of Different Class

Details:
  TestName: equalsWithDifferentClass()
  Description: This test checks if the equals method returns false when comparing an object to an object of a different class.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest with sample data and an object of a different class.
  Act: Invoke the equals method on the CollectionNotificationRequest object, passing the object of a different class as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method returns false when comparing objects of different classes.
  This test ensures the equals method correctly identifies objects of different classes as unequal.

These test scenarios cover various aspects of the equals method, including comparing identical objects, objects with the same data, objects with different data, null objects, and objects of different classes. They help ensure the correctness and robustness of the equals implementation.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestEqualsTest {

	@Test
	void equalsIdenticalObjects() {
		CollectionNotificationRequest request = new CollectionNotificationRequest("DELINQUENT", "100.00", "10.00",
				"1234");
		assertTrue(request.equals(request));
	}

	@Test
	void equalsTwoObjectsWithSameData() {
		CollectionNotificationRequest request1 = new CollectionNotificationRequest("DELINQUENT", "100.00", "10.00",
				"1234");
		CollectionNotificationRequest request2 = new CollectionNotificationRequest("DELINQUENT", "100.00", "10.00",
				"1234");
		assertTrue(request1.equals(request2));
		assertTrue(request2.equals(request1));
	}

	@Test
	void equalsTwoObjectsWithDifferentData() {
		CollectionNotificationRequest request1 = new CollectionNotificationRequest("DELINQUENT", "100.00", "10.00",
				"1234");
		CollectionNotificationRequest request2 = new CollectionNotificationRequest("CURRENT", "200.00", "20.00",
				"5678");
		assertFalse(request1.equals(request2));
		assertFalse(request2.equals(request1));
	}

	@Test
	void equalsWithNullObject() {
		CollectionNotificationRequest request = new CollectionNotificationRequest("DELINQUENT", "100.00", "10.00",
				"1234");
		assertFalse(request.equals(null));
	}

	@Test
	void equalsWithDifferentClass() {
		CollectionNotificationRequest request = new CollectionNotificationRequest("DELINQUENT", "100.00", "10.00",
				"1234");
		String otherObject = "Not a CollectionNotificationRequest";
		assertFalse(request.equals(otherObject));
	}

}