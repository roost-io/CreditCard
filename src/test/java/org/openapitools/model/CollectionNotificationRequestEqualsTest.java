// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_338ad72731
ROOST_METHOD_SIG_HASH=equals_f2d574000d

Here are the JUnit test scenarios for the provided `equals` method:

Scenario 1: Reflexive Equality

Details:
  TestName: reflexiveEquality()
  Description: This test verifies that an object is equal to itself, ensuring the reflexive property of equality.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest with sample data.
  Act: Compare the object with itself using the equals method.
  Assert: Assert that the result is true using assertTrue.
Validation:
  The assertion verifies that an object is always equal to itself, which is a fundamental property of equality.
  This test ensures that the equals method correctly handles self-comparison and returns true.

Scenario 2: Symmetric Equality

Details:
  TestName: symmetricEquality()
  Description: This test verifies that if object A is equal to object B, then object B is also equal to object A, ensuring the symmetric property of equality.
Execution:
  Arrange: Create two instances of CollectionNotificationRequest with identical data.
  Act: Compare the objects using the equals method in both directions (A.equals(B) and B.equals(A)).
  Assert: Assert that both comparisons return true using assertTrue.
Validation:
  The assertion verifies that equality is symmetric, meaning that if A is equal to B, then B must also be equal to A.
  This test ensures that the equals method correctly implements the symmetric property of equality.

Scenario 3: Transitive Equality

Details:
  TestName: transitiveEquality()
  Description: This test verifies that if object A is equal to object B, and object B is equal to object C, then object A is also equal to object C, ensuring the transitive property of equality.
Execution:
  Arrange: Create three instances of CollectionNotificationRequest with identical data.
  Act: Compare the objects using the equals method (A.equals(B), B.equals(C), and A.equals(C)).
  Assert: Assert that all comparisons return true using assertTrue.
Validation:
  The assertion verifies that equality is transitive, meaning that if A is equal to B, and B is equal to C, then A must also be equal to C.
  This test ensures that the equals method correctly implements the transitive property of equality.

Scenario 4: Inequality with Null

Details:
  TestName: inequalityWithNull()
  Description: This test verifies that the equals method returns false when comparing an object with null.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest with sample data.
  Act: Compare the object with null using the equals method.
  Assert: Assert that the result is false using assertFalse.
Validation:
  The assertion verifies that comparing an object with null using the equals method should always return false.
  This test ensures that the equals method correctly handles comparison with null and returns false.

Scenario 5: Inequality with Different Class

Details:
  TestName: inequalityWithDifferentClass()
  Description: This test verifies that the equals method returns false when comparing objects of different classes.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest and an instance of a different class (e.g., String).
  Act: Compare the CollectionNotificationRequest object with the object of a different class using the equals method.
  Assert: Assert that the result is false using assertFalse.
Validation:
  The assertion verifies that objects of different classes are not considered equal.
  This test ensures that the equals method correctly handles comparison with objects of different classes and returns false.

Scenario 6: Equality with Identical Properties

Details:
  TestName: equalityWithIdenticalProperties()
  Description: This test verifies that two objects with identical property values are considered equal.
Execution:
  Arrange: Create two instances of CollectionNotificationRequest with identical property values.
  Act: Compare the objects using the equals method.
  Assert: Assert that the result is true using assertTrue.
Validation:
  The assertion verifies that when all the relevant properties of two CollectionNotificationRequest objects are identical, the equals method should return true.
  This test ensures that the equals method correctly compares the relevant properties and returns true when they are equal.

Scenario 7: Inequality with Different Property Values

Details:
  TestName: inequalityWithDifferentPropertyValues()
  Description: This test verifies that two objects with different property values are not considered equal.
Execution:
  Arrange: Create two instances of CollectionNotificationRequest with different property values.
  Act: Compare the objects using the equals method.
  Assert: Assert that the result is false using assertFalse.
Validation:
  The assertion verifies that when any of the relevant properties of two CollectionNotificationRequest objects are different, the equals method should return false.
  This test ensures that the equals method correctly compares the relevant properties and returns false when they are not equal.

These test scenarios cover various aspects of equality, including reflexive, symmetric, and transitive properties, as well as handling null, objects of different classes, and comparing property values. They aim to ensure that the `equals` method is implemented correctly and behaves as expected in different scenarios.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestEqualsTest {
    @Test
    void reflexiveEquality() {
        CollectionNotificationRequest request = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        Assertions.assertTrue(request.equals(request));
    }
    @Test
    void symmetricEquality() {
        CollectionNotificationRequest request1 = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        CollectionNotificationRequest request2 = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        Assertions.assertTrue(request1.equals(request2));
        Assertions.assertTrue(request2.equals(request1));
    }
    @Test
    void transitiveEquality() {
        CollectionNotificationRequest request1 = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        CollectionNotificationRequest request2 = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        CollectionNotificationRequest request3 = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        Assertions.assertTrue(request1.equals(request2));
        Assertions.assertTrue(request2.equals(request3));
        Assertions.assertTrue(request1.equals(request3));
    }
    @Test
    void inequalityWithNull() {
        CollectionNotificationRequest request = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        Assertions.assertFalse(request.equals(null));
    }
    @Test
    void inequalityWithDifferentClass() {
        CollectionNotificationRequest request = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        String otherObject = "Not a CollectionNotificationRequest";
        Assertions.assertFalse(request.equals(otherObject));
    }
    @Test
    void equalityWithIdenticalProperties() {
        CollectionNotificationRequest request1 = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        CollectionNotificationRequest request2 = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        Assertions.assertTrue(request1.equals(request2));
    }
    @Test
    void inequalityWithDifferentPropertyValues() {
        CollectionNotificationRequest request1 = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        CollectionNotificationRequest request2 = new CollectionNotificationRequest()
                .delinquencyStatus("NON_DELINQUENT")
                .outstandingBalance("200.00")
                .additionalCharges("20.00")
                .cardLast4("5678");
        Assertions.assertFalse(request1.equals(request2));
    }
}