// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=legalStatus_637adf71f5
ROOST_METHOD_SIG_HASH=legalStatus_22ed04371c

Based on the provided method and imports, here are the test scenarios for the legalStatus method:

Scenario 1: Valid Legal Status

Details:
  TestName: validLegalStatus
  Description: This test verifies that the legalStatus method correctly sets the legal status when a valid value is provided.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the legalStatus method with a valid legal status string.
  Assert: Use assertEquals to verify that the returned LegalActionInitiationRequest object has the same legal status as the one provided.
Validation:
  The assertion ensures that the legalStatus method correctly sets the legal status property of the LegalActionInitiationRequest object.
  This test is important to validate that the legal status can be properly set and retrieved using the legalStatus method.

Scenario 2: Null Legal Status

Details:
  TestName: nullLegalStatus
  Description: This test checks the behavior of the legalStatus method when a null value is passed as the legal status.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the legalStatus method with a null value.
  Assert: Use assertNull to verify that the legal status property of the LegalActionInitiationRequest object is set to null.
Validation:
  The assertion confirms that the legalStatus method handles null values correctly by setting the legal status property to null.
  This test is crucial to ensure that the method does not throw any exceptions or have unexpected behavior when a null value is provided.

Scenario 3: Empty Legal Status

Details:
  TestName: emptyLegalStatus
  Description: This test verifies the behavior of the legalStatus method when an empty string is passed as the legal status.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the legalStatus method with an empty string.
  Assert: Use assertEquals to verify that the legal status property of the LegalActionInitiationRequest object is set to an empty string.
Validation:
  The assertion ensures that the legalStatus method correctly sets the legal status property to an empty string when an empty string is provided.
  This test is important to validate that the method handles empty strings gracefully and does not throw any exceptions or have unexpected behavior.

Scenario 4: Return Value Check

Details:
  TestName: returnValueCheck
  Description: This test verifies that the legalStatus method returns the same LegalActionInitiationRequest object on which it is invoked.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the legalStatus method with a valid legal status string and store the returned object.
  Assert: Use assertSame to verify that the returned object is the same instance as the original LegalActionInitiationRequest object.
Validation:
  The assertion confirms that the legalStatus method returns the same LegalActionInitiationRequest object, allowing for method chaining.
  This test is crucial to ensure that the method follows the fluent interface pattern and enables method chaining for convenient object configuration.

These test scenarios cover the basic functionality of the legalStatus method, including setting valid and null legal statuses, handling empty strings, and verifying the return value. Additional test scenarios can be added based on specific requirements or edge cases related to the LegalActionInitiationRequest class and its usage in the application.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestLegalStatusTest {
    private LegalActionInitiationRequest request;
    @BeforeEach
    void setUp() {
        request = new LegalActionInitiationRequest();
    }
    @Test
    void validLegalStatus() {
        String legalStatus = "ACTIVE";
        LegalActionInitiationRequest result = request.legalStatus(legalStatus);
        assertEquals(legalStatus, result.getLegalStatus());
    }
    @ParameterizedTest
    @NullSource
    void nullLegalStatus(String legalStatus) {
        LegalActionInitiationRequest result = request.legalStatus(legalStatus);
        assertNull(result.getLegalStatus());
    }
    @ParameterizedTest
    @ValueSource(strings = {"", " "})
    void emptyOrBlankLegalStatus(String legalStatus) {
        LegalActionInitiationRequest result = request.legalStatus(legalStatus);
        assertEquals(legalStatus, result.getLegalStatus());
    }
    @Test
    void returnValueCheck() {
        String legalStatus = "ACTIVE";
        LegalActionInitiationRequest result = request.legalStatus(legalStatus);
        assertSame(request, result);
    }
    @ParameterizedTest
    @CsvSource({
            "ACTIVE, ACTIVE",
            "INACTIVE, INACTIVE",
            "PENDING, PENDING"
    })
    void validLegalStatusScenarios(String input, String expected) {
        LegalActionInitiationRequest result = request.legalStatus(input);
        assertEquals(expected, result.getLegalStatus());
    }
}