// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=toString_3ce34b9889
ROOST_METHOD_SIG_HASH=toString_ceffa8036e

Here are the JUnit test scenarios for the given toString() method:

Scenario 1: Test toString() with all fields populated

Details:
  TestName: toStringWithAllFieldsPopulated()
  Description: This test verifies that the toString() method correctly formats the output string when all fields of the CollectionNotificationRequest object are populated with non-null values.
Execution:
  Arrange: Create a CollectionNotificationRequest object and set all fields (delinquencyStatus, outstandingBalance, additionalCharges, cardLast4) with valid non-null values.
  Act: Invoke the toString() method on the CollectionNotificationRequest object.
  Assert: Assert that the returned string matches the expected format, including indentation and field values.
Validation:
  The assertion verifies that the toString() method properly concatenates and formats the field values into the expected string representation.
  This test ensures that the toString() method provides a readable and informative string representation of the CollectionNotificationRequest object when all fields are populated.

Scenario 2: Test toString() with null fields

Details:
  TestName: toStringWithNullFields()
  Description: This test checks the behavior of the toString() method when some or all fields of the CollectionNotificationRequest object are null.
Execution:
  Arrange: Create a CollectionNotificationRequest object and set some or all fields (delinquencyStatus, outstandingBalance, additionalCharges, cardLast4) to null.
  Act: Invoke the toString() method on the CollectionNotificationRequest object.
  Assert: Assert that the returned string includes "null" for the null fields and maintains the expected format.
Validation:
  The assertion verifies that the toString() method handles null field values gracefully and includes "null" in the output string for those fields.
  This test ensures that the toString() method does not throw any exceptions and provides a consistent string representation even when some or all fields are null.

Scenario 3: Test toString() with empty CollectionNotificationRequest

Details:
  TestName: toStringWithEmptyObject()
  Description: This test verifies the output of the toString() method when called on an empty CollectionNotificationRequest object (i.e., all fields are null).
Execution:
  Arrange: Create an empty CollectionNotificationRequest object with all fields set to null.
  Act: Invoke the toString() method on the empty CollectionNotificationRequest object.
  Assert: Assert that the returned string matches the expected format, with "null" for all fields.
Validation:
  The assertion verifies that the toString() method generates the expected string representation even when the CollectionNotificationRequest object is empty.
  This test ensures that the toString() method handles the case of an empty object correctly and provides a consistent output format.

Scenario 4: Test toString() with special characters in field values

Details:
  TestName: toStringWithSpecialCharacters()
  Description: This test checks the behavior of the toString() method when field values contain special characters, such as newline, tab, or quotes.
Execution:
  Arrange: Create a CollectionNotificationRequest object and set field values with special characters.
  Act: Invoke the toString() method on the CollectionNotificationRequest object.
  Assert: Assert that the returned string properly escapes or handles the special characters and maintains the expected format.
Validation:
  The assertion verifies that the toString() method correctly handles special characters in field values and ensures they are properly escaped or represented in the output string.
  This test ensures that the toString() method produces a valid and readable string representation even when field values contain special characters.

These test scenarios cover different aspects of the toString() method, including handling of populated fields, null fields, empty objects, and special characters in field values. They ensure that the toString() method behaves as expected and provides a consistent and informative string representation of the CollectionNotificationRequest object in various scenarios.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestToStringTest {
    @Test
    void toStringWithAllFieldsPopulated() {
        // Arrange
        CollectionNotificationRequest request = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        // Act
        String result = request.toString();
        // Assert
        String expectedString = "class CollectionNotificationRequest {\n" +
                "    delinquencyStatus: DELINQUENT\n" +
                "    outstandingBalance: 100.00\n" +
                "    additionalCharges: 10.00\n" +
                "    cardLast4: 1234\n" +
                "}";
        assertEquals(expectedString, result);
    }
    @Test
    void toStringWithNullFields() {
        // Arrange
        CollectionNotificationRequest request = new CollectionNotificationRequest()
                .delinquencyStatus(null)
                .outstandingBalance(null)
                .additionalCharges("5.00")
                .cardLast4(null);
        // Act
        String result = request.toString();
        // Assert
        String expectedString = "class CollectionNotificationRequest {\n" +
                "    delinquencyStatus: null\n" +
                "    outstandingBalance: null\n" +
                "    additionalCharges: 5.00\n" +
                "    cardLast4: null\n" +
                "}";
        assertEquals(expectedString, result);
    }
    @Test
    void toStringWithEmptyObject() {
        // Arrange
        CollectionNotificationRequest request = new CollectionNotificationRequest();
        // Act
        String result = request.toString();
        // Assert
        String expectedString = "class CollectionNotificationRequest {\n" +
                "    delinquencyStatus: null\n" +
                "    outstandingBalance: null\n" +
                "    additionalCharges: null\n" +
                "    cardLast4: null\n" +
                "}";
        assertEquals(expectedString, result);
    }
    @Test
    void toStringWithSpecialCharacters() {
        // Arrange
        CollectionNotificationRequest request = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT\n")
                .outstandingBalance("100.00\t")
                .additionalCharges("10.00\"")
                .cardLast4("12\n34");
        // Act
        String result = request.toString();
        // Assert
        String expectedString = "class CollectionNotificationRequest {\n" +
                "    delinquencyStatus: DELINQUENT\n" +
                "    \n" +
                "    outstandingBalance: 100.00\t\n" +
                "    additionalCharges: 10.00\"\n" +
                "    cardLast4: 12\n" +
                "    34\n" +
                "}";
        assertEquals(expectedString, result);
    }
}