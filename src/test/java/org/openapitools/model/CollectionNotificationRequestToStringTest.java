// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=toString_6721993b1c
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

Here are some test scenarios for the given toString() method:

Scenario 1: Test toString() with all fields populated

Details:
  TestName: toStringWithAllFieldsPopulated()
  Description: This test checks if the toString() method correctly includes all field values when they are populated. It verifies that the generated string representation matches the expected format.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest and set values for delinquencyStatus, outstandingBalance, additionalCharges, and cardLast4 fields.
  Act: Invoke the toString() method on the created instance.
  Assert: Use assertEquals to compare the actual string returned by toString() with the expected string that includes all field values.
Validation:
  The assertion verifies that the toString() method properly includes the values of all fields in the generated string representation.
  This test ensures that the toString() method provides a complete and accurate string representation of the object when all fields have values.

Scenario 2: Test toString() with null fields

Details:
  TestName: toStringWithNullFields()
  Description: This test checks if the toString() method handles null field values correctly. It verifies that the generated string representation includes "null" for fields that are not set.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest without setting any field values (leaving them as null).
  Act: Invoke the toString() method on the created instance.
  Assert: Use assertEquals to compare the actual string returned by toString() with the expected string that includes "null" for each field.
Validation:
  The assertion verifies that the toString() method properly handles null field values and includes "null" in the generated string representation.
  This test ensures that the toString() method provides a consistent string representation even when fields are not populated.

Scenario 3: Test toString() with empty strings

Details:
  TestName: toStringWithEmptyStrings()
  Description: This test checks if the toString() method handles empty string field values correctly. It verifies that the generated string representation includes empty strings for fields that are set to empty strings.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest and set values for delinquencyStatus, outstandingBalance, additionalCharges, and cardLast4 fields as empty strings.
  Act: Invoke the toString() method on the created instance.
  Assert: Use assertEquals to compare the actual string returned by toString() with the expected string that includes empty strings for each field.
Validation:
  The assertion verifies that the toString() method properly handles empty string field values and includes them in the generated string representation.
  This test ensures that the toString() method accurately represents fields with empty strings in the string representation.

Scenario 4: Test toString() with special characters

Details:
  TestName: toStringWithSpecialCharacters()
  Description: This test checks if the toString() method handles field values containing special characters correctly. It verifies that the generated string representation includes the special characters as they are.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest and set values for delinquencyStatus, outstandingBalance, additionalCharges, and cardLast4 fields with special characters.
  Act: Invoke the toString() method on the created instance.
  Assert: Use assertEquals to compare the actual string returned by toString() with the expected string that includes the special characters in each field.
Validation:
  The assertion verifies that the toString() method properly handles field values with special characters and includes them in the generated string representation without any escaping or modification.
  This test ensures that the toString() method accurately represents fields containing special characters in the string representation.

These test scenarios cover different aspects of the toString() method, including handling populated fields, null fields, empty strings, and special characters. They ensure that the method generates the expected string representation in each scenario.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestToStringTest {

	@Test
	void toStringWithAllFieldsPopulated() {
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		request.setDelinquencyStatus("DELINQUENT");
		request.setOutstandingBalance("1000.00");
		request.setAdditionalCharges("50.00");
		request.setCardLast4("1234");
		String expectedString = "class CollectionNotificationRequest {\n" + "    delinquencyStatus: DELINQUENT\n"
				+ "    outstandingBalance: 1000.00\n" + "    additionalCharges: 50.00\n" + "    cardLast4: 1234\n"
				+ "}";
		assertEquals(expectedString, request.toString());
	}

	@Test
	void toStringWithNullFields() {
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		String expectedString = "class CollectionNotificationRequest {\n" + "    delinquencyStatus: null\n"
				+ "    outstandingBalance: null\n" + "    additionalCharges: null\n" + "    cardLast4: null\n" + "}";
		assertEquals(expectedString, request.toString());
	}

	@Test
	void toStringWithEmptyStrings() {
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		request.setDelinquencyStatus("");
		request.setOutstandingBalance("");
		request.setAdditionalCharges("");
		request.setCardLast4("");
		String expectedString = "class CollectionNotificationRequest {\n" + "    delinquencyStatus: \n"
				+ "    outstandingBalance: \n" + "    additionalCharges: \n" + "    cardLast4: \n" + "}";
		assertEquals(expectedString, request.toString());
	}

	@Test
	void toStringWithSpecialCharacters() {
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		request.setDelinquencyStatus("DELINQUENT!");
		request.setOutstandingBalance("$1,000.00");
		request.setAdditionalCharges("$50.00 + tax");
		request.setCardLast4("12@4");
		String expectedString = "class CollectionNotificationRequest {\n" + "    delinquencyStatus: DELINQUENT!\n"
				+ "    outstandingBalance: $1,000.00\n" + "    additionalCharges: $50.00 + tax\n"
				+ "    cardLast4: 12@4\n" + "}";
		assertEquals(expectedString, request.toString());
	}

}