// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=getCardLast4_55bc26ac31
ROOST_METHOD_SIG_HASH=getCardLast4_4a5c700ec4

Here are some JUnit test scenarios for the getCardLast4() method:

Scenario 1: Valid Card Last 4 Digits

Details:
  TestName: validCardLast4Digits
  Description: This test verifies that the getCardLast4() method returns the correct last 4 digits of the card number when a valid value is set.
Execution:
  Arrange: Set the cardLast4 field to a valid 4-digit string value.
  Act: Call the getCardLast4() method.
  Assert: Use assertEquals to verify that the returned value matches the expected 4-digit string.
Validation:
  The assertion ensures that the getCardLast4() method correctly retrieves the last 4 digits of the card number.
  This test is important to validate that the method returns the expected value when the cardLast4 field is properly set.

Scenario 2: Null Card Last 4 Digits

Details:
  TestName: nullCardLast4Digits
  Description: This test verifies that the getCardLast4() method throws a NullPointerException when the cardLast4 field is null.
Execution:
  Arrange: Set the cardLast4 field to null.
  Act: Call the getCardLast4() method.
  Assert: Use assertThrows to verify that a NullPointerException is thrown.
Validation:
  The assertion ensures that the getCardLast4() method throws a NullPointerException when the cardLast4 field is null.
  This test is important to validate that the method handles null values appropriately and prevents potential null pointer dereferences.

Scenario 3: Card Last 4 Digits with Less Than 4 Characters

Details:
  TestName: cardLast4DigitsLessThan4Chars
  Description: This test verifies that the getCardLast4() method throws a ConstraintViolationException when the cardLast4 field has less than 4 characters.
Execution:
  Arrange: Set the cardLast4 field to a string with less than 4 characters.
  Act: Call the getCardLast4() method.
  Assert: Use assertThrows to verify that a ConstraintViolationException is thrown.
Validation:
  The assertion ensures that the getCardLast4() method throws a ConstraintViolationException when the cardLast4 field violates the @Size constraint.
  This test is important to validate that the method enforces the minimum length constraint on the cardLast4 field.

Scenario 4: Card Last 4 Digits with More Than 4 Characters

Details:
  TestName: cardLast4DigitsMoreThan4Chars
  Description: This test verifies that the getCardLast4() method throws a ConstraintViolationException when the cardLast4 field has more than 4 characters.
Execution:
  Arrange: Set the cardLast4 field to a string with more than 4 characters.
  Act: Call the getCardLast4() method.
  Assert: Use assertThrows to verify that a ConstraintViolationException is thrown.
Validation:
  The assertion ensures that the getCardLast4() method throws a ConstraintViolationException when the cardLast4 field violates the @Size constraint.
  This test is important to validate that the method enforces the maximum length constraint on the cardLast4 field.

These test scenarios cover different aspects of the getCardLast4() method, including valid and invalid inputs, null handling, and constraint violations. They help ensure the method behaves as expected and handles edge cases appropriately.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import javax.validation.ConstraintViolationException;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class LegalActionInitiationRequestGetCardLast4Test {

	@Test
	public void validCardLast4Digits() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		request.setCardLast4("1234");
		// Act
		String result = request.getCardLast4();
		// Assert
		assertEquals("1234", result);
	}

	@Test
	public void nullCardLast4Digits() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		request.setCardLast4(null);
		// Act & Assert
		assertNull(request.getCardLast4());
	}

	@Test
	public void cardLast4DigitsLessThan4Chars() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		request.setCardLast4("123");
		// Act & Assert
		assertThrows(ConstraintViolationException.class, request::getCardLast4);
	}

	@Test
	public void cardLast4DigitsMoreThan4Chars() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		request.setCardLast4("12345");
		// Act & Assert
		assertThrows(ConstraintViolationException.class, request::getCardLast4);
	}

}
