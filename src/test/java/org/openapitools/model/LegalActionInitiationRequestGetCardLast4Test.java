// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=getCardLast4_59984ab924
ROOST_METHOD_SIG_HASH=getCardLast4_caa9c9adf0

Here are the JUnit test scenarios for the provided `getCardLast4()` method:

Scenario 1: Valid Card Last 4 Digits

Details:
  TestName: validCardLast4Returned
  Description: This test verifies that the `getCardLast4()` method returns the correct last 4 digits of the card number when a valid value is set.
Execution:
  Arrange: Create an instance of the class containing the `getCardLast4()` method and set the `cardLast4` field to a valid value (e.g., "1234").
  Act: Call the `getCardLast4()` method.
  Assert: Use `assertEquals` to compare the returned value with the expected value ("1234").
Validation:
  The assertion verifies that the method correctly returns the last 4 digits of the card number.
  This test ensures that the getter method functions as expected and retrieves the correct value.

Scenario 2: Null Card Last 4 Digits

Details:
  TestName: nullCardLast4Returned
  Description: This test checks the behavior of the `getCardLast4()` method when the `cardLast4` field is set to null.
Execution:
  Arrange: Create an instance of the class containing the `getCardLast4()` method and set the `cardLast4` field to null.
  Act: Call the `getCardLast4()` method.
  Assert: Use `assertNull` to verify that the returned value is null.
Validation:
  The assertion confirms that the method handles null values correctly and returns null when the `cardLast4` field is null.
  This test ensures that the method does not throw any exceptions or return unexpected results when dealing with null values.

Scenario 3: Empty Card Last 4 Digits

Details:
  TestName: emptyCardLast4Returned
  Description: This test verifies the behavior of the `getCardLast4()` method when the `cardLast4` field is set to an empty string.
Execution:
  Arrange: Create an instance of the class containing the `getCardLast4()` method and set the `cardLast4` field to an empty string ("").
  Act: Call the `getCardLast4()` method.
  Assert: Use `assertEquals` to compare the returned value with an empty string ("").
Validation:
  The assertion ensures that the method correctly returns an empty string when the `cardLast4` field is set to an empty string.
  This test validates that the method does not modify or manipulate empty strings and returns them as is.

Scenario 4: Card Last 4 Digits with Leading Zeros

Details:
  TestName: cardLast4WithLeadingZerosReturned
  Description: This test checks if the `getCardLast4()` method preserves leading zeros in the last 4 digits of the card number.
Execution:
  Arrange: Create an instance of the class containing the `getCardLast4()` method and set the `cardLast4` field to a value with leading zeros (e.g., "0012").
  Act: Call the `getCardLast4()` method.
  Assert: Use `assertEquals` to compare the returned value with the expected value ("0012").
Validation:
  The assertion verifies that the method maintains the leading zeros in the last 4 digits of the card number.
  This test ensures that the method does not strip or modify leading zeros, which can be significant in certain scenarios.

These test scenarios cover different aspects of the `getCardLast4()` method, including valid and null values, empty strings, and leading zeros. They help ensure the correctness and robustness of the method implementation.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestGetCardLast4Test {
    private LegalActionInitiationRequest request;
    @BeforeEach
    void setUp() {
        request = new LegalActionInitiationRequest();
    }
    @Test
    void validCardLast4Returned() {
        String expected = "1234";
        request.setCardLast4(expected);
        String result = request.getCardLast4();
        assertEquals(expected, result);
    }
    @Test
    void nullCardLast4Returned() {
        request.setCardLast4(null);
        String result = request.getCardLast4();
        assertNull(result);
    }
    @Test
    void emptyCardLast4Returned() {
        String expected = "";
        request.setCardLast4(expected);
        String result = request.getCardLast4();
        assertEquals(expected, result);
    }
    @ParameterizedTest
    @ValueSource(strings = {"0000", "0012", "0123"})
    void cardLast4WithLeadingZerosReturned(String expected) {
        request.setCardLast4(expected);
        String result = request.getCardLast4();
        assertEquals(expected, result);
    }
}