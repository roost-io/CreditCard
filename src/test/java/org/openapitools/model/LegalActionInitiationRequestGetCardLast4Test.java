// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=getCardLast4_55bc26ac31
ROOST_METHOD_SIG_HASH=getCardLast4_4a5c700ec4

Here are some JUnit test scenarios for the getCardLast4() method:

Scenario 1: Valid cardLast4 Value

Details:
  TestName: validCardLast4Value()
  Description: This test verifies that the getCardLast4() method returns the correct value when a valid cardLast4 value is set.
Execution:
  Arrange: Set the cardLast4 field to a valid 4-digit string value.
  Act: Call the getCardLast4() method.
  Assert: Use assertEquals to verify that the returned value matches the expected cardLast4 value.
Validation:
  The assertion checks that the getCardLast4() method correctly retrieves and returns the value of the cardLast4 field.
  This test ensures that the getter method functions as expected when a valid cardLast4 value is present.

Scenario 2: Null cardLast4 Value

Details:
  TestName: nullCardLast4Value()
  Description: This test verifies that the getCardLast4() method handles a null cardLast4 value correctly.
Execution:
  Arrange: Set the cardLast4 field to null.
  Act: Call the getCardLast4() method.
  Assert: Use assertNull to verify that the returned value is null.
Validation:
  The assertion checks that the getCardLast4() method returns null when the cardLast4 field is set to null.
  This test ensures that the getter method handles null values gracefully and doesn't throw any exceptions.

Scenario 3: cardLast4 Value with Less Than 4 Digits

Details:
  TestName: cardLast4ValueWithLessThan4Digits()
  Description: This test verifies that the getCardLast4() method handles a cardLast4 value with less than 4 digits correctly.
Execution:
  Arrange: Set the cardLast4 field to a string value with less than 4 digits.
  Act: Call the getCardLast4() method.
  Assert: Use assertEquals to verify that the returned value matches the expected cardLast4 value.
Validation:
  The assertion checks that the getCardLast4() method returns the correct value even when the cardLast4 field has less than 4 digits.
  This test ensures that the getter method doesn't enforce any length restrictions and returns the value as is.

Scenario 4: cardLast4 Value with More Than 4 Digits

Details:
  TestName: cardLast4ValueWithMoreThan4Digits()
  Description: This test verifies that the getCardLast4() method handles a cardLast4 value with more than 4 digits correctly.
Execution:
  Arrange: Set the cardLast4 field to a string value with more than 4 digits.
  Act: Call the getCardLast4() method.
  Assert: Use assertEquals to verify that the returned value matches the expected cardLast4 value.
Validation:
  The assertion checks that the getCardLast4() method returns the correct value even when the cardLast4 field has more than 4 digits.
  This test ensures that the getter method doesn't enforce any length restrictions and returns the value as is.

Note: The test scenarios assume that the cardLast4 field is accessible and can be set directly for testing purposes. If the field is private and not accessible, you may need to use reflection or other techniques to set the value for testing.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestGetCardLast4Test {

	@Test
	void validCardLast4Value() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		// Use setter method to set cardLast4 value
		request.setCardLast4("1234");
		// Act
		String result = request.getCardLast4();
		// Assert
		assertEquals("1234", result);
	}

	@Test
	void nullCardLast4Value() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		// Use setter method to set cardLast4 as null
		request.setCardLast4(null);
		// Act
		String result = request.getCardLast4();
		// Assert
		assertNull(result);
	}

	@ParameterizedTest
	@ValueSource(strings = { "123", "12", "1" })
	void cardLast4ValueWithLessThan4Digits(String cardLast4) {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		// Use setter method to set cardLast4 value
		request.setCardLast4(cardLast4);
		// Act
		String result = request.getCardLast4();
		// Assert
		assertEquals(cardLast4, result);
		// Add assertion to check @Size constraint
		assertEquals(cardLast4.length() < 4, true);
	}

	@ParameterizedTest
	@ValueSource(strings = { "12345", "123456", "1234567890" })
	void cardLast4ValueWithMoreThan4Digits(String cardLast4) {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		// Use setter method to set cardLast4 value
		request.setCardLast4(cardLast4);
		// Act
		String result = request.getCardLast4();
		// Assert
		assertEquals(cardLast4, result);
		// Add assertion to check @Size constraint
		assertEquals(cardLast4.length() > 4, true);
	}

}
