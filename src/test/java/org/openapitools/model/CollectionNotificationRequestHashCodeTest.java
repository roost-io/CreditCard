// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=hashCode_adc9abf991
ROOST_METHOD_SIG_HASH=hashCode_5a2657087a

Here are the JUnit test scenarios for the provided hashCode() method:

Scenario 1: Test hashCode with equal objects

Details:
  TestName: hashCodeWithEqualObjects()
  Description: This test verifies that the hashCode() method returns the same hash code for two objects with identical field values.
Execution:
  Arrange: Create two instances of the class with the same values for delinquencyStatus, outstandingBalance, additionalCharges, and cardLast4.
  Act: Invoke the hashCode() method on both objects.
  Assert: Use assertEquals to verify that the returned hash codes are equal.
Validation:
  The assertion ensures that the hashCode() method adheres to the contract of returning the same hash code for equal objects.
  This test is important to validate the consistency and correctness of the hashCode() implementation.

Scenario 2: Test hashCode with unequal objects

Details:
  TestName: hashCodeWithUnequalObjects()
  Description: This test verifies that the hashCode() method returns different hash codes for objects with different field values.
Execution:
  Arrange: Create two instances of the class with different values for delinquencyStatus, outstandingBalance, additionalCharges, and cardLast4.
  Act: Invoke the hashCode() method on both objects.
  Assert: Use assertNotEquals to verify that the returned hash codes are not equal.
Validation:
  The assertion ensures that the hashCode() method generates different hash codes for objects with different field values.
  This test is crucial to validate that the hashCode() implementation distinguishes between unequal objects.

Scenario 3: Test hashCode with null field values

Details:
  TestName: hashCodeWithNullFields()
  Description: This test verifies that the hashCode() method handles null field values correctly.
Execution:
  Arrange: Create an instance of the class with null values for delinquencyStatus, outstandingBalance, additionalCharges, and cardLast4.
  Act: Invoke the hashCode() method on the object.
  Assert: Use assertNotEquals to verify that the returned hash code is not equal to the hash code of an object with non-null field values.
Validation:
  The assertion ensures that the hashCode() method generates a different hash code for objects with null field values compared to objects with non-null values.
  This test is important to validate that the hashCode() implementation handles null values correctly and doesn't throw any exceptions.

Scenario 4: Test hashCode with empty strings

Details:
  TestName: hashCodeWithEmptyStrings()
  Description: This test verifies that the hashCode() method handles empty string field values correctly.
Execution:
  Arrange: Create an instance of the class with empty strings for delinquencyStatus and cardLast4, and appropriate values for outstandingBalance and additionalCharges.
  Act: Invoke the hashCode() method on the object.
  Assert: Use assertNotEquals to verify that the returned hash code is not equal to the hash code of an object with non-empty string field values.
Validation:
  The assertion ensures that the hashCode() method generates a different hash code for objects with empty string field values compared to objects with non-empty string values.
  This test is important to validate that the hashCode() implementation handles empty strings correctly and doesn't treat them as equivalent to non-empty strings.

These test scenarios cover different aspects of the hashCode() method, including equal objects, unequal objects, null field values, and empty string field values. They help ensure the correctness and consistency of the hashCode() implementation in various scenarios.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestHashCodeTest {
    @Test
    void hashCodeWithEqualObjects() {
        // Arrange
        CollectionNotificationRequest request1 = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        CollectionNotificationRequest request2 = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        // Act
        int hashCode1 = request1.hashCode();
        int hashCode2 = request2.hashCode();
        // Assert
        assertEquals(hashCode1, hashCode2);
    }
    @Test
    void hashCodeWithUnequalObjects() {
        // Arrange
        CollectionNotificationRequest request1 = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        CollectionNotificationRequest request2 = new CollectionNotificationRequest()
                .delinquencyStatus("NON_DELINQUENT")
                .outstandingBalance("200.00")
                .additionalCharges("20.00")
                .cardLast4("5678");
        // Act
        int hashCode1 = request1.hashCode();
        int hashCode2 = request2.hashCode();
        // Assert
        assertNotEquals(hashCode1, hashCode2);
    }
    @Test
    void hashCodeWithNullFields() {
        // Arrange
        CollectionNotificationRequest request1 = new CollectionNotificationRequest()
                .delinquencyStatus(null)
                .outstandingBalance(null)
                .additionalCharges(null)
                .cardLast4(null);
        CollectionNotificationRequest request2 = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        // Act
        int hashCode1 = request1.hashCode();
        int hashCode2 = request2.hashCode();
        // Assert
        assertNotEquals(hashCode1, hashCode2);
    }
    @Test
    void hashCodeWithEmptyStrings() {
        // Arrange
        CollectionNotificationRequest request1 = new CollectionNotificationRequest()
                .delinquencyStatus("")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("");
        CollectionNotificationRequest request2 = new CollectionNotificationRequest()
                .delinquencyStatus("DELINQUENT")
                .outstandingBalance("100.00")
                .additionalCharges("10.00")
                .cardLast4("1234");
        // Act
        int hashCode1 = request1.hashCode();
        int hashCode2 = request2.hashCode();
        // Assert
        assertNotEquals(hashCode1, hashCode2);
    }
}