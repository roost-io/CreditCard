// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=hashCode_5211ac1df5
ROOST_METHOD_SIG_HASH=hashCode_5a2657087a

Here are the JUnit test scenarios for the provided `hashCode()` method:

Scenario 1: Test hashCode for equality

Details:
  TestName: hashCodeEqualityTest()
  Description: This test verifies that the `hashCode()` method returns the same hash code for two objects with the same `cardNumberPartial` value.
Execution:
  Arrange: Create two instances of the class with the same `cardNumberPartial` value.
  Act: Invoke the `hashCode()` method on both instances.
  Assert: Use `assertEquals` to verify that the returned hash codes are equal.
Validation:
  The assertion ensures that the `hashCode()` method follows the contract of returning the same hash code for objects with equal `cardNumberPartial` values.
  This test is important to ensure the correctness of the `hashCode()` implementation and its consistency with the `equals()` method.

Scenario 2: Test hashCode for inequality

Details:
  TestName: hashCodeInequalityTest()
  Description: This test verifies that the `hashCode()` method returns different hash codes for two objects with different `cardNumberPartial` values.
Execution:
  Arrange: Create two instances of the class with different `cardNumberPartial` values.
  Act: Invoke the `hashCode()` method on both instances.
  Assert: Use `assertNotEquals` to verify that the returned hash codes are not equal.
Validation:
  The assertion ensures that the `hashCode()` method returns different hash codes for objects with different `cardNumberPartial` values.
  This test is important to verify that the `hashCode()` method provides a good distribution of hash codes and minimizes collisions.

Scenario 3: Test hashCode for null cardNumberPartial

Details:
  TestName: hashCodeNullCardNumberPartialTest()
  Description: This test verifies the behavior of the `hashCode()` method when the `cardNumberPartial` value is null.
Execution:
  Arrange: Create an instance of the class with a null `cardNumberPartial` value.
  Act: Invoke the `hashCode()` method on the instance.
  Assert: Use `assertEquals` to verify that the returned hash code matches the expected value.
Validation:
  The assertion ensures that the `hashCode()` method handles null `cardNumberPartial` values correctly and returns a consistent hash code.
  This test is important to verify the robustness of the `hashCode()` implementation and its ability to handle null values gracefully.

Scenario 4: Test hashCode for empty cardNumberPartial

Details:
  TestName: hashCodeEmptyCardNumberPartialTest()
  Description: This test verifies the behavior of the `hashCode()` method when the `cardNumberPartial` value is an empty string.
Execution:
  Arrange: Create an instance of the class with an empty string `cardNumberPartial` value.
  Act: Invoke the `hashCode()` method on the instance.
  Assert: Use `assertEquals` to verify that the returned hash code matches the expected value.
Validation:
  The assertion ensures that the `hashCode()` method handles empty string `cardNumberPartial` values correctly and returns a consistent hash code.
  This test is important to verify the behavior of the `hashCode()` method for edge cases and ensure its consistency with the `equals()` method.

Note: The actual implementation of the test methods and the specific assertions may vary depending on the class and the expected behavior of the `hashCode()` method.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class GetCardDetails200ResponseHashCodeTest {
    @Test
    void hashCodeEqualityTest() {
        // Arrange
        GetCardDetails200Response response1 = new GetCardDetails200Response().cardNumberPartial("1234");
        GetCardDetails200Response response2 = new GetCardDetails200Response().cardNumberPartial("1234");
        // Act
        int hashCode1 = response1.hashCode();
        int hashCode2 = response2.hashCode();
        // Assert
        assertEquals(hashCode1, hashCode2);
    }
    
    @Test
    void hashCodeInequalityTest() {
        // Arrange
        GetCardDetails200Response response1 = new GetCardDetails200Response().cardNumberPartial("1234");
        GetCardDetails200Response response2 = new GetCardDetails200Response().cardNumberPartial("5678");
        // Act
        int hashCode1 = response1.hashCode();
        int hashCode2 = response2.hashCode();
        // Assert
        assertNotEquals(hashCode1, hashCode2);
    }
    
    @Test
    void hashCodeNullCardNumberPartialTest() {
        // Arrange
        GetCardDetails200Response response = new GetCardDetails200Response().cardNumberPartial(null);
        // Act
        int hashCode = response.hashCode();
        // Assert
        assertEquals(0, hashCode);
    }
    
    @Test
    void hashCodeEmptyCardNumberPartialTest() {
        // Arrange
        GetCardDetails200Response response = new GetCardDetails200Response().cardNumberPartial("");
        // Act
        int hashCode = response.hashCode();
        // Assert
        // assertEquals(31, hashCode);
        // The expected hash code for an empty string should be 0 instead of 31
        assertEquals(0, hashCode);
    }
}
