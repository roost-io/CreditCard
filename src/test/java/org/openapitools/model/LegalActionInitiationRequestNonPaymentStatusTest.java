// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=nonPaymentStatus_28ca6cc0e2
ROOST_METHOD_SIG_HASH=nonPaymentStatus_64a807bb50

Here are the JUnit test scenarios for the provided nonPaymentStatus method:

Scenario 1: Set NonPayment Status

Details:
  TestName: nonPaymentStatusSetsStatus
  Description: This test verifies that the nonPaymentStatus method correctly sets the nonPaymentStatus field when a valid status string is provided.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the nonPaymentStatus method with a valid status string.
  Assert: Use assertEquals to check if the nonPaymentStatus field is set to the provided value.
Validation:
  The assertion verifies that the nonPaymentStatus field is properly updated by the method.
  This test ensures the basic functionality of setting the nonPayment status on the request object.

Scenario 2: Return LegalActionInitiationRequest Instance

Details:
  TestName: nonPaymentStatusReturnsRequestInstance
  Description: This test checks that the nonPaymentStatus method returns the same instance of LegalActionInitiationRequest after setting the status.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the nonPaymentStatus method and store the returned object.
  Assert: Use assertSame to verify that the returned object is the same instance as the original request object.
Validation:
  The assertion confirms that the method follows the fluent interface pattern by returning 'this'.
  This test validates the method's design to allow chaining of method calls on the request object.

Scenario 3: Handle Null Status

Details:
  TestName: nonPaymentStatusHandlesNullStatus
  Description: This test verifies the behavior of the nonPaymentStatus method when a null value is passed as the status argument.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the nonPaymentStatus method with a null value.
  Assert: Use assertNull to check if the nonPaymentStatus field remains null after the method call.
Validation:
  The assertion ensures that passing a null value does not cause any unexpected behavior or exceptions.
  This test covers the scenario where the status might be intentionally or unintentionally set to null.

Scenario 4: Handle Empty Status

Details:
  TestName: nonPaymentStatusHandlesEmptyStatus
  Description: This test checks how the nonPaymentStatus method handles an empty string as the status argument.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the nonPaymentStatus method with an empty string.
  Assert: Use assertEquals to verify that the nonPaymentStatus field is set to an empty string.
Validation:
  The assertion confirms that the method allows setting the status to an empty string without any validation.
  This test highlights the behavior when an empty status is provided, which may or may not be an acceptable value depending on the business rules.

Scenario 5: Status Does Not Affect Other Fields

Details:
  TestName: nonPaymentStatusDoesNotAffectOtherFields
  Description: This test ensures that setting the nonPaymentStatus does not modify other fields in the LegalActionInitiationRequest object.
Execution:
  Arrange: Create an instance of LegalActionInitiationRequest and set values for legalStatus and cardLast4 fields.
  Act: Invoke the nonPaymentStatus method with a valid status string.
  Assert: Use assertEquals to check that legalStatus and cardLast4 fields retain their original values.
Validation:
  The assertions verify that the nonPaymentStatus method only modifies the intended field without side effects.
  This test provides confidence in the method's behavior and helps catch unintended changes to other fields.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestNonPaymentStatusTest {

	@Test
	void nonPaymentStatusSetsStatus() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		String expectedStatus = "PENDING";
		// Act
		request.nonPaymentStatus(expectedStatus);
		// Assert
		assertEquals(expectedStatus, request.getNonPaymentStatus());
	}

	@Test
	void nonPaymentStatusReturnsRequestInstance() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		// Act
		LegalActionInitiationRequest result = request.nonPaymentStatus("PENDING");
		// Assert
		assertSame(request, result);
	}

	@Test
	void nonPaymentStatusHandlesNullStatus() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		// Act
		request.nonPaymentStatus(null);
		// Assert
		assertNull(request.getNonPaymentStatus());
	}

	@Test
	void nonPaymentStatusHandlesEmptyStatus() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		String emptyStatus = "";
		// Act
		request.nonPaymentStatus(emptyStatus);
		// Assert
		assertEquals(emptyStatus, request.getNonPaymentStatus());
	}

	@Test
	void nonPaymentStatusDoesNotAffectOtherFields() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		request.setLegalStatus("LEGAL_STATUS");
		request.setCardLast4("1234");
		String expectedLegalStatus = request.getLegalStatus();
		String expectedCardLast4 = request.getCardLast4();
		// Act
		request.nonPaymentStatus("PENDING");
		// Assert
		assertEquals(expectedLegalStatus, request.getLegalStatus());
		assertEquals(expectedCardLast4, request.getCardLast4());
	}

}