// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=nonPaymentStatus_28ca6cc0e2
ROOST_METHOD_SIG_HASH=nonPaymentStatus_64a807bb50

Based on the provided method and imports, here are the generated test scenarios:

Scenario 1: Test setting nonPaymentStatus with a valid value

Details:
  TestName: setNonPaymentStatusWithValidValue()
  Description: This test checks if the nonPaymentStatus method correctly sets the nonPaymentStatus field when a valid value is provided.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the nonPaymentStatus method with a valid string value.
  Assert: Use assertEquals to verify that the nonPaymentStatus field of the LegalActionInitiationRequest instance is set to the provided value.
Validation:
  The assertion verifies that the nonPaymentStatus method correctly sets the nonPaymentStatus field when a valid value is provided.
  This test ensures that the method behaves as expected and maintains the integrity of the LegalActionInitiationRequest object.

Scenario 2: Test setting nonPaymentStatus with null

Details:
  TestName: setNonPaymentStatusWithNull()
  Description: This test checks if the nonPaymentStatus method handles setting the nonPaymentStatus field with a null value.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the nonPaymentStatus method with a null value.
  Assert: Use assertNull to verify that the nonPaymentStatus field of the LegalActionInitiationRequest instance is set to null.
Validation:
  The assertion verifies that the nonPaymentStatus method correctly sets the nonPaymentStatus field to null when a null value is provided.
  This test ensures that the method handles null values gracefully and does not throw any exceptions.

Scenario 3: Test setting nonPaymentStatus with an empty string

Details:
  TestName: setNonPaymentStatusWithEmptyString()
  Description: This test checks if the nonPaymentStatus method handles setting the nonPaymentStatus field with an empty string.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the nonPaymentStatus method with an empty string.
  Assert: Use assertEquals to verify that the nonPaymentStatus field of the LegalActionInitiationRequest instance is set to an empty string.
Validation:
  The assertion verifies that the nonPaymentStatus method correctly sets the nonPaymentStatus field to an empty string when an empty string is provided.
  This test ensures that the method handles empty strings appropriately and does not throw any exceptions.

Scenario 4: Test method chaining with nonPaymentStatus

Details:
  TestName: methodChainingWithNonPaymentStatus()
  Description: This test checks if the nonPaymentStatus method supports method chaining by returning the LegalActionInitiationRequest instance.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the nonPaymentStatus method with a valid string value and chain another method call.
  Assert: Use assertNotNull to verify that the returned object is not null and assertEquals to verify that the nonPaymentStatus field is set correctly.
Validation:
  The assertions verify that the nonPaymentStatus method returns the LegalActionInitiationRequest instance, allowing for method chaining.
  This test ensures that the method follows the fluent interface pattern and enables developers to chain multiple method calls on the LegalActionInitiationRequest object.

Note: The generated test scenarios assume the existence of a LegalActionInitiationRequest class based on the method signature and the provided imports. The actual implementation of the test code may vary depending on the specific testing framework and project structure.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.EmptySource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestNonPaymentStatusTest {
    @ParameterizedTest
    @CsvSource({
        "UNPAID",
        "PARTIALLY_PAID",
        "PAID_IN_FULL"
    })
    @DisplayName("Test setting nonPaymentStatus with valid values")
    void setNonPaymentStatusWithValidValue(String status) {
        LegalActionInitiationRequest request = new LegalActionInitiationRequest();
        LegalActionInitiationRequest result = request.nonPaymentStatus(status);
        assertEquals(status, result.getNonPaymentStatus());
        assertSame(request, result);
    }
    @Test
    @DisplayName("Test setting nonPaymentStatus with null")
    void setNonPaymentStatusWithNull() {
        LegalActionInitiationRequest request = new LegalActionInitiationRequest();
        LegalActionInitiationRequest result = request.nonPaymentStatus(null);
        assertNull(result.getNonPaymentStatus());
        assertSame(request, result);
    }
    @ParameterizedTest
    @EmptySource
    @DisplayName("Test setting nonPaymentStatus with empty string")
    void setNonPaymentStatusWithEmptyString(String emptyStatus) {
        LegalActionInitiationRequest request = new LegalActionInitiationRequest();
        LegalActionInitiationRequest result = request.nonPaymentStatus(emptyStatus);
        assertEquals("", result.getNonPaymentStatus());
        assertSame(request, result);
    }
    @Test
    @DisplayName("Test method chaining with nonPaymentStatus")
    void methodChainingWithNonPaymentStatus() {
        LegalActionInitiationRequest request = new LegalActionInitiationRequest();
        LegalActionInitiationRequest result = request
            .nonPaymentStatus("UNPAID")
            .legalStatus("PENDING")
            .cardLast4("1234");
        
        assertEquals("UNPAID", result.getNonPaymentStatus());
        assertEquals("PENDING", result.getLegalStatus());
        assertEquals("1234", result.getCardLast4());
        assertSame(request, result);
    }
}