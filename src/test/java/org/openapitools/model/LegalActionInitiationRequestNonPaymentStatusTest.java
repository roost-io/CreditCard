// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=nonPaymentStatus_28ca6cc0e2
ROOST_METHOD_SIG_HASH=nonPaymentStatus_64a807bb50

Here are the JUnit test scenarios for the provided `nonPaymentStatus` method:

Scenario 1: Setting a Valid NonPaymentStatus

Details:
  TestName: nonPaymentStatusWithValidValue
  Description: This test verifies that the `nonPaymentStatus` method sets the `nonPaymentStatus` field correctly when a valid value is provided.
Execution:
  Arrange: Create an instance of the `LegalActionInitiationRequest` class.
  Act: Invoke the `nonPaymentStatus` method with a valid string value, such as "OVERDUE".
  Assert: Use JUnit assertions to verify that the `nonPaymentStatus` field of the `LegalActionInitiationRequest` instance is set to the provided value.
Validation:
  The assertion ensures that the `nonPaymentStatus` field is properly set when a valid value is passed to the method.
  This test is important to validate that the method correctly updates the `nonPaymentStatus` field, which may be used in subsequent processing or API requests.

Scenario 2: Setting a Null NonPaymentStatus

Details:
  TestName: nonPaymentStatusWithNullValue
  Description: This test checks that the `nonPaymentStatus` method handles a null value gracefully and does not throw any exceptions.
Execution:
  Arrange: Create an instance of the `LegalActionInitiationRequest` class.
  Act: Invoke the `nonPaymentStatus` method with a null value.
  Assert: Use JUnit assertions to verify that no exceptions are thrown and the `nonPaymentStatus` field remains unchanged (null).
Validation:
  The assertion confirms that passing a null value to the `nonPaymentStatus` method does not cause any unexpected behavior or exceptions.
  This test is crucial to ensure the robustness of the method and its ability to handle null inputs without breaking the application flow.

Scenario 3: Chaining Multiple Method Calls

Details:
  TestName: nonPaymentStatusMethodChaining
  Description: This test verifies that the `nonPaymentStatus` method returns the `LegalActionInitiationRequest` instance, allowing for method chaining.
Execution:
  Arrange: Create an instance of the `LegalActionInitiationRequest` class.
  Act: Invoke the `nonPaymentStatus` method with a valid value and chain it with other methods like `legalStatus` and `cardLast4`.
  Assert: Use JUnit assertions to verify that the chained methods are executed successfully and the corresponding fields are set correctly.
Validation:
  The assertion ensures that the `nonPaymentStatus` method returns the `LegalActionInitiationRequest` instance, enabling method chaining for a fluent API.
  This test is important to validate that the method follows the builder pattern and allows for convenient and readable configuration of the `LegalActionInitiationRequest` object.

Scenario 4: Setting an Empty NonPaymentStatus

Details:
  TestName: nonPaymentStatusWithEmptyValue
  Description: This test checks that the `nonPaymentStatus` method handles an empty string value and sets the `nonPaymentStatus` field accordingly.
Execution:
  Arrange: Create an instance of the `LegalActionInitiationRequest` class.
  Act: Invoke the `nonPaymentStatus` method with an empty string value.
  Assert: Use JUnit assertions to verify that the `nonPaymentStatus` field is set to an empty string.
Validation:
  The assertion confirms that passing an empty string to the `nonPaymentStatus` method results in the field being set to an empty string.
  This test is important to ensure that the method correctly handles empty string inputs and sets the field accordingly, as an empty string may have different implications compared to a null value.

These test scenarios cover various aspects of the `nonPaymentStatus` method, including setting valid values, handling null and empty inputs, and supporting method chaining. They aim to ensure the correct behavior of the method and its interaction with the `LegalActionInitiationRequest` class.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;

import static org.junit.jupiter.api.Assertions.*;

class LegalActionInitiationRequestNonPaymentStatusTest {

	@ParameterizedTest
	@CsvSource({ "OVERDUE", "DELINQUENT", "IN_COLLECTION" })
	void nonPaymentStatusWithValidValue(String status) {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		LegalActionInitiationRequest result = request.nonPaymentStatus(status);

		assertSame(request, result);
		assertEquals(status, request.getNonPaymentStatus());
	}

	@Test
	void nonPaymentStatusWithNullValue() {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		LegalActionInitiationRequest result = request.nonPaymentStatus(null);

		assertSame(request, result);
		assertNull(request.getNonPaymentStatus());
	}

	@Test
	void nonPaymentStatusMethodChaining() {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		LegalActionInitiationRequest result = request.nonPaymentStatus("OVERDUE")
			.legalStatus("PENDING")
			.cardLast4("1234");

		assertSame(request, result);
		assertEquals("OVERDUE", request.getNonPaymentStatus());
		assertEquals("PENDING", request.getLegalStatus());
		assertEquals("1234", request.getCardLast4());
	}

	@Test
	void nonPaymentStatusWithEmptyValue() {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		LegalActionInitiationRequest result = request.nonPaymentStatus("");

		assertSame(request, result);
		assertEquals("", request.getNonPaymentStatus());
	}

	// Add a test case for invalid non-payment status value
	@ParameterizedTest
	@ValueSource(strings = { "INVALID", "PENDING", "PAID" })
	void nonPaymentStatusWithInvalidValue(String status) {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		LegalActionInitiationRequest result = request.nonPaymentStatus(status);

		assertSame(request, result);
		assertEquals(status, request.getNonPaymentStatus());
		// Consider adding validation logic in the business logic to handle invalid
		// non-payment status values
	}

}
