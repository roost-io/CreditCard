// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=getCardLast4_55bc26ac31
ROOST_METHOD_SIG_HASH=getCardLast4_4a5c700ec4

Here are the JUnit test scenarios for the getCardLast4() method:

Scenario 1: Verify getCardLast4 returns the correct card last 4 digits

Details:
  TestName: getCardLast4ReturnsCorrectValue()
  Description: This test verifies that the getCardLast4 method returns the correct last 4 digits of the card number stored in the cardLast4 field.
Execution:
  Arrange: Create an instance of the class containing the getCardLast4 method. Set the cardLast4 field to a known value using reflection since it is private.
  Act: Call the getCardLast4() method on the instance.
  Assert: Use assertEquals to verify the returned value matches the known cardLast4 value.
Validation:
  The assertion checks that the getCardLast4 method correctly returns the value of the private cardLast4 field, ensuring the getter functions as expected.
  This test is important to validate that card details are accurately retrieved for display or processing purposes.

Scenario 2: Verify getCardLast4 returns a 4-digit string

Details:
  TestName: getCardLast4ReturnsString()
  Description: This test checks that the getCardLast4 method returns a string value of length 4, as specified by the @Size constraint.
Execution:
  Arrange: Create an instance of the class. Set cardLast4 to a valid 4-digit string value.
  Act: Call getCardLast4() on the instance.
  Assert: Use assertTrue and String.length() to verify the returned value is a string of length 4.
Validation:
  The assertion ensures the getter returns a string meeting the size constraint, preventing invalid card data from being returned.
  Adhering to the length requirement is crucial for consistent formatting and avoiding potential issues when processing the card number.

Scenario 3: Verify getCardLast4 handles null cardLast4 value

Details:
  TestName: getCardLast4HandlesNullValue()
  Description: This test verifies the getCardLast4 method's behavior when the cardLast4 field is null, ensuring it does not return a null value.
Execution:
  Arrange: Create an instance of the class. Set cardLast4 to null using reflection.
  Act: Call getCardLast4() on the instance.
  Assert: Use assertNotNull to verify the returned value is not null.
Validation:
  The assertion checks that the getter gracefully handles a null cardLast4 value, likely returning an empty string or throwing an exception as per the @NotNull constraint.
  Handling null values prevents null pointer exceptions and ensures a consistent response format, even when card data is missing.

Scenario 4: Verify getCardLast4 throws exception for invalid cardLast4 length

Details:
  TestName: getCardLast4ThrowsExceptionForInvalidLength()
  Description: This test verifies that the getCardLast4 method throws a ConstraintViolationException when the cardLast4 field violates the @Size constraint.
Execution:
  Arrange: Create an instance of the class. Set cardLast4 to a string longer or shorter than 4 characters.
  Act: Call getCardLast4() on the instance.
  Assert: Use assertThrows to verify a ConstraintViolationException is thrown.
Validation:
  The assertion ensures the getter adheres to the specified size constraint, preventing invalid card data from being returned.
  Enforcing the length requirement maintains data integrity and consistency across the application.

These test scenarios cover the key aspects of the getCardLast4 method, including return value correctness, constraint validation, and null handling. They help ensure the method functions as expected and handles edge cases gracefully.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import javax.validation.ConstraintViolationException;
import java.lang.reflect.Field;
import static org.junit.jupiter.api.Assertions.*;
import com.fasterxml.jackson.annotation.JsonProperty;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;

class CollectionNotificationRequestGetCardLast4Test {

	private CollectionNotificationRequest request;

	@BeforeEach
	void setUp() {
		request = new CollectionNotificationRequest();
	}

	@Test
	void getCardLast4ReturnsCorrectValue() throws NoSuchFieldException, IllegalAccessException {
		// Arrange
		String expectedCardLast4 = "1234";
		Field field = CollectionNotificationRequest.class.getDeclaredField("cardLast4");
		field.setAccessible(true);
		field.set(request, expectedCardLast4);
		// Act
		String actualCardLast4 = request.getCardLast4();
		// Assert
		assertEquals(expectedCardLast4, actualCardLast4);
	}

	@Test
	void getCardLast4ReturnsString() {
		// Arrange
		String validCardLast4 = "5678";
		request = new CollectionNotificationRequest(null, null, null, validCardLast4);
		// Act
		String result = request.getCardLast4();
		// Assert
		assertEquals(4, result.length());
	}

	@Test
	void getCardLast4HandlesNullValue() throws NoSuchFieldException, IllegalAccessException {
		// Arrange
		Field field = CollectionNotificationRequest.class.getDeclaredField("cardLast4");
		field.setAccessible(true);
		field.set(request, null);
		// Act
		String result = request.getCardLast4();
		// Assert
		assertNull(result);
	}

	@ParameterizedTest
	@ValueSource(strings = { "123", "12345", "" })
	void getCardLast4ThrowsExceptionForInvalidLength(String invalidCardLast4) {
		// Arrange
		request = new CollectionNotificationRequest(null, null, null, invalidCardLast4);
		// Act & Assert
		assertThrows(ConstraintViolationException.class, () -> request.getCardLast4());
	}

}
