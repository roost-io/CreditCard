// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=getCardLast4_55bc26ac31
ROOST_METHOD_SIG_HASH=getCardLast4_4a5c700ec4

Here are some test scenarios for the getCardLast4() method:

Scenario 1: Valid cardLast4 value

Details:
  TestName: validCardLast4ReturnsValue
  Description: This test verifies that the getCardLast4() method returns the correct value when a valid cardLast4 is set.
Execution:
  Arrange: Create an instance of the class and set a valid cardLast4 value, e.g., "1234".
  Act: Call the getCardLast4() method.
  Assert: Use assertEquals to check if the returned value matches the expected cardLast4 value.
Validation:
  The assertion ensures that the getCardLast4() method correctly retrieves and returns the cardLast4 value.
  This test is important to validate the basic functionality of the getter method.

Scenario 2: cardLast4 with less than 4 digits

Details:
  TestName: cardLast4WithLessThan4DigitsThrowsException
  Description: This test checks if the getCardLast4() method throws a validation exception when the cardLast4 value has less than 4 digits.
Execution:
  Arrange: Create an instance of the class and set an invalid cardLast4 value with less than 4 digits, e.g., "123".
  Act: Call the getCardLast4() method.
  Assert: Use assertThrows to verify that a validation exception is thrown.
Validation:
  The assertion confirms that the @Size constraint is properly enforced, preventing invalid cardLast4 values with less than 4 digits.
  This test ensures data integrity and adherence to the specified validation rules.

Scenario 3: cardLast4 with more than 4 digits

Details:
  TestName: cardLast4WithMoreThan4DigitsThrowsException
  Description: This test checks if the getCardLast4() method throws a validation exception when the cardLast4 value has more than 4 digits.
Execution:
  Arrange: Create an instance of the class and set an invalid cardLast4 value with more than 4 digits, e.g., "12345".
  Act: Call the getCardLast4() method.
  Assert: Use assertThrows to verify that a validation exception is thrown.
Validation:
  The assertion confirms that the @Size constraint is properly enforced, preventing invalid cardLast4 values with more than 4 digits.
  This test ensures data integrity and adherence to the specified validation rules.

Scenario 4: cardLast4 with non-numeric characters

Details:
  TestName: cardLast4WithNonNumericCharactersThrowsException
  Description: This test checks if the getCardLast4() method throws a validation exception when the cardLast4 value contains non-numeric characters.
Execution:
  Arrange: Create an instance of the class and set an invalid cardLast4 value with non-numeric characters, e.g., "123a".
  Act: Call the getCardLast4() method.
  Assert: Use assertThrows to verify that a validation exception is thrown.
Validation:
  The assertion confirms that the getCardLast4() method validates the input and rejects non-numeric characters.
  This test ensures data integrity and prevents invalid cardLast4 values from being accepted.

Scenario 5: cardLast4 is null

Details:
  TestName: cardLast4IsNullThrowsException
  Description: This test checks if the getCardLast4() method throws a validation exception when the cardLast4 value is null.
Execution:
  Arrange: Create an instance of the class and set the cardLast4 value to null.
  Act: Call the getCardLast4() method.
  Assert: Use assertThrows to verify that a validation exception is thrown.
Validation:
  The assertion confirms that the @NotNull constraint is properly enforced, preventing null cardLast4 values.
  This test ensures that the required field is not missing and adheres to the specified validation rules.

These test scenarios cover various cases, including valid input, invalid input with different constraints, and null values. They help ensure the robustness and correctness of the getCardLast4() method.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import javax.validation.ConstraintViolationException;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestGetCardLast4Test {

	private CollectionNotificationRequest collectionNotificationRequest;

	@BeforeEach
	void setUp() {
		collectionNotificationRequest = new CollectionNotificationRequest();
	}

	@Test
	void validCardLast4ReturnsValue() {
		// Arrange
		String expectedCardLast4 = "1234";
		collectionNotificationRequest.setCardLast4(expectedCardLast4);
		// Act
		String actualCardLast4 = collectionNotificationRequest.getCardLast4();
		// Assert
		assertEquals(expectedCardLast4, actualCardLast4);
	}

	@ParameterizedTest
	@ValueSource(strings = { "123", "12", "1" })
	void cardLast4WithLessThan4DigitsThrowsException(String invalidCardLast4) {
		// Arrange
		collectionNotificationRequest.setCardLast4(invalidCardLast4);
		// Act & Assert
		// TODO: Modify the test to check for the appropriate exception based on the
		// validation constraints
		// For example, if @Size annotation is used, expect a ConstraintViolationException
		assertThrows(Exception.class, collectionNotificationRequest::getCardLast4);
	}

	@ParameterizedTest
	@ValueSource(strings = { "12345", "123456", "1234567" })
	void cardLast4WithMoreThan4DigitsThrowsException(String invalidCardLast4) {
		// Arrange
		collectionNotificationRequest.setCardLast4(invalidCardLast4);
		// Act & Assert
		// TODO: Modify the test to check for the appropriate exception based on the
		// validation constraints
		// For example, if @Size annotation is used, expect a ConstraintViolationException
		assertThrows(Exception.class, collectionNotificationRequest::getCardLast4);
	}

	@ParameterizedTest
	@ValueSource(strings = { "123a", "12b4", "ab34" })
	void cardLast4WithNonNumericCharactersThrowsException(String invalidCardLast4) {
		// Arrange
		collectionNotificationRequest.setCardLast4(invalidCardLast4);
		// Act & Assert
		// TODO: Modify the test to check for the appropriate exception based on the
		// validation constraints
		// For example, if a numeric constraint is used, expect a
		// ConstraintViolationException
		assertThrows(Exception.class, collectionNotificationRequest::getCardLast4);
	}

	@Test
	void cardLast4IsNullThrowsException() {
		// Arrange
		collectionNotificationRequest.setCardLast4(null);
		// Act & Assert
		// TODO: Modify the test to check for the appropriate exception based on the
		// validation constraints
		// For example, if @NotNull annotation is used, expect a
		// ConstraintViolationException
		assertThrows(Exception.class, collectionNotificationRequest::getCardLast4);
	}

}
