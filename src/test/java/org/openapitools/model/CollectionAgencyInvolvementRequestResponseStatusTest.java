// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=responseStatus_50ec8110a2
ROOST_METHOD_SIG_HASH=responseStatus_b040a3b6a8

Here are the JUnit test scenarios for the provided `responseStatus` method:

Scenario 1: Set Response Status

Details:
  TestName: responseStatusSetsValue
  Description: This test verifies that the `responseStatus` method correctly sets the `responseStatus` field when a valid string is provided and returns the current instance of `CollectionAgencyInvolvementRequest`.

Execution:
  Arrange: Create an instance of `CollectionAgencyInvolvementRequest`.
  Act: Call the `responseStatus` method with a valid string value.
  Assert: Assert that the `responseStatus` field is set to the provided value using `assertEquals`. Assert that the returned object is the same instance of `CollectionAgencyInvolvementRequest` using `assertSame`.

Validation:
  The assertions verify that the `responseStatus` field is properly set and that the method returns the current instance, allowing for method chaining. This test ensures that the basic functionality of setting the response status works as expected.

Scenario 2: Set Response Status to Null

Details:
  TestName: responseStatusAllowsNull
  Description: This test checks that the `responseStatus` method allows setting the `responseStatus` field to `null` and returns the current instance of `CollectionAgencyInvolvementRequest`.

Execution:
  Arrange: Create an instance of `CollectionAgencyInvolvementRequest`.
  Act: Call the `responseStatus` method with a `null` value.
  Assert: Assert that the `responseStatus` field is set to `null` using `assertNull`. Assert that the returned object is the same instance of `CollectionAgencyInvolvementRequest` using `assertSame`.

Validation:
  The assertions verify that the `responseStatus` field can be set to `null` and that the method still returns the current instance. This test ensures that the method handles `null` values gracefully and does not throw any exceptions.

Scenario 3: Set Response Status to Empty String

Details:
  TestName: responseStatusAllowsEmptyString
  Description: This test verifies that the `responseStatus` method allows setting the `responseStatus` field to an empty string and returns the current instance of `CollectionAgencyInvolvementRequest`.

Execution:
  Arrange: Create an instance of `CollectionAgencyInvolvementRequest`.
  Act: Call the `responseStatus` method with an empty string value.
  Assert: Assert that the `responseStatus` field is set to an empty string using `assertEquals`. Assert that the returned object is the same instance of `CollectionAgencyInvolvementRequest` using `assertSame`.

Validation:
  The assertions verify that the `responseStatus` field can be set to an empty string and that the method returns the current instance. This test ensures that the method handles empty strings correctly and does not throw any exceptions.

Scenario 4: Set Response Status Multiple Times

Details:
  TestName: responseStatusOverwritesPreviousValue
  Description: This test checks that calling the `responseStatus` method multiple times with different values overwrites the previous value of the `responseStatus` field.

Execution:
  Arrange: Create an instance of `CollectionAgencyInvolvementRequest`.
  Act: Call the `responseStatus` method with a valid string value. Call the `responseStatus` method again with a different valid string value.
  Assert: Assert that the `responseStatus` field is set to the last provided value using `assertEquals`.

Validation:
  The assertion verifies that the `responseStatus` field is overwritten with the latest value provided to the method. This test ensures that the method correctly updates the field value when called multiple times.

These test scenarios cover the basic functionality of the `responseStatus` method, including setting valid values, handling `null` and empty strings, and overwriting previous values. They ensure that the method behaves as expected and returns the current instance for method chaining.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionAgencyInvolvementRequestResponseStatusTest {

	private CollectionAgencyInvolvementRequest request;

	@BeforeEach
	void setUp() {
		request = new CollectionAgencyInvolvementRequest();
	}

	@Test
	void responseStatusSetsValue() {
		String status = "SUCCESS";
		CollectionAgencyInvolvementRequest result = request.responseStatus(status);
		assertEquals(status, request.getResponseStatus());
		assertSame(request, result);
	}

	@Test
	void responseStatusAllowsNull() {
		CollectionAgencyInvolvementRequest result = request.responseStatus(null);
		assertNull(request.getResponseStatus());
		assertSame(request, result);
	}

	@Test
	void responseStatusAllowsEmptyString() {
		String status = "";
		CollectionAgencyInvolvementRequest result = request.responseStatus(status);
		assertEquals(status, request.getResponseStatus());
		assertSame(request, result);
	}

	@Test
	void responseStatusOverwritesPreviousValue() {
		String initialStatus = "PENDING";
		String newStatus = "FAILED";
		request.responseStatus(initialStatus);
		request.responseStatus(newStatus);
		assertEquals(newStatus, request.getResponseStatus());
	}

	@ParameterizedTest
	@CsvSource({ "SUCCESS", "PENDING", "FAILED", "IN_PROGRESS" })
	void responseStatusAcceptsValidValues(String status) {
		CollectionAgencyInvolvementRequest result = request.responseStatus(status);
		assertEquals(status, request.getResponseStatus());
		assertSame(request, result);
	}

	@ParameterizedTest
	@NullSource
	@ValueSource(strings = { "", "   ", "invalid_status" })
	void responseStatusHandlesInvalidValues(String status) {
		CollectionAgencyInvolvementRequest result = request.responseStatus(status);
		assertEquals(status, request.getResponseStatus());
		assertSame(request, result);
	}

}