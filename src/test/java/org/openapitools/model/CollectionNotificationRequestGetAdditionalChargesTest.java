// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=getAdditionalCharges_1060f1ded3
ROOST_METHOD_SIG_HASH=getAdditionalCharges_c99395080a

Here are the test scenarios for the getAdditionalCharges method:

Scenario 1: Verify getAdditionalCharges returns the correct value

Details:
  TestName: getAdditionalChargesReturnsCorrectValue
  Description: This test verifies that the getAdditionalCharges method returns the correct value of the private additionalCharges field.
Execution:
  Arrange: Set the private additionalCharges field to a known value using reflection.
  Act: Call the getAdditionalCharges method.
  Assert: Assert that the returned value matches the known value set in the arrange step.
Validation:
  The assertion verifies that the getter method properly returns the value of the private field.
  This test ensures the basic functionality of the getter method is working as expected.

Scenario 2: Verify getAdditionalCharges returns a non-null value

Details:
  TestName: getAdditionalChargesReturnsNonNull
  Description: This test verifies that the getAdditionalCharges method always returns a non-null value, as specified by the @NotNull annotation.
Execution:
  Arrange: No specific arrangement needed.
  Act: Call the getAdditionalCharges method.
  Assert: Assert that the returned value is not null.
Validation:
  The assertion verifies that the @NotNull constraint is properly enforced by the method.
  This test ensures the method adheres to the contract specified by the annotation.

Scenario 3: Verify getAdditionalCharges JSON property name

Details:
  TestName: getAdditionalChargesJsonPropertyName
  Description: This test verifies that the getAdditionalCharges method is annotated with @JsonProperty("additionalCharges"), indicating the correct JSON property name.
Execution:
  Arrange: No specific arrangement needed.
  Act: Inspect the getAdditionalCharges method using reflection.
  Assert: Assert that the method is annotated with @JsonProperty("additionalCharges").
Validation:
  The assertion verifies that the method is correctly annotated for JSON serialization.
  This test ensures the method will be properly serialized to the expected JSON property name.

Scenario 4: Verify getAdditionalCharges schema name and required mode

Details:
  TestName: getAdditionalChargesSchemaNameAndRequiredMode
  Description: This test verifies that the getAdditionalCharges method is annotated with @Schema(name = "additionalCharges", requiredMode = Schema.RequiredMode.REQUIRED), indicating the correct schema name and required mode.
Execution:
  Arrange: No specific arrangement needed.
  Act: Inspect the getAdditionalCharges method using reflection.
  Assert: Assert that the method is annotated with @Schema(name = "additionalCharges", requiredMode = Schema.RequiredMode.REQUIRED).
Validation:
  The assertion verifies that the method is correctly annotated with the expected schema name and required mode.
  This test ensures the method adheres to the OpenAPI specification for documentation and validation purposes.

These test scenarios cover the basic functionality, null safety, JSON serialization, and OpenAPI schema compliance of the getAdditionalCharges method. Additional scenarios could be added based on specific business logic or integration with other parts of the application.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestGetAdditionalChargesTest {

	private CollectionNotificationRequest collectionNotificationRequest;

	@BeforeEach
	void setUp() {
		collectionNotificationRequest = new CollectionNotificationRequest();
	}

	@Test
	void getAdditionalChargesReturnsCorrectValue() throws Exception {
		// Arrange
		String expectedValue = "100.00";
		Field field = CollectionNotificationRequest.class.getDeclaredField("additionalCharges");
		field.setAccessible(true);
		field.set(collectionNotificationRequest, expectedValue);

		// Act
		String actualValue = collectionNotificationRequest.getAdditionalCharges();

		// Assert
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void getAdditionalChargesReturnsNonNull() {
		// Arrange
		// TODO: Set a non-null value for additionalCharges in the
		// CollectionNotificationRequest object

		// Act
		String actualValue = collectionNotificationRequest.getAdditionalCharges();

		// Assert
		assertNotNull(actualValue);
	}

	@Test
	void getAdditionalChargesJsonPropertyName() throws Exception {
		// Arrange
		Method method = CollectionNotificationRequest.class.getMethod("getAdditionalCharges");

		// Act
		JsonProperty annotation = method.getAnnotation(JsonProperty.class);

		// Assert
		assertNotNull(annotation);
		assertEquals("additionalCharges", annotation.value());
	}

	@Test
	void getAdditionalChargesSchemaNameAndRequiredMode() throws Exception {
		// Arrange
		Method method = CollectionNotificationRequest.class.getMethod("getAdditionalCharges");

		// Act
		Schema annotation = method.getAnnotation(Schema.class);

		// Assert
		assertNotNull(annotation);
		assertEquals("additionalCharges", annotation.name());
		assertEquals(Schema.RequiredMode.REQUIRED, annotation.requiredMode());
	}

}
