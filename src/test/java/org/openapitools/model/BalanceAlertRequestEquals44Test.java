// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_c9d1d3c567
ROOST_METHOD_SIG_HASH=equals_f2d574000d

Here are the JUnit test scenarios for the provided `equals` method:

Scenario 1: Comparing object with itself

Details:
  TestName: equalsComparingWithSelf
  Description: This test verifies that the equals method returns true when comparing an object with itself.
Execution:
  Arrange: Create an instance of BalanceAlertRequest.
  Act: Invoke the equals method, passing the same instance as the argument.
  Assert: Use assertEquals to verify that the result is true.
Validation:
  The assertion checks that comparing an object with itself using the equals method returns true.
  This test ensures that the equals method adheres to the reflexive property of equality.

Scenario 2: Comparing with null

Details:
  TestName: equalsComparingWithNull
  Description: This test verifies that the equals method returns false when comparing an object with null.
Execution:
  Arrange: Create an instance of BalanceAlertRequest.
  Act: Invoke the equals method, passing null as the argument.
  Assert: Use assertEquals to verify that the result is false.
Validation:
  The assertion checks that comparing an object with null using the equals method returns false.
  This test ensures that the equals method correctly handles null comparisons.

Scenario 3: Comparing with an object of a different class

Details:
  TestName: equalsComparingWithDifferentClass
  Description: This test verifies that the equals method returns false when comparing an object with an instance of a different class.
Execution:
  Arrange: Create an instance of BalanceAlertRequest and an instance of a different class (e.g., String).
  Act: Invoke the equals method, passing the instance of the different class as the argument.
  Assert: Use assertEquals to verify that the result is false.
Validation:
  The assertion checks that comparing an object with an instance of a different class using the equals method returns false.
  This test ensures that the equals method correctly distinguishes between objects of different classes.

Scenario 4: Comparing with an object having the same property values

Details:
  TestName: equalsComparingWithSamePropertyValues
  Description: This test verifies that the equals method returns true when comparing two objects with the same property values.
Execution:
  Arrange: Create two instances of BalanceAlertRequest with the same values for paymentDueDate, currentDate, and cardLast4.
  Act: Invoke the equals method, passing one instance as the argument to compare with the other instance.
  Assert: Use assertEquals to verify that the result is true.
Validation:
  The assertion checks that comparing two objects with the same property values using the equals method returns true.
  This test ensures that the equals method correctly identifies objects with identical property values as equal.

Scenario 5: Comparing with an object having different property values

Details:
  TestName: equalsComparingWithDifferentPropertyValues
  Description: This test verifies that the equals method returns false when comparing two objects with different property values.
Execution:
  Arrange: Create two instances of BalanceAlertRequest with different values for paymentDueDate, currentDate, or cardLast4.
  Act: Invoke the equals method, passing one instance as the argument to compare with the other instance.
  Assert: Use assertEquals to verify that the result is false.
Validation:
  The assertion checks that comparing two objects with different property values using the equals method returns false.
  This test ensures that the equals method correctly identifies objects with different property values as not equal.

These test scenarios cover various aspects of the `equals` method, including comparing an object with itself, null, objects of different classes, and objects with the same or different property values. They help ensure that the `equals` method behaves as expected and follows the contract of the `equals` method in Java.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import java.time.LocalDate;
import java.util.stream.Stream;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestEquals44Test {
    @Test
    void equalsComparingWithSelf() {
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest()
                .paymentDueDate(LocalDate.of(2023, 6, 15))
                .currentDate(LocalDate.of(2023, 6, 10))
                .cardLast4("1234");
        Assertions.assertTrue(balanceAlertRequest.equals(balanceAlertRequest));
    }
    @Test
    void equalsComparingWithNull() {
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest()
                .paymentDueDate(LocalDate.of(2023, 6, 15))
                .currentDate(LocalDate.of(2023, 6, 10))
                .cardLast4("1234");
        Assertions.assertFalse(balanceAlertRequest.equals(null));
    }
    @Test
    void equalsComparingWithDifferentClass() {
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest()
                .paymentDueDate(LocalDate.of(2023, 6, 15))
                .currentDate(LocalDate.of(2023, 6, 10))
                .cardLast4("1234");
        String otherObject = "Not a BalanceAlertRequest";
        Assertions.assertFalse(balanceAlertRequest.equals(otherObject));
    }
    @Test
    void equalsComparingWithSamePropertyValues() {
        BalanceAlertRequest balanceAlertRequest1 = new BalanceAlertRequest()
                .paymentDueDate(LocalDate.of(2023, 6, 15))
                .currentDate(LocalDate.of(2023, 6, 10))
                .cardLast4("1234");
        BalanceAlertRequest balanceAlertRequest2 = new BalanceAlertRequest()
                .paymentDueDate(LocalDate.of(2023, 6, 15))
                .currentDate(LocalDate.of(2023, 6, 10))
                .cardLast4("1234");
        Assertions.assertTrue(balanceAlertRequest1.equals(balanceAlertRequest2));
    }
    @Test
    void equalsComparingWithDifferentPropertyValues() {
        BalanceAlertRequest balanceAlertRequest1 = new BalanceAlertRequest()
                .paymentDueDate(LocalDate.of(2023, 6, 15))
                .currentDate(LocalDate.of(2023, 6, 10))
                .cardLast4("1234");
        Stream.of(
                new BalanceAlertRequest()
                        .paymentDueDate(LocalDate.of(2023, 6, 20))
                        .currentDate(LocalDate.of(2023, 6, 10))
                        .cardLast4("1234"),
                new BalanceAlertRequest()
                        .paymentDueDate(LocalDate.of(2023, 6, 15))
                        .currentDate(LocalDate.of(2023, 6, 12))
                        .cardLast4("1234"),
                new BalanceAlertRequest()
                        .paymentDueDate(LocalDate.of(2023, 6, 15))
                        .currentDate(LocalDate.of(2023, 6, 10))
                        .cardLast4("5678")
        ).forEach(balanceAlertRequest2 -> Assertions.assertFalse(balanceAlertRequest1.equals(balanceAlertRequest2)));
    }
}