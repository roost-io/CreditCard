// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=additionalCharges_6fb76b3996
ROOST_METHOD_SIG_HASH=additionalCharges_a47610217a

Here are the generated JUnit test scenarios for the provided additionalCharges method:

Scenario 1: Test setting additional charges with a valid string value

Details:
  TestName: additionalChargesWithValidString()
  Description: This test verifies that the additionalCharges method correctly sets the additionalCharges field when provided with a valid string value and returns the current instance of CollectionNotificationRequest.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the additionalCharges method with a valid string value.
  Assert: Assert that the additionalCharges field is set to the provided value and the method returns the current instance of CollectionNotificationRequest.
Validation:
  The assertion ensures that the additionalCharges field is properly set and the method maintains the fluent interface by returning the current instance. This test is important to validate the basic functionality of setting the additionalCharges field.

Scenario 2: Test setting additional charges with null

Details:
  TestName: additionalChargesWithNull()
  Description: This test verifies that the additionalCharges method correctly handles setting the additionalCharges field to null and returns the current instance of CollectionNotificationRequest.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the additionalCharges method with null.
  Assert: Assert that the additionalCharges field is set to null and the method returns the current instance of CollectionNotificationRequest.
Validation:
  The assertion ensures that the additionalCharges field can be set to null without causing any exceptions and the method maintains the fluent interface by returning the current instance. This test is important to validate the behavior when setting the additionalCharges field to null.

Scenario 3: Test setting additional charges with an empty string

Details:
  TestName: additionalChargesWithEmptyString()
  Description: This test verifies that the additionalCharges method correctly handles setting the additionalCharges field to an empty string and returns the current instance of CollectionNotificationRequest.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the additionalCharges method with an empty string.
  Assert: Assert that the additionalCharges field is set to an empty string and the method returns the current instance of CollectionNotificationRequest.
Validation:
  The assertion ensures that the additionalCharges field can be set to an empty string without causing any exceptions and the method maintains the fluent interface by returning the current instance. This test is important to validate the behavior when setting the additionalCharges field to an empty string.

Scenario 4: Test setting additional charges with a string containing only whitespace

Details:
  TestName: additionalChargesWithWhitespaceString()
  Description: This test verifies that the additionalCharges method correctly handles setting the additionalCharges field to a string containing only whitespace characters and returns the current instance of CollectionNotificationRequest.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the additionalCharges method with a string containing only whitespace characters.
  Assert: Assert that the additionalCharges field is set to the provided whitespace string and the method returns the current instance of CollectionNotificationRequest.
Validation:
  The assertion ensures that the additionalCharges field can be set to a string containing only whitespace characters without causing any exceptions and the method maintains the fluent interface by returning the current instance. This test is important to validate the behavior when setting the additionalCharges field to a whitespace string.

Note: The provided method does not have any explicit validation or error handling for the additionalCharges parameter, so there are no specific edge cases or error scenarios to test beyond the basic functionality of setting the field value.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import static org.junit.jupiter.api.Assertions.*;

class CollectionNotificationRequestAdditionalChargesTest {

	private CollectionNotificationRequest request;

	@BeforeEach
	void setUp() {
		request = new CollectionNotificationRequest();
	}

	@Test
	void additionalChargesWithValidString() {
		String additionalCharges = "10.00";
		CollectionNotificationRequest result = request.additionalCharges(additionalCharges);
		assertEquals(additionalCharges, request.getAdditionalCharges());
		assertSame(request, result);
	}

	@Test
	void additionalChargesWithNull() {
		CollectionNotificationRequest result = request.additionalCharges(null);
		assertNull(request.getAdditionalCharges());
		assertSame(request, result);
	}

	@Test
	void additionalChargesWithEmptyString() {
		String additionalCharges = "";
		CollectionNotificationRequest result = request.additionalCharges(additionalCharges);
		assertEquals(additionalCharges, request.getAdditionalCharges());
		assertSame(request, result);
	}

	@ParameterizedTest
	@ValueSource(strings = { " ", "\t", "\n" })
	void additionalChargesWithWhitespaceString(String additionalCharges) {
		CollectionNotificationRequest result = request.additionalCharges(additionalCharges);
		assertEquals(additionalCharges, request.getAdditionalCharges());
		assertSame(request, result);
	}

	// TODO: Add test case for additionalCharges with invalid input (e.g., non-numeric
	// string)
	// TODO: Consider validating the format of the additionalCharges string in the
	// business logic

}
