// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=additionalCharges_6fb76b3996
ROOST_METHOD_SIG_HASH=additionalCharges_a47610217a

Here are the JUnit test scenarios for the provided additionalCharges method:

Scenario 1: Test setting additional charges

Details:
  TestName: additionalChargesSetsValue
  Description: This test checks if the additionalCharges method correctly sets the additionalCharges field when a valid string is provided.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the additionalCharges method with a sample string value.
  Assert: Use assertEquals to verify that the additionalCharges field is set to the provided value.
Validation:
  The assertion verifies that the setter method works as expected by updating the private field.
  It ensures that the fluent interface is implemented correctly, allowing chained method calls.

Scenario 2: Test returning the instance

Details:
  TestName: additionalChargesReturnsInstance
  Description: This test verifies that the additionalCharges method returns the current instance of CollectionNotificationRequest, enabling method chaining.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the additionalCharges method with a sample string and store the returned value.
  Assert: Use assertSame to check if the returned value is the same instance as the original object.
Validation:
  The assertion confirms that the fluent interface pattern is followed, allowing developers to chain multiple method calls.
  It ensures that the method does not create a new instance but modifies and returns the existing one.

Scenario 3: Test setting additional charges to null

Details:
  TestName: additionalChargesAllowsNull
  Description: This test checks if the additionalCharges method allows setting the additionalCharges field to null.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the additionalCharges method with a null value.
  Assert: Use assertNull to verify that the additionalCharges field is set to null.
Validation:
  The assertion ensures that the method handles null values gracefully without throwing exceptions.
  It validates that the field can be reset or cleared by passing null to the setter method.

Scenario 4: Test setting additional charges to an empty string

Details:
  TestName: additionalChargesAllowsEmptyString
  Description: This test verifies that the additionalCharges method allows setting the additionalCharges field to an empty string.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the additionalCharges method with an empty string.
  Assert: Use assertEquals to check if the additionalCharges field is set to an empty string.
Validation:
  The assertion confirms that the method treats empty strings as valid input and sets the field accordingly.
  It ensures that the method does not have any minimum length constraints on the input string.

These test scenarios cover the basic functionality of the additionalCharges method, including setting valid values, handling null and empty strings, and verifying the fluent interface pattern. Additional test scenarios can be added based on specific validation rules or edge cases relevant to the application's requirements.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestAdditionalChargesTest {

	@Test
	@DisplayName("Test setting additional charges")
	void additionalChargesSetsValue() {
		// Arrange
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		String expectedCharges = "10.00";
		// Act
		request.additionalCharges(expectedCharges);
		// Assert
		assertEquals(expectedCharges, request.getAdditionalCharges());
	}

	@Test
	@DisplayName("Test returning the instance")
	void additionalChargesReturnsInstance() {
		// Arrange
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		// Act
		CollectionNotificationRequest result = request.additionalCharges("5.00");
		// Assert
		assertSame(request, result);
	}

	@Test
	@DisplayName("Test setting additional charges to null")
	void additionalChargesAllowsNull() {
		// Arrange
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		// Act
		request.additionalCharges(null);
		// Assert
		assertNull(request.getAdditionalCharges());
	}

	@ParameterizedTest
	@CsvSource({ "''", "' '", "'   '" })
	@DisplayName("Test setting additional charges to an empty string")
	void additionalChargesAllowsEmptyString(String emptyString) {
		// Arrange
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		// Act
		request.additionalCharges(emptyString);
		// Assert
		assertEquals(emptyString, request.getAdditionalCharges());
	}

}