// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=getCardLast4_59984ab924
ROOST_METHOD_SIG_HASH=getCardLast4_caa9c9adf0

Based on the provided method and imports, here are the generated test scenarios:

Scenario 1: Valid Card Last 4 Digits

Details:
  TestName: validCardLast4.
  Description: This test verifies that the getCardLast4 method returns the correct last 4 digits of the card number when a valid value is set.
Execution:
  Arrange: Create an instance of the class containing the getCardLast4 method and set a valid card number.
  Act: Call the getCardLast4 method.
  Assert: Assert that the returned value matches the expected last 4 digits of the card number.
Validation:
  The assertion ensures that the getCardLast4 method correctly retrieves and returns the last 4 digits of the card number.
  This test is important to validate that the method functions as expected and provides the correct information for further processing or display purposes.

Scenario 2: Empty Card Last 4 Digits

Details:
  TestName: emptyCardLast4.
  Description: This test checks the behavior of the getCardLast4 method when the card number is empty or not set.
Execution:
  Arrange: Create an instance of the class containing the getCardLast4 method and leave the card number empty or unset.
  Act: Call the getCardLast4 method.
  Assert: Assert that the returned value is either null or an empty string, depending on the expected behavior.
Validation:
  The assertion verifies that the getCardLast4 method handles the case when the card number is not available gracefully.
  This test ensures that the method does not throw any exceptions and returns an appropriate value to indicate the absence of card information.

Scenario 3: Card Last 4 Digits with Less Than 4 Characters

Details:
  TestName: cardLast4WithLessThan4Chars.
  Description: This test examines the behavior of the getCardLast4 method when the card number has less than 4 characters.
Execution:
  Arrange: Create an instance of the class containing the getCardLast4 method and set a card number with less than 4 characters.
  Act: Call the getCardLast4 method.
  Assert: Assert that the returned value is either the entire card number or an appropriate error message, based on the expected behavior.
Validation:
  The assertion checks how the getCardLast4 method handles a card number with insufficient characters.
  This test verifies that the method either returns the entire card number or provides an error message to indicate an invalid card number format.

Scenario 4: Card Last 4 Digits with Non-Numeric Characters

Details:
  TestName: cardLast4WithNonNumericChars.
  Description: This test assesses the behavior of the getCardLast4 method when the card number contains non-numeric characters.
Execution:
  Arrange: Create an instance of the class containing the getCardLast4 method and set a card number with non-numeric characters.
  Act: Call the getCardLast4 method.
  Assert: Assert that the returned value is either the last 4 numeric characters or an appropriate error message, depending on the expected behavior.
Validation:
  The assertion verifies how the getCardLast4 method handles a card number with non-numeric characters.
  This test ensures that the method either extracts the last 4 numeric characters or provides an error message to indicate an invalid card number format.

Note: The actual implementation of the test scenarios may vary based on the specific testing framework and the complete class structure. The provided scenarios serve as a guideline for creating comprehensive tests for the getCardLast4 method.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

class BalanceAlertRequestGetCardLast4739Test {
    @Test
    void validCardLast4() {
        // Arrange
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
        balanceAlertRequest.setCardLast4("1234");
        // Act
        String result = balanceAlertRequest.getCardLast4();
        // Assert
        Assertions.assertEquals("1234", result);
    }
    
    @Test
    void emptyCardLast4() {
        // Arrange
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
        // Act
        String result = balanceAlertRequest.getCardLast4();
        // Assert
        Assertions.assertNull(result);
    }
    
    @ParameterizedTest
    @CsvSource({
            "123",
            "12",
            "1"
    })
    void cardLast4WithLessThan4Chars(String cardLast4) {
        // Arrange
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
        balanceAlertRequest.setCardLast4(cardLast4);
        // Act
        String result = balanceAlertRequest.getCardLast4();
        // Assert
        Assertions.assertEquals(cardLast4, result);
    }
    
    @ParameterizedTest
    @CsvSource({
            "1234abc",
            "abc1234",
            "12ab34",
            "ab12cd34"
    })
    void cardLast4WithNonNumericChars(String cardLast4) {
        // Arrange
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
        balanceAlertRequest.setCardLast4(cardLast4);
        // Act
        String result = balanceAlertRequest.getCardLast4();
        // Assert
        Assertions.assertEquals(cardLast4, result);
        // The assertion should expect the actual value returned by getCardLast4()
        // instead of a modified expected value.
    }
}
