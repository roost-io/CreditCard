// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setCardLast4_1ec3bfb1aa
ROOST_METHOD_SIG_HASH=setCardLast4_67db513785

Here are some JUnit test scenarios for the `setCardLast4` method:

Scenario 1: Valid Card Last 4 Digits

Details:
  TestName: setCardLast4WithValidInput
  Description: This test checks if the `setCardLast4` method correctly sets the `cardLast4` property when provided with a valid input of exactly 4 digits.
Execution:
  Arrange: Create an instance of the class containing the `setCardLast4` method.
  Act: Invoke the `setCardLast4` method with a valid 4-digit string (e.g., "1234").
  Assert: Use JUnit assertions to verify that the `cardLast4` property of the instance is set to the provided value.
Validation:
  The assertion verifies that the `setCardLast4` method correctly sets the `cardLast4` property when given a valid 4-digit input.
  This test ensures that the method behaves as expected for the normal use case of setting the last 4 digits of a card number.

Scenario 2: Empty Card Last 4 Digits

Details:
  TestName: setCardLast4WithEmptyInput
  Description: This test checks if the `setCardLast4` method handles an empty string input correctly by setting the `cardLast4` property to null or an empty string.
Execution:
  Arrange: Create an instance of the class containing the `setCardLast4` method.
  Act: Invoke the `setCardLast4` method with an empty string.
  Assert: Use JUnit assertions to verify that the `cardLast4` property of the instance is set to null or an empty string.
Validation:
  The assertion verifies that the `setCardLast4` method handles an empty string input gracefully.
  This test ensures that the method does not throw an exception or set an invalid value when provided with an empty string.

Scenario 3: Card Last 4 Digits with Less Than 4 Digits

Details:
  TestName: setCardLast4WithLessThan4Digits
  Description: This test checks if the `setCardLast4` method handles an input with less than 4 digits correctly by setting the `cardLast4` property to the provided value or throwing an appropriate exception.
Execution:
  Arrange: Create an instance of the class containing the `setCardLast4` method.
  Act: Invoke the `setCardLast4` method with a string containing less than 4 digits (e.g., "123").
  Assert: Use JUnit assertions to verify that the `cardLast4` property of the instance is set to the provided value or that an appropriate exception is thrown.
Validation:
  The assertion verifies that the `setCardLast4` method handles an input with less than 4 digits based on the expected behavior defined in the requirements.
  This test ensures that the method either sets the `cardLast4` property to the provided value or throws an exception, depending on the desired behavior.

Scenario 4: Card Last 4 Digits with More Than 4 Digits

Details:
  TestName: setCardLast4WithMoreThan4Digits
  Description: This test checks if the `setCardLast4` method handles an input with more than 4 digits correctly by setting the `cardLast4` property to the last 4 digits of the provided value or throwing an appropriate exception.
Execution:
  Arrange: Create an instance of the class containing the `setCardLast4` method.
  Act: Invoke the `setCardLast4` method with a string containing more than 4 digits (e.g., "123456").
  Assert: Use JUnit assertions to verify that the `cardLast4` property of the instance is set to the last 4 digits of the provided value or that an appropriate exception is thrown.
Validation:
  The assertion verifies that the `setCardLast4` method handles an input with more than 4 digits based on the expected behavior defined in the requirements.
  This test ensures that the method either sets the `cardLast4` property to the last 4 digits of the provided value or throws an exception, depending on the desired behavior.

Scenario 5: Card Last 4 Digits with Non-Digit Characters

Details:
  TestName: setCardLast4WithNonDigitCharacters
  Description: This test checks if the `setCardLast4` method handles an input containing non-digit characters correctly by throwing an appropriate exception or ignoring the non-digit characters.
Execution:
  Arrange: Create an instance of the class containing the `setCardLast4` method.
  Act: Invoke the `setCardLast4` method with a string containing non-digit characters (e.g., "123a").
  Assert: Use JUnit assertions to verify that an appropriate exception is thrown or that the `cardLast4` property of the instance is set to the digits extracted from the provided value.
Validation:
  The assertion verifies that the `setCardLast4` method handles an input with non-digit characters based on the expected behavior defined in the requirements.
  This test ensures that the method either throws an exception or ignores the non-digit characters and sets the `cardLast4` property accordingly.

These test scenarios cover various cases for the `setCardLast4` method, including valid input, empty input, input with less than 4 digits, input with more than 4 digits, and input with non-digit characters. The specific assertions and expected behavior may vary based on the requirements and implementation of the method.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionAgencyInvolvementRequestSetCardLast4Test {

	private CollectionAgencyInvolvementRequest request;

	@BeforeEach
	void setUp() {
		request = new CollectionAgencyInvolvementRequest();
	}

	@Test
	void setCardLast4WithValidInput() {
		String validCardLast4 = "1234";
		request.setCardLast4(validCardLast4);
		assertEquals(validCardLast4, request.getCardLast4());
	}

	@Test
	void setCardLast4WithEmptyInput() {
		String emptyCardLast4 = "";
		request.setCardLast4(emptyCardLast4);
		assertEquals(emptyCardLast4, request.getCardLast4());
	}

	@Test
	void setCardLast4WithNull() {
		request.setCardLast4(null);
		assertNull(request.getCardLast4());
	}

	@ParameterizedTest
	@ValueSource(strings = { "123", "12", "1" })
	void setCardLast4WithLessThan4Digits(String cardLast4) {
		request.setCardLast4(cardLast4);
		assertEquals(cardLast4, request.getCardLast4());
	}

	@ParameterizedTest
	@ValueSource(strings = { "12345", "123456", "1234567890" })
	void setCardLast4WithMoreThan4Digits(String cardLast4) {
		request.setCardLast4(cardLast4);
		// The setCardLast4 method should only store the last 4 digits
		assertEquals(cardLast4.substring(cardLast4.length() - 4), request.getCardLast4());
	}

	@ParameterizedTest
	@ValueSource(strings = { "123a", "12b4", "1c3d" })
	void setCardLast4WithNonDigitCharacters(String cardLast4) {
		request.setCardLast4(cardLast4);
		// The setCardLast4 method should remove non-digit characters
		assertEquals(cardLast4.replaceAll("\\D", ""), request.getCardLast4());
	}

}
