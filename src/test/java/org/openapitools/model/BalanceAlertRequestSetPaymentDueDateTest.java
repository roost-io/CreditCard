// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setPaymentDueDate_c97ef99bea
ROOST_METHOD_SIG_HASH=setPaymentDueDate_b548b87531

Here are some JUnit test scenarios for the setPaymentDueDate method:

Scenario 1: Setting a valid payment due date

Details:
  TestName: setValidPaymentDueDate()
  Description: This test checks if the setPaymentDueDate method correctly sets a valid payment due date.
Execution:
  Arrange: Create an instance of the class containing the setPaymentDueDate method.
  Act: Invoke setPaymentDueDate with a valid LocalDate instance representing a future date.
  Assert: Use assertEquals to verify that the paymentDueDate field is set to the provided value.
Validation:
  The assertion ensures that the method correctly assigns the provided payment due date to the paymentDueDate field.
  This test is important to validate that the setter method functions as expected for valid input.

Scenario 2: Setting payment due date to null

Details:
  TestName: setPaymentDueDateToNull()
  Description: This test verifies the behavior when setting the payment due date to null.
Execution:
  Arrange: Create an instance of the class containing the setPaymentDueDate method.
  Act: Invoke setPaymentDueDate with a null value.
  Assert: Use assertNull to check if the paymentDueDate field is set to null.
Validation:
  The assertion confirms that the method allows setting the payment due date to null.
  This test is relevant if null is an acceptable value for the paymentDueDate field based on the application's requirements.

Scenario 3: Setting payment due date to the current date

Details:
  TestName: setPaymentDueDateToCurrentDate()
  Description: This test checks the behavior when setting the payment due date to the current date.
Execution:
  Arrange: Create an instance of the class and set the currentDate field to the current date using LocalDate.now().
  Act: Invoke setPaymentDueDate with LocalDate.now() as the argument.
  Assert: Use assertEquals to verify that the paymentDueDate field is set to the current date.
Validation:
  The assertion ensures that the method correctly handles setting the payment due date to the current date.
  This test is important if the application allows setting the payment due date to the current date.

Scenario 4: Setting payment due date to a past date

Details:
  TestName: setPaymentDueDateToPastDate()
  Description: This test verifies the behavior when setting the payment due date to a past date.
Execution:
  Arrange: Create an instance of the class containing the setPaymentDueDate method.
  Act: Invoke setPaymentDueDate with a LocalDate instance representing a past date.
  Assert: Use an appropriate assertion based on the expected behavior (e.g., assertThrows if an exception is expected).
Validation:
  The assertion validates how the method handles setting the payment due date to a past date.
  This test is crucial to ensure that the application properly deals with invalid past dates based on the business rules.

Note: The exact assertions and validations may vary depending on the specific requirements and constraints of the application regarding payment due dates.

These test scenarios cover different aspects of the setPaymentDueDate method, including setting valid and invalid dates, handling null values, and checking the behavior when setting the current date. Additional test scenarios can be added based on other edge cases or specific requirements of the application.
*/

// ********RoostGPT********
package org.openapitools.model;

import java.time.LocalDate;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestSetPaymentDueDateTest {

	private BalanceAlertRequest balanceAlertRequest;

	@BeforeEach
	void setUp() {
		balanceAlertRequest = new BalanceAlertRequest();
	}

	@Test
	void setValidPaymentDueDate() {
		LocalDate futureDate = LocalDate.now().plusDays(7);
		balanceAlertRequest.setPaymentDueDate(futureDate);
		assertEquals(futureDate, balanceAlertRequest.getPaymentDueDate());
	}

	@Test
	void setPaymentDueDateToNull() {
		balanceAlertRequest.setPaymentDueDate(null);
		assertNull(balanceAlertRequest.getPaymentDueDate());
	}

	@Test
	void setPaymentDueDateToCurrentDate() {
		LocalDate currentDate = LocalDate.now();
		balanceAlertRequest.setCurrentDate(currentDate);
		balanceAlertRequest.setPaymentDueDate(currentDate);
		assertEquals(currentDate, balanceAlertRequest.getPaymentDueDate());
	}

	@Test
	void setPaymentDueDateToPastDate() {
		LocalDate pastDate = LocalDate.now().minusDays(1);
		balanceAlertRequest.setPaymentDueDate(pastDate);
		assertEquals(pastDate, balanceAlertRequest.getPaymentDueDate());
	}

}