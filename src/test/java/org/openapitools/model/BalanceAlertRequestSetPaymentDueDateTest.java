// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setPaymentDueDate_c97ef99bea
ROOST_METHOD_SIG_HASH=setPaymentDueDate_b548b87531

Here are the JUnit test scenarios for the provided setPaymentDueDate method:

Scenario 1: Setting a Valid Payment Due Date

Details:
  TestName: setValidPaymentDueDate()
  Description: This test checks if the setPaymentDueDate method correctly sets a valid LocalDate as the payment due date.
Execution:
  Arrange: Create an instance of the class containing the setPaymentDueDate method.
  Act: Call the setPaymentDueDate method with a valid LocalDate instance.
  Assert: Use assertEquals to verify that the paymentDueDate field of the object is set to the provided LocalDate.
Validation:
  The assertion verifies that the setPaymentDueDate method properly sets the paymentDueDate field when provided with a valid LocalDate.
  This test ensures that the method correctly updates the payment due date, which is crucial for tracking payment deadlines in the application.

Scenario 2: Setting Payment Due Date to null

Details:
  TestName: setPaymentDueDateToNull()
  Description: This test checks if the setPaymentDueDate method handles setting the payment due date to null correctly.
Execution:
  Arrange: Create an instance of the class containing the setPaymentDueDate method.
  Act: Call the setPaymentDueDate method with a null value.
  Assert: Use assertNull to verify that the paymentDueDate field of the object is set to null.
Validation:
  The assertion verifies that the setPaymentDueDate method allows setting the paymentDueDate field to null.
  This test ensures that the method can handle cases where the payment due date is not specified or needs to be cleared.

Scenario 3: Setting Payment Due Date to a Past Date

Details:
  TestName: setPaymentDueDateToPastDate()
  Description: This test checks if the setPaymentDueDate method allows setting the payment due date to a date in the past.
Execution:
  Arrange: Create an instance of the class containing the setPaymentDueDate method and create a LocalDate instance representing a past date.
  Act: Call the setPaymentDueDate method with the past date.
  Assert: Use assertEquals to verify that the paymentDueDate field of the object is set to the provided past date.
Validation:
  The assertion verifies that the setPaymentDueDate method allows setting the paymentDueDate field to a date in the past.
  This test ensures that the method does not impose any restrictions on the date value and can handle past dates if required by the application's business logic.

Scenario 4: Setting Payment Due Date to a Future Date

Details:
  TestName: setPaymentDueDateToFutureDate()
  Description: This test checks if the setPaymentDueDate method allows setting the payment due date to a date in the future.
Execution:
  Arrange: Create an instance of the class containing the setPaymentDueDate method and create a LocalDate instance representing a future date.
  Act: Call the setPaymentDueDate method with the future date.
  Assert: Use assertEquals to verify that the paymentDueDate field of the object is set to the provided future date.
Validation:
  The assertion verifies that the setPaymentDueDate method allows setting the paymentDueDate field to a date in the future.
  This test ensures that the method can handle future dates, which is important for setting payment due dates that are yet to occur.

These test scenarios cover different aspects of the setPaymentDueDate method, including setting a valid date, handling null values, and allowing past and future dates. They ensure that the method behaves as expected and can handle various input scenarios.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.time.LocalDate;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestSetPaymentDueDateTest {

	private BalanceAlertRequest balanceAlertRequest;

	@BeforeEach
	void setUp() {
		balanceAlertRequest = new BalanceAlertRequest();
	}

	@Test
	void setValidPaymentDueDate() {
		LocalDate validDate = LocalDate.now();
		balanceAlertRequest.setPaymentDueDate(validDate);
		assertEquals(validDate, balanceAlertRequest.getPaymentDueDate());
	}

	@Test
	void setPaymentDueDateToNull() {
		balanceAlertRequest.setPaymentDueDate(null);
		assertNull(balanceAlertRequest.getPaymentDueDate());
	}

	@ParameterizedTest
	@MethodSource("pastAndFutureDates")
	void setPaymentDueDateToPastAndFutureDate(LocalDate date) {
		balanceAlertRequest.setPaymentDueDate(date);
		assertEquals(date, balanceAlertRequest.getPaymentDueDate());
	}

	private static Stream<Arguments> pastAndFutureDates() {
		return Stream.of(Arguments.of(LocalDate.now().minusDays(1)), Arguments.of(LocalDate.now().plusDays(1)));
	}

}