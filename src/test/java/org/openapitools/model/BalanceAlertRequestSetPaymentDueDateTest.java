// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setPaymentDueDate_c97ef99bea
ROOST_METHOD_SIG_HASH=setPaymentDueDate_b548b87531

Here are the JUnit test scenarios for the provided setPaymentDueDate method:

Scenario 1: Setting a Valid Payment Due Date

Details:
  TestName: setValidPaymentDueDate().
  Description: This test checks if the setPaymentDueDate method correctly sets a valid payment due date.
Execution:
  Arrange: Create an instance of the class containing the setPaymentDueDate method.
  Act: Invoke setPaymentDueDate with a valid LocalDate instance representing a future date.
  Assert: Use assertEquals to verify that the paymentDueDate field is set to the provided date.
Validation:
  The assertion verifies that the paymentDueDate field is updated correctly when a valid date is provided.
  This test ensures the basic functionality of setting a payment due date works as expected.

Scenario 2: Setting Payment Due Date to null

Details:
  TestName: setPaymentDueDateToNull().
  Description: This test checks the behavior when setting the payment due date to null.
Execution:
  Arrange: Create an instance of the class containing the setPaymentDueDate method.
  Act: Invoke setPaymentDueDate with a null value.
  Assert: Use assertNull to verify that the paymentDueDate field is set to null.
Validation:
  The assertion verifies that the paymentDueDate field is set to null when a null value is provided.
  This test ensures the method handles null input gracefully and updates the field accordingly.

Scenario 3: Setting Payment Due Date to Past Date

Details:
  TestName: setPaymentDueDateToPastDate().
  Description: This test checks the behavior when setting the payment due date to a past date.
Execution:
  Arrange: Create an instance of the class containing the setPaymentDueDate method.
  Act: Invoke setPaymentDueDate with a LocalDate instance representing a past date.
  Assert: Use assertTrue or assertFalse to verify if setting a past due date is allowed based on business rules.
Validation:
  The assertion verifies whether setting a past payment due date is permitted or restricted.
  This test ensures the method enforces any business rules related to past due dates.

Scenario 4: Setting Payment Due Date Equal to Current Date

Details:
  TestName: setPaymentDueDateToCurrentDate().
  Description: This test checks the behavior when setting the payment due date to the current date.
Execution:
  Arrange: Create an instance of the class and set the currentDate field to today's date.
  Act: Invoke setPaymentDueDate with a LocalDate instance representing the current date.
  Assert: Use assertEquals to verify that the paymentDueDate is set to the current date.
Validation:
  The assertion verifies that setting the payment due date to the current date is allowed.
  This test ensures same-day payments are supported if that aligns with business requirements.

Scenario 5: Setting Payment Due Date with Last 4 Digits of Card

Details:
  TestName: setPaymentDueDateWithCardLast4().
  Description: This test checks if setting the payment due date updates the cardLast4 field.
Execution:
  Arrange: Create an instance of the class and set the cardLast4 field to a sample value.
  Act: Invoke setPaymentDueDate with a valid LocalDate instance.
  Assert: Use assertEquals to verify that the cardLast4 field remains unchanged.
Validation:
  The assertion verifies that setting the payment due date does not modify the cardLast4 field.
  This test ensures proper encapsulation and separation of concerns between fields.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.time.LocalDate;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestSetPaymentDueDateTest {

	private BalanceAlertRequest balanceAlertRequest;

	@BeforeEach
	void setUp() {
		balanceAlertRequest = new BalanceAlertRequest();
	}

	@Test
	void setValidPaymentDueDate() {
		LocalDate futureDate = LocalDate.now().plusDays(7);
		balanceAlertRequest.setPaymentDueDate(futureDate);
		assertEquals(futureDate, balanceAlertRequest.getPaymentDueDate());
	}

	@Test
	void setPaymentDueDateToNull() {
		balanceAlertRequest.setPaymentDueDate(null);
		assertNull(balanceAlertRequest.getPaymentDueDate());
	}

	@Test
	void setPaymentDueDateToPastDate() {
		LocalDate pastDate = LocalDate.now().minusDays(1);
		balanceAlertRequest.setPaymentDueDate(pastDate);
		// Assuming setting a past due date is allowed
		assertEquals(pastDate, balanceAlertRequest.getPaymentDueDate());
		// If setting a past due date is not allowed, uncomment the following assertion
		// assertNotEquals(pastDate, balanceAlertRequest.getPaymentDueDate());
	}

	@Test
	void setPaymentDueDateToCurrentDate() {
		LocalDate currentDate = LocalDate.now();
		balanceAlertRequest.setCurrentDate(currentDate);
		balanceAlertRequest.setPaymentDueDate(currentDate);
		assertEquals(currentDate, balanceAlertRequest.getPaymentDueDate());
	}

	@Test
	void setPaymentDueDateWithCardLast4() {
		String cardLast4 = "1234";
		balanceAlertRequest.setCardLast4(cardLast4);
		LocalDate futureDate = LocalDate.now().plusDays(7);
		balanceAlertRequest.setPaymentDueDate(futureDate);
		assertEquals(cardLast4, balanceAlertRequest.getCardLast4());
	}

}