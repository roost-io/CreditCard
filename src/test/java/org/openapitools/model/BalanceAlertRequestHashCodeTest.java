// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=hashCode_583bda255d
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8

Here are some JUnit test scenarios for the provided hashCode() method:

Scenario 1: Test hashCode with all fields having non-null values

Details:
  TestName: hashCodeWithNonNullFields
  Description: This test verifies that the hashCode() method returns the expected hash code when all fields (paymentDueDate, currentDate, cardLast4) have non-null values.
Execution:
  Arrange: Create an instance of the class with non-null values for paymentDueDate, currentDate, and cardLast4.
  Act: Invoke the hashCode() method on the instance.
  Assert: Use assertEquals to compare the returned hash code with the expected hash code calculated using Objects.hash(paymentDueDate, currentDate, cardLast4).
Validation:
  The assertion verifies that the hashCode() method correctly calculates the hash code based on the non-null field values.
  This test ensures that the hashCode() method behaves as expected when all fields are populated.

Scenario 2: Test hashCode with null paymentDueDate

Details:
  TestName: hashCodeWithNullPaymentDueDate
  Description: This test checks if the hashCode() method handles a null paymentDueDate field correctly and returns the expected hash code.
Execution:
  Arrange: Create an instance of the class with null for paymentDueDate and non-null values for currentDate and cardLast4.
  Act: Invoke the hashCode() method on the instance.
  Assert: Use assertEquals to compare the returned hash code with the expected hash code calculated using Objects.hash(null, currentDate, cardLast4).
Validation:
  The assertion verifies that the hashCode() method correctly handles a null paymentDueDate field and calculates the hash code based on the remaining non-null fields.
  This test ensures that the hashCode() method does not throw exceptions and behaves as expected when paymentDueDate is null.

Scenario 3: Test hashCode with null currentDate

Details:
  TestName: hashCodeWithNullCurrentDate
  Description: This test checks if the hashCode() method handles a null currentDate field correctly and returns the expected hash code.
Execution:
  Arrange: Create an instance of the class with non-null values for paymentDueDate and cardLast4, and null for currentDate.
  Act: Invoke the hashCode() method on the instance.
  Assert: Use assertEquals to compare the returned hash code with the expected hash code calculated using Objects.hash(paymentDueDate, null, cardLast4).
Validation:
  The assertion verifies that the hashCode() method correctly handles a null currentDate field and calculates the hash code based on the remaining non-null fields.
  This test ensures that the hashCode() method does not throw exceptions and behaves as expected when currentDate is null.

Scenario 4: Test hashCode with null cardLast4

Details:
  TestName: hashCodeWithNullCardLast4
  Description: This test checks if the hashCode() method handles a null cardLast4 field correctly and returns the expected hash code.
Execution:
  Arrange: Create an instance of the class with non-null values for paymentDueDate and currentDate, and null for cardLast4.
  Act: Invoke the hashCode() method on the instance.
  Assert: Use assertEquals to compare the returned hash code with the expected hash code calculated using Objects.hash(paymentDueDate, currentDate, null).
Validation:
  The assertion verifies that the hashCode() method correctly handles a null cardLast4 field and calculates the hash code based on the remaining non-null fields.
  This test ensures that the hashCode() method does not throw exceptions and behaves as expected when cardLast4 is null.

Scenario 5: Test hashCode with all fields being null

Details:
  TestName: hashCodeWithAllFieldsNull
  Description: This test verifies that the hashCode() method returns the expected hash code when all fields (paymentDueDate, currentDate, cardLast4) are null.
Execution:
  Arrange: Create an instance of the class with null values for paymentDueDate, currentDate, and cardLast4.
  Act: Invoke the hashCode() method on the instance.
  Assert: Use assertEquals to compare the returned hash code with the expected hash code calculated using Objects.hash(null, null, null).
Validation:
  The assertion verifies that the hashCode() method correctly calculates the hash code even when all fields are null.
  This test ensures that the hashCode() method does not throw exceptions and behaves as expected when all fields are null.

These test scenarios cover different combinations of null and non-null values for the fields used in the hashCode() method. They ensure that the method handles null values correctly and returns the expected hash code in each scenario.
*/

// ********RoostGPT********
package org.openapitools.model;

import java.time.LocalDate;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Objects;

class BalanceAlertRequestHashCodeTest {

	@Test
	void hashCodeWithNonNullFields() {
		// Arrange
		LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		String cardLast4 = "1234";
		BalanceAlertRequest request = new BalanceAlertRequest(paymentDueDate, currentDate, cardLast4);

		// Act
		int actualHashCode = request.hashCode();

		// Assert
		int expectedHashCode = Objects.hash(paymentDueDate, currentDate, cardLast4);
		assertEquals(expectedHashCode, actualHashCode);
	}

	@Test
	void hashCodeWithNullPaymentDueDate() {
		// Arrange
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		String cardLast4 = "1234";
		BalanceAlertRequest request = new BalanceAlertRequest(null, currentDate, cardLast4);

		// Act
		int actualHashCode = request.hashCode();

		// Assert
		int expectedHashCode = Objects.hash(null, currentDate, cardLast4);
		assertEquals(expectedHashCode, actualHashCode);
	}

	@Test
	void hashCodeWithNullCurrentDate() {
		// Arrange
		LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
		String cardLast4 = "1234";
		BalanceAlertRequest request = new BalanceAlertRequest(paymentDueDate, null, cardLast4);

		// Act
		int actualHashCode = request.hashCode();

		// Assert
		int expectedHashCode = Objects.hash(paymentDueDate, null, cardLast4);
		assertEquals(expectedHashCode, actualHashCode);
	}

	@Test
	void hashCodeWithNullCardLast4() {
		// Arrange
		LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		BalanceAlertRequest request = new BalanceAlertRequest(paymentDueDate, currentDate, null);

		// Act
		int actualHashCode = request.hashCode();

		// Assert
		int expectedHashCode = Objects.hash(paymentDueDate, currentDate, null);
		assertEquals(expectedHashCode, actualHashCode);
	}

	@Test
	void hashCodeWithAllFieldsNull() {
		// Arrange
		BalanceAlertRequest request = new BalanceAlertRequest(null, null, null);

		// Act
		int actualHashCode = request.hashCode();

		// Assert
		int expectedHashCode = Objects.hash(null, null, null);
		assertEquals(expectedHashCode, actualHashCode);
	}

}
