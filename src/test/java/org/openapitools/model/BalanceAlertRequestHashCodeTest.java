// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=hashCode_b9a44f8c3f
ROOST_METHOD_SIG_HASH=hashCode_5a2657087a

Here are the JUnit test scenarios for the provided `hashCode()` method:

Scenario 1: Test hashCode with equal objects

Details:
  TestName: hashCodeWithEqualObjects()
  Description: This test verifies that the hashCode() method returns the same hash code for two objects with identical field values.
Execution:
  Arrange: Create two instances of the class with the same values for paymentDueDate, currentDate, and cardLast4.
  Act: Invoke the hashCode() method on both objects.
  Assert: Use assertEquals to verify that the hash codes of both objects are equal.
Validation:
  The assertion ensures that the hashCode() method follows the contract of returning the same hash code for equal objects.
  This test is important to validate the consistency and correctness of the hashCode() implementation.

Scenario 2: Test hashCode with different paymentDueDate

Details:
  TestName: hashCodeWithDifferentPaymentDueDate()
  Description: This test verifies that the hashCode() method returns different hash codes for objects with different paymentDueDate values.
Execution:
  Arrange: Create two instances of the class with different values for paymentDueDate but the same values for currentDate and cardLast4.
  Act: Invoke the hashCode() method on both objects.
  Assert: Use assertNotEquals to verify that the hash codes of both objects are not equal.
Validation:
  The assertion ensures that the hashCode() method generates different hash codes when the paymentDueDate field differs.
  This test validates that the hashCode() method considers the paymentDueDate field in its calculation.

Scenario 3: Test hashCode with different currentDate

Details:
  TestName: hashCodeWithDifferentCurrentDate()
  Description: This test verifies that the hashCode() method returns different hash codes for objects with different currentDate values.
Execution:
  Arrange: Create two instances of the class with different values for currentDate but the same values for paymentDueDate and cardLast4.
  Act: Invoke the hashCode() method on both objects.
  Assert: Use assertNotEquals to verify that the hash codes of both objects are not equal.
Validation:
  The assertion ensures that the hashCode() method generates different hash codes when the currentDate field differs.
  This test validates that the hashCode() method considers the currentDate field in its calculation.

Scenario 4: Test hashCode with different cardLast4

Details:
  TestName: hashCodeWithDifferentCardLast4()
  Description: This test verifies that the hashCode() method returns different hash codes for objects with different cardLast4 values.
Execution:
  Arrange: Create two instances of the class with different values for cardLast4 but the same values for paymentDueDate and currentDate.
  Act: Invoke the hashCode() method on both objects.
  Assert: Use assertNotEquals to verify that the hash codes of both objects are not equal.
Validation:
  The assertion ensures that the hashCode() method generates different hash codes when the cardLast4 field differs.
  This test validates that the hashCode() method considers the cardLast4 field in its calculation.

Scenario 5: Test hashCode with null fields

Details:
  TestName: hashCodeWithNullFields()
  Description: This test verifies that the hashCode() method handles null field values correctly.
Execution:
  Arrange: Create an instance of the class with null values for paymentDueDate, currentDate, and cardLast4.
  Act: Invoke the hashCode() method on the object.
  Assert: Use assertNotEquals to verify that the hash code is not equal to the hash code of an object with non-null field values.
Validation:
  The assertion ensures that the hashCode() method handles null field values correctly and generates a different hash code compared to objects with non-null field values.
  This test validates the robustness of the hashCode() method in handling null field values.

Note: The test scenarios assume the existence of a class that contains the `paymentDueDate`, `currentDate`, and `cardLast4` fields. Adjust the field names and types according to your actual class implementation.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import java.time.LocalDate;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestHashCodeTest {

	@Test
	void hashCodeWithEqualObjects() {
		// Arrange
		LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		String cardLast4 = "1234";
		BalanceAlertRequest request1 = new BalanceAlertRequest().paymentDueDate(paymentDueDate)
			.currentDate(currentDate)
			.cardLast4(cardLast4);
		BalanceAlertRequest request2 = new BalanceAlertRequest().paymentDueDate(paymentDueDate)
			.currentDate(currentDate)
			.cardLast4(cardLast4);
		// Act
		int hashCode1 = request1.hashCode();
		int hashCode2 = request2.hashCode();
		// Assert
		assertEquals(hashCode1, hashCode2);
	}

	@Test
	void hashCodeWithDifferentPaymentDueDate() {
		// Arrange
		LocalDate paymentDueDate1 = LocalDate.of(2023, 6, 15);
		LocalDate paymentDueDate2 = LocalDate.of(2023, 6, 20);
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		String cardLast4 = "1234";
		BalanceAlertRequest request1 = new BalanceAlertRequest().paymentDueDate(paymentDueDate1)
			.currentDate(currentDate)
			.cardLast4(cardLast4);
		BalanceAlertRequest request2 = new BalanceAlertRequest().paymentDueDate(paymentDueDate2)
			.currentDate(currentDate)
			.cardLast4(cardLast4);
		// Act
		int hashCode1 = request1.hashCode();
		int hashCode2 = request2.hashCode();
		// Assert
		assertNotEquals(hashCode1, hashCode2);
	}

	@Test
	void hashCodeWithDifferentCurrentDate() {
		// Arrange
		LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
		LocalDate currentDate1 = LocalDate.of(2023, 6, 10);
		LocalDate currentDate2 = LocalDate.of(2023, 6, 12);
		String cardLast4 = "1234";
		BalanceAlertRequest request1 = new BalanceAlertRequest().paymentDueDate(paymentDueDate)
			.currentDate(currentDate1)
			.cardLast4(cardLast4);
		BalanceAlertRequest request2 = new BalanceAlertRequest().paymentDueDate(paymentDueDate)
			.currentDate(currentDate2)
			.cardLast4(cardLast4);
		// Act
		int hashCode1 = request1.hashCode();
		int hashCode2 = request2.hashCode();
		// Assert
		assertNotEquals(hashCode1, hashCode2);
	}

	@Test
	void hashCodeWithDifferentCardLast4() {
		// Arrange
		LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		String cardLast4_1 = "1234";
		String cardLast4_2 = "5678";
		BalanceAlertRequest request1 = new BalanceAlertRequest().paymentDueDate(paymentDueDate)
			.currentDate(currentDate)
			.cardLast4(cardLast4_1);
		BalanceAlertRequest request2 = new BalanceAlertRequest().paymentDueDate(paymentDueDate)
			.currentDate(currentDate)
			.cardLast4(cardLast4_2);
		// Act
		int hashCode1 = request1.hashCode();
		int hashCode2 = request2.hashCode();
		// Assert
		assertNotEquals(hashCode1, hashCode2);
	}

	@Test
	void hashCodeWithNullFields() {
		// Arrange
		BalanceAlertRequest request1 = new BalanceAlertRequest().paymentDueDate(null).currentDate(null).cardLast4(null);
		BalanceAlertRequest request2 = new BalanceAlertRequest().paymentDueDate(LocalDate.of(2023, 6, 15))
			.currentDate(LocalDate.of(2023, 6, 10))
			.cardLast4("1234");
		// Act
		int hashCode1 = request1.hashCode();
		int hashCode2 = request2.hashCode();
		// Assert
		assertNotEquals(hashCode1, hashCode2);
	}

}