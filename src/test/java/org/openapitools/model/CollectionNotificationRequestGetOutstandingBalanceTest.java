// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=getOutstandingBalance_1281b37f2f
ROOST_METHOD_SIG_HASH=getOutstandingBalance_e3a9f0e1a0

Here are the JUnit test scenarios for the given getOutstandingBalance() method:

Scenario 1: Valid Outstanding Balance

Details:
  TestName: validOutstandingBalance()
  Description: This test verifies that the getOutstandingBalance() method returns the correct outstanding balance when a valid value is set.
Execution:
  Arrange: Create an instance of the class containing the getOutstandingBalance() method and set a valid outstanding balance value.
  Act: Call the getOutstandingBalance() method.
  Assert: Use assertEquals to compare the returned value with the expected outstanding balance.
Validation:
  The assertion ensures that the getOutstandingBalance() method correctly retrieves the outstanding balance value.
  This test is important to validate that the method returns the accurate outstanding balance when a valid value is present.

Scenario 2: Null Outstanding Balance

Details:
  TestName: nullOutstandingBalance()
  Description: This test checks the behavior of the getOutstandingBalance() method when the outstanding balance is set to null.
Execution:
  Arrange: Create an instance of the class containing the getOutstandingBalance() method and set the outstanding balance to null.
  Act: Call the getOutstandingBalance() method.
  Assert: Use assertNull to verify that the returned value is null.
Validation:
  The assertion confirms that the getOutstandingBalance() method handles null values correctly and returns null when the outstanding balance is not set.
  This test is crucial to ensure that the method does not throw any exceptions or return unexpected results when the outstanding balance is null.

Scenario 3: Empty Outstanding Balance

Details:
  TestName: emptyOutstandingBalance()
  Description: This test verifies the behavior of the getOutstandingBalance() method when the outstanding balance is set to an empty string.
Execution:
  Arrange: Create an instance of the class containing the getOutstandingBalance() method and set the outstanding balance to an empty string.
  Act: Call the getOutstandingBalance() method.
  Assert: Use assertEquals to compare the returned value with an empty string.
Validation:
  The assertion ensures that the getOutstandingBalance() method correctly returns an empty string when the outstanding balance is set to an empty string.
  This test is important to validate that the method handles empty string values appropriately and does not modify or trim the value.

Scenario 4: Numeric Outstanding Balance

Details:
  TestName: numericOutstandingBalance()
  Description: This test checks if the getOutstandingBalance() method correctly returns a numeric outstanding balance value.
Execution:
  Arrange: Create an instance of the class containing the getOutstandingBalance() method and set a numeric outstanding balance value.
  Act: Call the getOutstandingBalance() method.
  Assert: Use assertEquals to compare the returned value with the expected numeric outstanding balance.
Validation:
  The assertion verifies that the getOutstandingBalance() method accurately retrieves and returns numeric outstanding balance values.
  This test is crucial to ensure that the method can handle numeric values correctly without any formatting or conversion issues.

These test scenarios cover different aspects of the getOutstandingBalance() method, including valid values, null values, empty strings, and numeric values. They help ensure the method's correctness and robustness in various scenarios.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestGetOutstandingBalanceTest {

	@ParameterizedTest
	@CsvSource({ "100.00", "999.99", "0.01" })
	void validOutstandingBalance(String outstandingBalance) {
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		request.setOutstandingBalance(outstandingBalance);
		String result = request.getOutstandingBalance();
		assertEquals(outstandingBalance, result);
	}

	@Test
	void nullOutstandingBalance() {
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		request.setOutstandingBalance(null);
		String result = request.getOutstandingBalance();
		assertNull(result);
	}

	@Test
	void emptyOutstandingBalance() {
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		request.setOutstandingBalance("");
		String result = request.getOutstandingBalance();
		assertEquals("", result);
	}

	@ParameterizedTest
	@ValueSource(strings = { "1234.56", "0.00", "9999999.99" })
	void numericOutstandingBalance(String outstandingBalance) {
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		request.setOutstandingBalance(outstandingBalance);
		String result = request.getOutstandingBalance();
		assertEquals(outstandingBalance, result);
	}

}