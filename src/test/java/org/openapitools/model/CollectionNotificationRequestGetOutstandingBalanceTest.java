// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=getOutstandingBalance_383cf5f790
ROOST_METHOD_SIG_HASH=getOutstandingBalance_c13bc79af1

Here are the generated test scenarios for the getOutstandingBalance() method:

Scenario 1: Verify getOutstandingBalance returns the correct outstanding balance

Details:
  TestName: getOutstandingBalanceReturnsCorrectValue()
  Description: This test verifies that the getOutstandingBalance method returns the correct outstanding balance stored in the outstandingBalance field.
Execution:
  Arrange: Create an instance of the class containing the getOutstandingBalance method. Set the outstandingBalance field to a known value.
  Act: Invoke the getOutstandingBalance method.
  Assert: Use assertEquals to verify that the returned value matches the expected outstandingBalance value.
Validation:
  The assertion ensures that the getOutstandingBalance method correctly retrieves and returns the value stored in the outstandingBalance field.
  This test is important to validate that the method accurately exposes the outstanding balance information.

Scenario 2: Verify getOutstandingBalance returns null when outstandingBalance is not set

Details:
  TestName: getOutstandingBalanceReturnsNullWhenNotSet()
  Description: This test verifies that the getOutstandingBalance method returns null when the outstandingBalance field is not explicitly set.
Execution:
  Arrange: Create an instance of the class containing the getOutstandingBalance method. Do not set the outstandingBalance field.
  Act: Invoke the getOutstandingBalance method.
  Assert: Use assertNull to verify that the returned value is null.
Validation:
  The assertion confirms that the getOutstandingBalance method returns null when the outstandingBalance field is not initialized or set.
  This test ensures that the method handles the case where the outstanding balance information is not available.

Scenario 3: Verify getOutstandingBalance is annotated with @NotNull

Details:
  TestName: getOutstandingBalanceHasNotNullAnnotation()
  Description: This test verifies that the getOutstandingBalance method is annotated with @NotNull, indicating that it should not return null.
Execution:
  Arrange: Obtain the method object for getOutstandingBalance using reflection.
  Act: Retrieve the annotations present on the method.
  Assert: Use assertTrue to verify that the method is annotated with @NotNull.
Validation:
  The assertion checks that the getOutstandingBalance method is properly annotated with @NotNull.
  This test ensures that the method is designed to always return a non-null value, adhering to the contract specified by the annotation.

Scenario 4: Verify getOutstandingBalance is annotated with @Schema

Details:
  TestName: getOutstandingBalanceHasSchemaAnnotation()
  Description: This test verifies that the getOutstandingBalance method is annotated with @Schema, providing metadata for API documentation.
Execution:
  Arrange: Obtain the method object for getOutstandingBalance using reflection.
  Act: Retrieve the annotations present on the method.
  Assert: Use assertTrue to verify that the method is annotated with @Schema. Check that the annotation has the correct name and requiredMode properties.
Validation:
  The assertion confirms that the getOutstandingBalance method is properly annotated with @Schema, including the correct name and requiredMode properties.
  This test ensures that the method provides the necessary metadata for generating accurate API documentation.

Note: The test scenarios assume the existence of a class that contains the getOutstandingBalance method and the outstandingBalance field. The actual implementation of the tests may vary depending on the specific testing framework and project structure.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import javax.validation.constraints.NotNull;
import java.lang.reflect.Method;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestGetOutstandingBalanceTest {

	private CollectionNotificationRequest collectionNotificationRequest;

	@BeforeEach
	void setUp() {
		collectionNotificationRequest = new CollectionNotificationRequest();
	}

	@ParameterizedTest
	@MethodSource("provideOutstandingBalanceValues")
	void getOutstandingBalanceReturnsCorrectValue(String outstandingBalance) {
		collectionNotificationRequest.setOutstandingBalance(outstandingBalance);
		assertEquals(outstandingBalance, collectionNotificationRequest.getOutstandingBalance());
	}

	private static Stream<Arguments> provideOutstandingBalanceValues() {
		return Stream.of(Arguments.of("100.00"), Arguments.of("50.50"), Arguments.of("0.00"));
	}

	@Test
	void getOutstandingBalanceReturnsNullWhenNotSet() {
		assertNull(collectionNotificationRequest.getOutstandingBalance());
	}

	@Test
	void getOutstandingBalanceHasNotNullAnnotation() throws NoSuchMethodException {
		Method getOutstandingBalanceMethod = CollectionNotificationRequest.class.getMethod("getOutstandingBalance");
		assertTrue(getOutstandingBalanceMethod.isAnnotationPresent(NotNull.class));
	}

	@Test
	void getOutstandingBalanceHasSchemaAnnotation() throws NoSuchMethodException {
		Method getOutstandingBalanceMethod = CollectionNotificationRequest.class.getMethod("getOutstandingBalance");
		assertTrue(getOutstandingBalanceMethod.isAnnotationPresent(io.swagger.v3.oas.annotations.media.Schema.class));
		io.swagger.v3.oas.annotations.media.Schema schemaAnnotation = getOutstandingBalanceMethod
			.getAnnotation(io.swagger.v3.oas.annotations.media.Schema.class);
		assertEquals("outstandingBalance", schemaAnnotation.name());
		assertEquals(io.swagger.v3.oas.annotations.media.Schema.RequiredMode.REQUIRED, schemaAnnotation.requiredMode());
	}

}