// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setCardLast4_1ec3bfb1aa
ROOST_METHOD_SIG_HASH=setCardLast4_67db513785

Here are the JUnit test scenarios for the provided setCardLast4 method:

Scenario 1: Valid Card Last 4 Digits

Details:
  TestName: validCardLast4.
  Description: This test checks if the setCardLast4 method correctly sets the cardLast4 property when a valid 4-digit string is provided.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with a valid 4-digit string (e.g., "1234").
  Assert: Use assertEquals to verify that the cardLast4 property of the object is set to the provided value.
Validation:
  The assertion verifies that the setCardLast4 method correctly assigns the provided value to the cardLast4 property.
  This test ensures that the method behaves as expected when given valid input, which is crucial for maintaining data integrity.

Scenario 2: Null Card Last 4 Digits

Details:
  TestName: nullCardLast4.
  Description: This test checks if the setCardLast4 method handles a null value correctly without throwing an exception.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with a null value.
  Assert: Use assertNull to verify that the cardLast4 property of the object remains null after the method invocation.
Validation:
  The assertion verifies that the setCardLast4 method does not throw an exception when given a null value and leaves the cardLast4 property as null.
  This test ensures that the method can handle null values gracefully, preventing unexpected exceptions and maintaining the object's state.

Scenario 3: Empty Card Last 4 Digits

Details:
  TestName: emptyCardLast4.
  Description: This test checks if the setCardLast4 method correctly handles an empty string as input.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with an empty string ("").
  Assert: Use assertEquals to verify that the cardLast4 property of the object is set to an empty string.
Validation:
  The assertion verifies that the setCardLast4 method allows setting the cardLast4 property to an empty string.
  This test ensures that the method can handle empty strings, which may be a valid scenario depending on the application's requirements.

Scenario 4: Card Last 4 Digits with Less Than 4 Characters

Details:
  TestName: cardLast4WithLessThan4Chars.
  Description: This test checks if the setCardLast4 method correctly handles a string with less than 4 characters.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with a string containing less than 4 characters (e.g., "123").
  Assert: Use assertEquals to verify that the cardLast4 property of the object is set to the provided value.
Validation:
  The assertion verifies that the setCardLast4 method allows setting the cardLast4 property to a string with less than 4 characters.
  This test ensures that the method does not enforce a strict length requirement, allowing flexibility in the input.

Scenario 5: Card Last 4 Digits with More Than 4 Characters

Details:
  TestName: cardLast4WithMoreThan4Chars.
  Description: This test checks if the setCardLast4 method correctly handles a string with more than 4 characters.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with a string containing more than 4 characters (e.g., "123456").
  Assert: Use assertEquals to verify that the cardLast4 property of the object is set to the provided value.
Validation:
  The assertion verifies that the setCardLast4 method allows setting the cardLast4 property to a string with more than 4 characters.
  This test ensures that the method does not truncate or modify the input, preserving the original value provided.

These test scenarios cover various cases, including valid input, null value, empty string, and different lengths of the input string. They ensure that the setCardLast4 method behaves as expected in different scenarios and handles edge cases appropriately.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.LocalDate;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestSetCardLast4471Test {
    @Test
    void validCardLast4() {
        // Arrange
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
        String validCardLast4 = "1234";
        // Act
        balanceAlertRequest.setCardLast4(validCardLast4);
        // Assert
        assertEquals(validCardLast4, balanceAlertRequest.getCardLast4());
    }
    @Test
    void nullCardLast4() {
        // Arrange
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
        // Act
        balanceAlertRequest.setCardLast4(null);
        // Assert
        assertNull(balanceAlertRequest.getCardLast4());
    }
    @Test
    void emptyCardLast4() {
        // Arrange
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
        String emptyCardLast4 = "";
        // Act
        balanceAlertRequest.setCardLast4(emptyCardLast4);
        // Assert
        assertEquals(emptyCardLast4, balanceAlertRequest.getCardLast4());
    }
    @ParameterizedTest
    @ValueSource(strings = {"1", "12", "123"})
    void cardLast4WithLessThan4Chars(String cardLast4) {
        // Arrange
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
        // Act
        balanceAlertRequest.setCardLast4(cardLast4);
        // Assert
        assertEquals(cardLast4, balanceAlertRequest.getCardLast4());
    }
    @ParameterizedTest
    @ValueSource(strings = {"12345", "123456", "1234567890"})
    void cardLast4WithMoreThan4Chars(String cardLast4) {
        // Arrange
        BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
        // Act
        balanceAlertRequest.setCardLast4(cardLast4);
        // Assert
        assertEquals(cardLast4, balanceAlertRequest.getCardLast4());
    }
}