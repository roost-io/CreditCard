// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_e450523ca3
ROOST_METHOD_SIG_HASH=equals_ded257778a

Here are the generated test scenarios for the equals method:

Scenario 1: Comparing object with itself

Details:
  TestName: equalsComparingObjectWithItself
  Description: This test checks if the equals method returns true when comparing an object with itself, as any object should be equal to itself.
Execution:
  Arrange: Create an instance of the BalanceAlertRequest class.
  Act: Invoke the equals method, passing the same object as the argument.
  Assert: Use assertEquals to verify that the method returns true.
Validation:
  The assertion verifies that the equals method correctly identifies an object as equal to itself.
  This test ensures the reflexive property of equality, which is a fundamental requirement for the equals method.

Scenario 2: Comparing object with null

Details:
  TestName: equalsComparingObjectWithNull
  Description: This test checks if the equals method returns false when comparing an object with null, as an object should not be equal to null.
Execution:
  Arrange: Create an instance of the BalanceAlertRequest class.
  Act: Invoke the equals method, passing null as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method correctly handles comparison with null and returns false.
  This test ensures that the equals method does not consider an object equal to null, preventing null pointer exceptions.

Scenario 3: Comparing object with an instance of a different class

Details:
  TestName: equalsComparingObjectWithDifferentClass
  Description: This test checks if the equals method returns false when comparing an object with an instance of a different class, as objects of different classes should not be considered equal.
Execution:
  Arrange: Create an instance of the BalanceAlertRequest class and an instance of a different class (e.g., String).
  Act: Invoke the equals method, passing the instance of the different class as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies objects of different classes as not equal.
  This test ensures that the equals method maintains the contract of equality by considering only objects of the same class.

Scenario 4: Comparing objects with equal field values

Details:
  TestName: equalsComparingObjectsWithEqualFields
  Description: This test checks if the equals method returns true when comparing two objects with equal values for all the fields used in the equality comparison (paymentDueDate, currentDate, cardLast4).
Execution:
  Arrange: Create two instances of the BalanceAlertRequest class with equal values for paymentDueDate, currentDate, and cardLast4.
  Act: Invoke the equals method, passing one object as the argument and comparing it with the other object.
  Assert: Use assertTrue to verify that the method returns true.
Validation:
  The assertion verifies that the equals method correctly identifies objects with equal field values as equal.
  This test ensures that the equals method considers the relevant fields for equality comparison and returns true when they match.

Scenario 5: Comparing objects with unequal field values

Details:
  TestName: equalsComparingObjectsWithUnequalFields
  Description: This test checks if the equals method returns false when comparing two objects with unequal values for any of the fields used in the equality comparison (paymentDueDate, currentDate, cardLast4).
Execution:
  Arrange: Create two instances of the BalanceAlertRequest class with unequal values for at least one of the fields (paymentDueDate, currentDate, or cardLast4).
  Act: Invoke the equals method, passing one object as the argument and comparing it with the other object.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies objects with unequal field values as not equal.
  This test ensures that the equals method considers the relevant fields for equality comparison and returns false when any of them differ.

These test scenarios cover various aspects of the equals method, including comparing an object with itself, null, instances of different classes, and objects with equal and unequal field values. They help ensure the correctness and robustness of the equals implementation in the BalanceAlertRequest class.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.time.LocalDate;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;

class BalanceAlertRequestEqualsTest {

	@Test
	void equalsComparingObjectWithItself() {
		BalanceAlertRequest request = new BalanceAlertRequest(LocalDate.now(), LocalDate.now(), "1234");
		assertTrue(request.equals(request));
	}

	@Test
	void equalsComparingObjectWithNull() {
		BalanceAlertRequest request = new BalanceAlertRequest(LocalDate.now(), LocalDate.now(), "1234");
		assertFalse(request.equals(null));
	}

	@Test
	void equalsComparingObjectWithDifferentClass() {
		BalanceAlertRequest request = new BalanceAlertRequest(LocalDate.now(), LocalDate.now(), "1234");
		assertFalse(request.equals("string"));
	}

	@ParameterizedTest
	@MethodSource("equalFieldsProvider")
	void equalsComparingObjectsWithEqualFields(BalanceAlertRequest request1, BalanceAlertRequest request2) {
		assertTrue(request1.equals(request2));
		assertTrue(request2.equals(request1));
	}

	@ParameterizedTest
	@MethodSource("unequalFieldsProvider")
	void equalsComparingObjectsWithUnequalFields(BalanceAlertRequest request1, BalanceAlertRequest request2) {
		assertFalse(request1.equals(request2));
		assertFalse(request2.equals(request1));
	}

	private static Stream<Arguments> equalFieldsProvider() {
		return Stream.of(
				Arguments.of(new BalanceAlertRequest(LocalDate.of(2023, 6, 10), LocalDate.of(2023, 6, 5), "1234"),
						new BalanceAlertRequest(LocalDate.of(2023, 6, 10), LocalDate.of(2023, 6, 5), "1234")),
				Arguments.of(new BalanceAlertRequest(null, LocalDate.of(2023, 6, 5), "1234"),
						new BalanceAlertRequest(null, LocalDate.of(2023, 6, 5), "1234")),
				Arguments.of(new BalanceAlertRequest(LocalDate.of(2023, 6, 10), null, "1234"),
						new BalanceAlertRequest(LocalDate.of(2023, 6, 10), null, "1234")),
				Arguments.of(new BalanceAlertRequest(LocalDate.of(2023, 6, 10), LocalDate.of(2023, 6, 5), null),
						new BalanceAlertRequest(LocalDate.of(2023, 6, 10), LocalDate.of(2023, 6, 5), null)));
	}

	private static Stream<Arguments> unequalFieldsProvider() {
		return Stream.of(
				Arguments.of(new BalanceAlertRequest(LocalDate.of(2023, 6, 10), LocalDate.of(2023, 6, 5), "1234"),
						new BalanceAlertRequest(LocalDate.of(2023, 6, 11), LocalDate.of(2023, 6, 5), "1234")),
				Arguments.of(new BalanceAlertRequest(LocalDate.of(2023, 6, 10), LocalDate.of(2023, 6, 5), "1234"),
						new BalanceAlertRequest(LocalDate.of(2023, 6, 10), LocalDate.of(2023, 6, 6), "1234")),
				Arguments.of(new BalanceAlertRequest(LocalDate.of(2023, 6, 10), LocalDate.of(2023, 6, 5), "1234"),
						new BalanceAlertRequest(LocalDate.of(2023, 6, 10), LocalDate.of(2023, 6, 5), "5678")),
				Arguments.of(new BalanceAlertRequest(null, LocalDate.of(2023, 6, 5), "1234"),
						new BalanceAlertRequest(LocalDate.of(2023, 6, 10), LocalDate.of(2023, 6, 5), "1234")),
				Arguments.of(new BalanceAlertRequest(LocalDate.of(2023, 6, 10), null, "1234"),
						new BalanceAlertRequest(LocalDate.of(2023, 6, 10), LocalDate.of(2023, 6, 5), "1234")),
				Arguments.of(new BalanceAlertRequest(LocalDate.of(2023, 6, 10), LocalDate.of(2023, 6, 5), null),
						new BalanceAlertRequest(LocalDate.of(2023, 6, 10), LocalDate.of(2023, 6, 5), "1234")));
	}

}
