// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_e450523ca3
ROOST_METHOD_SIG_HASH=equals_ded257778a

Here are the JUnit test scenarios for the provided equals method:

Scenario 1: Comparing object with itself

Details:
  TestName: equalsReturnsTrueForSameObject
  Description: This test verifies that the equals method returns true when comparing an object with itself.
Execution:
  Arrange: Create an instance of the BalanceAlertRequest class.
  Act: Invoke the equals method, passing the same instance as the argument.
  Assert: Assert that the method returns true using assertEquals(true, result).
Validation:
  The assertion verifies that the equals method correctly identifies an object as equal to itself.
  This test ensures that the reflexive property of equality is satisfied.

Scenario 2: Comparing object with null

Details:
  TestName: equalsReturnsFalseForNull
  Description: This test checks that the equals method returns false when comparing an object with null.
Execution:
  Arrange: Create an instance of the BalanceAlertRequest class.
  Act: Invoke the equals method, passing null as the argument.
  Assert: Assert that the method returns false using assertEquals(false, result).
Validation:
  The assertion verifies that the equals method correctly handles null comparison and returns false.
  This test ensures that the equals method does not throw a NullPointerException and follows the contract of returning false for null.

Scenario 3: Comparing object with different class

Details:
  TestName: equalsReturnsFalseForDifferentClass
  Description: This test verifies that the equals method returns false when comparing an object with an instance of a different class.
Execution:
  Arrange: Create an instance of the BalanceAlertRequest class and an instance of a different class (e.g., String).
  Act: Invoke the equals method, passing the instance of the different class as the argument.
  Assert: Assert that the method returns false using assertEquals(false, result).
Validation:
  The assertion verifies that the equals method correctly identifies objects of different classes as not equal.
  This test ensures that the equals method follows the contract of comparing the class of the objects.

Scenario 4: Comparing objects with same field values

Details:
  TestName: equalsReturnsTrueForEqualObjects
  Description: This test checks that the equals method returns true when comparing two objects with the same field values.
Execution:
  Arrange: Create two instances of the BalanceAlertRequest class with the same values for paymentDueDate, currentDate, and cardLast4 fields.
  Act: Invoke the equals method, passing one of the instances as the argument.
  Assert: Assert that the method returns true using assertEquals(true, result).
Validation:
  The assertion verifies that the equals method correctly identifies objects with the same field values as equal.
  This test ensures that the equals method compares the relevant fields of the objects for equality.

Scenario 5: Comparing objects with different paymentDueDate

Details:
  TestName: equalsReturnsFalseForDifferentPaymentDueDate
  Description: This test verifies that the equals method returns false when comparing two objects with different paymentDueDate values.
Execution:
  Arrange: Create two instances of the BalanceAlertRequest class with different values for the paymentDueDate field.
  Act: Invoke the equals method, passing one of the instances as the argument.
  Assert: Assert that the method returns false using assertEquals(false, result).
Validation:
  The assertion verifies that the equals method correctly identifies objects with different paymentDueDate values as not equal.
  This test ensures that the equals method considers the paymentDueDate field when comparing objects.

Scenario 6: Comparing objects with different currentDate

Details:
  TestName: equalsReturnsFalseForDifferentCurrentDate
  Description: This test checks that the equals method returns false when comparing two objects with different currentDate values.
Execution:
  Arrange: Create two instances of the BalanceAlertRequest class with different values for the currentDate field.
  Act: Invoke the equals method, passing one of the instances as the argument.
  Assert: Assert that the method returns false using assertEquals(false, result).
Validation:
  The assertion verifies that the equals method correctly identifies objects with different currentDate values as not equal.
  This test ensures that the equals method considers the currentDate field when comparing objects.

Scenario 7: Comparing objects with different cardLast4

Details:
  TestName: equalsReturnsFalseForDifferentCardLast4
  Description: This test verifies that the equals method returns false when comparing two objects with different cardLast4 values.
Execution:
  Arrange: Create two instances of the BalanceAlertRequest class with different values for the cardLast4 field.
  Act: Invoke the equals method, passing one of the instances as the argument.
  Assert: Assert that the method returns false using assertEquals(false, result).
Validation:
  The assertion verifies that the equals method correctly identifies objects with different cardLast4 values as not equal.
  This test ensures that the equals method considers the cardLast4 field when comparing objects.

These test scenarios cover various aspects of the equals method, including comparing an object with itself, null, objects of different classes, and objects with different field values. They ensure that the equals method behaves correctly and follows the contract of equality.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.time.LocalDate;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestEqualsTest {

	@Test
	void equalsReturnsTrueForSameObject() {
		BalanceAlertRequest request = new BalanceAlertRequest(LocalDate.now(), LocalDate.now(), "1234");
		assertTrue(request.equals(request));
	}

	@Test
	void equalsReturnsFalseForNull() {
		BalanceAlertRequest request = new BalanceAlertRequest(LocalDate.now(), LocalDate.now(), "1234");
		assertFalse(request.equals(null));
	}

	@Test
	void equalsReturnsFalseForDifferentClass() {
		BalanceAlertRequest request = new BalanceAlertRequest(LocalDate.now(), LocalDate.now(), "1234");
		assertFalse(request.equals(""));
	}

	@ParameterizedTest
	@MethodSource("provideEqualObjects")
	void equalsReturnsTrueForEqualObjects(BalanceAlertRequest request1, BalanceAlertRequest request2) {
		assertTrue(request1.equals(request2));
	}

	@ParameterizedTest
	@MethodSource("provideUnequalObjects")
	void equalsReturnsFalseForUnequalObjects(BalanceAlertRequest request1, BalanceAlertRequest request2) {
		assertFalse(request1.equals(request2));
	}

	private static Stream<Arguments> provideEqualObjects() {
		LocalDate paymentDueDate = LocalDate.now();
		LocalDate currentDate = LocalDate.now();
		String cardLast4 = "1234";
		return Stream.of(Arguments.of(new BalanceAlertRequest(paymentDueDate, currentDate, cardLast4),
				new BalanceAlertRequest(paymentDueDate, currentDate, cardLast4)));
	}

	private static Stream<Arguments> provideUnequalObjects() {
		LocalDate paymentDueDate = LocalDate.now();
		LocalDate currentDate = LocalDate.now();
		String cardLast4 = "1234";
		return Stream.of(
				Arguments.of(new BalanceAlertRequest(paymentDueDate, currentDate, cardLast4),
						new BalanceAlertRequest(paymentDueDate.plusDays(1), currentDate, cardLast4)),
				Arguments.of(new BalanceAlertRequest(paymentDueDate, currentDate, cardLast4),
						new BalanceAlertRequest(paymentDueDate, currentDate.plusDays(1), cardLast4)),
				Arguments.of(new BalanceAlertRequest(paymentDueDate, currentDate, cardLast4),
						new BalanceAlertRequest(paymentDueDate, currentDate, "5678")));
	}

}