// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_c9d1d3c567
ROOST_METHOD_SIG_HASH=equals_f2d574000d

Here are the JUnit test scenarios for the provided equals method:

Scenario 1: Comparing object to itself

Details:
  TestName: equalsReturnsTrueForSameObject
  Description: This test verifies that the equals method returns true when comparing an object to itself.
Execution:
  Arrange: Create a BalanceAlertRequest object.
  Act: Invoke the equals method, passing the same object as the argument.
  Assert: Assert that the method returns true.
Validation:
  The assertion verifies that the equals method correctly identifies an object as equal to itself.
  This test ensures that the reflexive property of equality is satisfied.

Scenario 2: Comparing object to null

Details:
  TestName: equalsReturnsFalseForNull
  Description: This test verifies that the equals method returns false when comparing an object to null.
Execution:
  Arrange: Create a BalanceAlertRequest object.
  Act: Invoke the equals method, passing null as the argument.
  Assert: Assert that the method returns false.
Validation:
  The assertion verifies that the equals method correctly handles comparison with null.
  This test ensures that the equals method does not throw a NullPointerException and returns false for null input.

Scenario 3: Comparing object to an instance of a different class

Details:
  TestName: equalsReturnsFalseForDifferentClass
  Description: This test verifies that the equals method returns false when comparing an object to an instance of a different class.
Execution:
  Arrange: Create a BalanceAlertRequest object and an object of a different class (e.g., String).
  Act: Invoke the equals method, passing the object of a different class as the argument.
  Assert: Assert that the method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies objects of different classes as not equal.
  This test ensures that the equals method adheres to the contract of comparing objects based on their class.

Scenario 4: Comparing objects with equal field values

Details:
  TestName: equalsReturnsTrueForEqualFieldValues
  Description: This test verifies that the equals method returns true when comparing objects with equal values for all fields.
Execution:
  Arrange: Create two BalanceAlertRequest objects with the same values for paymentDueDate, currentDate, and cardLast4 fields.
  Act: Invoke the equals method, passing one object as the argument to compare with the other.
  Assert: Assert that the method returns true.
Validation:
  The assertion verifies that the equals method correctly identifies objects as equal when all their fields have the same values.
  This test ensures that the equals method compares the relevant fields for equality.

Scenario 5: Comparing objects with different field values

Details:
  TestName: equalsReturnsFalseForDifferentFieldValues
  Description: This test verifies that the equals method returns false when comparing objects with different values for any of the fields.
Execution:
  Arrange: Create two BalanceAlertRequest objects with different values for at least one of the fields (paymentDueDate, currentDate, or cardLast4).
  Act: Invoke the equals method, passing one object as the argument to compare with the other.
  Assert: Assert that the method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies objects as not equal when any of their fields have different values.
  This test ensures that the equals method considers all relevant fields in the comparison.

These test scenarios cover the basic functionality and edge cases of the equals method. They ensure that the method correctly handles comparisons with itself, null, instances of different classes, and objects with equal and different field values.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import java.time.LocalDate;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestEqualsTest {

	@Test
	void equalsReturnsTrueForSameObject() {
		BalanceAlertRequest request = new BalanceAlertRequest().paymentDueDate(LocalDate.of(2023, 6, 15))
			.currentDate(LocalDate.of(2023, 6, 10))
			.cardLast4("1234");

		Assertions.assertTrue(request.equals(request));
	}

	@Test
	void equalsReturnsFalseForNull() {
		BalanceAlertRequest request = new BalanceAlertRequest().paymentDueDate(LocalDate.of(2023, 6, 15))
			.currentDate(LocalDate.of(2023, 6, 10))
			.cardLast4("1234");

		Assertions.assertFalse(request.equals(null));
	}

	@Test
	void equalsReturnsFalseForDifferentClass() {
		BalanceAlertRequest request = new BalanceAlertRequest().paymentDueDate(LocalDate.of(2023, 6, 15))
			.currentDate(LocalDate.of(2023, 6, 10))
			.cardLast4("1234");

		String otherObject = "Not a BalanceAlertRequest";

		Assertions.assertFalse(request.equals(otherObject));
	}

	@Test
	void equalsReturnsTrueForEqualFieldValues() {
		BalanceAlertRequest request1 = new BalanceAlertRequest().paymentDueDate(LocalDate.of(2023, 6, 15))
			.currentDate(LocalDate.of(2023, 6, 10))
			.cardLast4("1234");

		BalanceAlertRequest request2 = new BalanceAlertRequest().paymentDueDate(LocalDate.of(2023, 6, 15))
			.currentDate(LocalDate.of(2023, 6, 10))
			.cardLast4("1234");

		Assertions.assertTrue(request1.equals(request2));
		Assertions.assertTrue(request2.equals(request1));
	}

	@Test
	void equalsReturnsFalseForDifferentFieldValues() {
		BalanceAlertRequest request1 = new BalanceAlertRequest().paymentDueDate(LocalDate.of(2023, 6, 15))
			.currentDate(LocalDate.of(2023, 6, 10))
			.cardLast4("1234");

		BalanceAlertRequest request2 = new BalanceAlertRequest().paymentDueDate(LocalDate.of(2023, 6, 20))
			.currentDate(LocalDate.of(2023, 6, 10))
			.cardLast4("1234");

		BalanceAlertRequest request3 = new BalanceAlertRequest().paymentDueDate(LocalDate.of(2023, 6, 15))
			.currentDate(LocalDate.of(2023, 6, 12))
			.cardLast4("1234");

		BalanceAlertRequest request4 = new BalanceAlertRequest().paymentDueDate(LocalDate.of(2023, 6, 15))
			.currentDate(LocalDate.of(2023, 6, 10))
			.cardLast4("5678");

		Assertions.assertFalse(request1.equals(request2));
		Assertions.assertFalse(request1.equals(request3));
		Assertions.assertFalse(request1.equals(request4));
	}

}