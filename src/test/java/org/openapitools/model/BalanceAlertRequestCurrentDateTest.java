// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=currentDate_a57647b643
ROOST_METHOD_SIG_HASH=currentDate_78774936c5

Here are the generated test scenarios for the provided currentDate method:

Scenario 1: Setting Current Date

Details:
  TestName: currentDateSetSuccessfully()
  Description: This test verifies that the currentDate method correctly sets the current date in the BalanceAlertRequest object and returns the same object.
Execution:
  Arrange: Create a BalanceAlertRequest object.
  Act: Invoke the currentDate method with a specific LocalDate value.
  Assert: Assert that the returned object is the same as the original BalanceAlertRequest object and that the currentDate field is set to the provided LocalDate value.
Validation:
  The assertion ensures that the currentDate method properly sets the currentDate field and returns the BalanceAlertRequest object, maintaining the fluent API pattern. This test is important to validate the basic functionality of setting the current date in the request object.

Scenario 2: Setting Current Date to Null

Details:
  TestName: currentDateSetToNull()
  Description: This test checks the behavior of the currentDate method when passing a null value as the current date.
Execution:
  Arrange: Create a BalanceAlertRequest object.
  Act: Invoke the currentDate method with a null value.
  Assert: Assert that the returned object is the same as the original BalanceAlertRequest object and that the currentDate field is set to null.
Validation:
  The assertion verifies that the currentDate method handles null values correctly by setting the currentDate field to null and returning the BalanceAlertRequest object. This test is important to ensure that the method does not throw any exceptions and allows setting the current date to null if needed.

Scenario 3: Setting Current Date Before Payment Due Date

Details:
  TestName: currentDateBeforePaymentDueDate()
  Description: This test validates the behavior of the currentDate method when the provided current date is before the payment due date.
Execution:
  Arrange: Create a BalanceAlertRequest object and set the paymentDueDate to a future date.
  Act: Invoke the currentDate method with a LocalDate value that is before the payment due date.
  Assert: Assert that the returned object is the same as the original BalanceAlertRequest object and that the currentDate field is set to the provided LocalDate value.
Validation:
  The assertion confirms that the currentDate method allows setting the current date to a value before the payment due date. This test is important to ensure that the method does not enforce any restrictions on the relationship between the current date and the payment due date.

Scenario 4: Setting Current Date After Payment Due Date

Details:
  TestName: currentDateAfterPaymentDueDate()
  Description: This test checks the behavior of the currentDate method when the provided current date is after the payment due date.
Execution:
  Arrange: Create a BalanceAlertRequest object and set the paymentDueDate to a past date.
  Act: Invoke the currentDate method with a LocalDate value that is after the payment due date.
  Assert: Assert that the returned object is the same as the original BalanceAlertRequest object and that the currentDate field is set to the provided LocalDate value.
Validation:
  The assertion verifies that the currentDate method allows setting the current date to a value after the payment due date. This test is important to ensure that the method does not impose any constraints on the relationship between the current date and the payment due date.

These test scenarios cover different aspects of the currentDate method, including setting the current date successfully, handling null values, and testing the behavior when the current date is before or after the payment due date. The scenarios aim to validate the basic functionality and edge cases of the method.
*/

// ********RoostGPT********
package org.openapitools.model;

import java.time.LocalDate;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestCurrentDateTest {

	private BalanceAlertRequest balanceAlertRequest;

	@BeforeEach
	void setUp() {
		balanceAlertRequest = new BalanceAlertRequest();
	}

	@Test
	void currentDateSetSuccessfully() {
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		BalanceAlertRequest result = balanceAlertRequest.currentDate(currentDate);
		assertSame(balanceAlertRequest, result);
		assertEquals(currentDate, balanceAlertRequest.getCurrentDate());
	}

	@Test
	void currentDateSetToNull() {
		BalanceAlertRequest result = balanceAlertRequest.currentDate(null);
		assertSame(balanceAlertRequest, result);
		assertNull(balanceAlertRequest.getCurrentDate());
	}

	@Test
	void currentDateBeforePaymentDueDate() {
		LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		balanceAlertRequest.setPaymentDueDate(paymentDueDate);
		BalanceAlertRequest result = balanceAlertRequest.currentDate(currentDate);
		assertSame(balanceAlertRequest, result);
		assertEquals(currentDate, balanceAlertRequest.getCurrentDate());
	}

	@Test
	void currentDateAfterPaymentDueDate() {
		LocalDate paymentDueDate = LocalDate.of(2023, 6, 5);
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		balanceAlertRequest.setPaymentDueDate(paymentDueDate);
		BalanceAlertRequest result = balanceAlertRequest.currentDate(currentDate);
		assertSame(balanceAlertRequest, result);
		assertEquals(currentDate, balanceAlertRequest.getCurrentDate());
	}

}