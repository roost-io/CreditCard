// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=currentDate_a57647b643
ROOST_METHOD_SIG_HASH=currentDate_78774936c5

Here are the JUnit test scenarios for the provided `currentDate` method:

Scenario 1: Valid Current Date

Details:
  TestName: validCurrentDate()
  Description: This test verifies that the `currentDate` method sets the `currentDate` field correctly when provided with a valid `LocalDate` object and returns the `BalanceAlertRequest` instance.
Execution:
  Arrange: Create a `BalanceAlertRequest` instance and a valid `LocalDate` object representing the current date.
  Act: Invoke the `currentDate` method with the `LocalDate` object.
  Assert: Assert that the `currentDate` field of the `BalanceAlertRequest` instance is equal to the provided `LocalDate` object using `assertEquals`.
Validation:
  The assertion verifies that the `currentDate` method correctly sets the `currentDate` field of the `BalanceAlertRequest` instance when provided with a valid `LocalDate` object. This test ensures that the method behaves as expected and maintains the integrity of the `currentDate` field.

Scenario 2: Null Current Date

Details:
  TestName: nullCurrentDate()
  Description: This test verifies that the `currentDate` method handles a null `LocalDate` object gracefully and sets the `currentDate` field to null.
Execution:
  Arrange: Create a `BalanceAlertRequest` instance.
  Act: Invoke the `currentDate` method with a null `LocalDate` object.
  Assert: Assert that the `currentDate` field of the `BalanceAlertRequest` instance is null using `assertNull`.
Validation:
  The assertion verifies that the `currentDate` method correctly handles a null `LocalDate` object and sets the `currentDate` field to null. This test ensures that the method does not throw any exceptions and allows setting the `currentDate` field to null if required.

Scenario 3: Return Value

Details:
  TestName: returnValue()
  Description: This test verifies that the `currentDate` method returns the same `BalanceAlertRequest` instance on which it is invoked.
Execution:
  Arrange: Create a `BalanceAlertRequest` instance and a valid `LocalDate` object.
  Act: Invoke the `currentDate` method with the `LocalDate` object and store the returned value.
  Assert: Assert that the returned value is the same instance as the original `BalanceAlertRequest` using `assertSame`.
Validation:
  The assertion verifies that the `currentDate` method returns the same `BalanceAlertRequest` instance on which it is invoked. This test ensures that the method follows the fluent API pattern and allows chaining of method calls on the same instance.

These test scenarios cover the basic functionality of the `currentDate` method, including setting a valid current date, handling a null current date, and verifying the return value. They ensure that the method behaves as expected and maintains the integrity of the `currentDate` field.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.time.LocalDate;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestCurrentDateTest {

	@Test
	@DisplayName("Valid Current Date")
	void validCurrentDate() {
		// Arrange
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
		LocalDate currentDate = LocalDate.now();
		// Act
		BalanceAlertRequest result = balanceAlertRequest.currentDate(currentDate);
		// Assert
		assertEquals(currentDate, balanceAlertRequest.getCurrentDate());
		assertSame(balanceAlertRequest, result);
	}

	@Test
	@DisplayName("Null Current Date")
	void nullCurrentDate() {
		// Arrange
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
		// Act
		BalanceAlertRequest result = balanceAlertRequest.currentDate(null);
		// Assert
		assertNull(balanceAlertRequest.getCurrentDate());
		assertSame(balanceAlertRequest, result);
	}

	@ParameterizedTest(name = "Return Value - Current Date: {0}")
	@MethodSource("currentDateProvider")
	void returnValue(LocalDate currentDate) {
		// Arrange
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest();
		// Act
		BalanceAlertRequest result = balanceAlertRequest.currentDate(currentDate);
		// Assert
		assertSame(balanceAlertRequest, result);
	}

	// Modified the method to be public and static
	public static Stream<Arguments> currentDateProvider() {
		return Stream.of(Arguments.of(LocalDate.now()), Arguments.of(LocalDate.of(2023, 6, 1)), Arguments.of(null));
	}

}
