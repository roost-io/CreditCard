// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=cardLast4_8ce6f88dcb
ROOST_METHOD_SIG_HASH=cardLast4_4a0a960fb4

Based on the provided method `cardLast4(String cardLast4)` and the list of imports, here are the generated test scenarios:

Scenario 1: Valid cardLast4 value

Details:
  TestName: validCardLast4Value
  Description: This test verifies that the `cardLast4` method correctly sets the `cardLast4` property of the `LegalActionInitiationRequest` object when a valid value is provided.
Execution:
  Arrange: Create an instance of `LegalActionInitiationRequest`.
  Act: Invoke the `cardLast4` method with a valid string value representing the last 4 digits of a card.
  Assert: Use JUnit assertions to verify that the `cardLast4` property of the `LegalActionInitiationRequest` object is set to the provided value.
Validation:
  The assertion ensures that the `cardLast4` method correctly updates the `cardLast4` property of the `LegalActionInitiationRequest` object. This test is important to validate that the method behaves as expected when provided with valid input.

Scenario 2: Null cardLast4 value

Details:
  TestName: nullCardLast4Value
  Description: This test verifies that the `cardLast4` method handles a null value correctly and does not throw any exceptions.
Execution:
  Arrange: Create an instance of `LegalActionInitiationRequest`.
  Act: Invoke the `cardLast4` method with a null value.
  Assert: Use JUnit assertions to verify that no exceptions are thrown and the `cardLast4` property of the `LegalActionInitiationRequest` object remains unchanged.
Validation:
  The assertion ensures that the `cardLast4` method gracefully handles a null value without causing any unexpected behavior or exceptions. This test is important to validate the robustness of the method when dealing with null input.

Scenario 3: Empty cardLast4 value

Details:
  TestName: emptyCardLast4Value
  Description: This test verifies that the `cardLast4` method correctly handles an empty string value and sets the `cardLast4` property of the `LegalActionInitiationRequest` object accordingly.
Execution:
  Arrange: Create an instance of `LegalActionInitiationRequest`.
  Act: Invoke the `cardLast4` method with an empty string value.
  Assert: Use JUnit assertions to verify that the `cardLast4` property of the `LegalActionInitiationRequest` object is set to an empty string.
Validation:
  The assertion ensures that the `cardLast4` method correctly handles an empty string value and updates the `cardLast4` property of the `LegalActionInitiationRequest` object accordingly. This test is important to validate the behavior of the method when provided with an empty string input.

Scenario 4: Fluent API validation

Details:
  TestName: fluentApiValidation
  Description: This test verifies that the `cardLast4` method returns the `LegalActionInitiationRequest` object itself, allowing for fluent API usage.
Execution:
  Arrange: Create an instance of `LegalActionInitiationRequest`.
  Act: Invoke the `cardLast4` method with a valid string value and store the returned object.
  Assert: Use JUnit assertions to verify that the returned object is the same instance as the original `LegalActionInitiationRequest` object.
Validation:
  The assertion ensures that the `cardLast4` method follows the fluent API pattern by returning the `LegalActionInitiationRequest` object itself. This test is important to validate that the method can be chained with other methods for fluent API usage.

These test scenarios cover different aspects of the `cardLast4` method, including valid input, null input, empty string input, and fluent API validation. They ensure that the method behaves as expected under various conditions and help maintain the correctness and reliability of the code.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestCardLast4Test {
    @Test
    void validCardLast4Value() {
        // Arrange
        LegalActionInitiationRequest request = new LegalActionInitiationRequest();
        String validCardLast4 = "1234";
        // Act
        LegalActionInitiationRequest result = request.cardLast4(validCardLast4);
        // Assert
        Assertions.assertEquals(validCardLast4, result.getCardLast4());
    }
    @Test
    void nullCardLast4Value() {
        // Arrange
        LegalActionInitiationRequest request = new LegalActionInitiationRequest();
        String initialCardLast4 = request.getCardLast4();
        // Act
        LegalActionInitiationRequest result = request.cardLast4(null);
        // Assert
        Assertions.assertNull(result.getCardLast4());
        Assertions.assertEquals(initialCardLast4, request.getCardLast4());
    }
    @Test
    void emptyCardLast4Value() {
        // Arrange
        LegalActionInitiationRequest request = new LegalActionInitiationRequest();
        String emptyCardLast4 = "";
        // Act
        LegalActionInitiationRequest result = request.cardLast4(emptyCardLast4);
        // Assert
        Assertions.assertEquals(emptyCardLast4, result.getCardLast4());
    }
    @Test
    void fluentApiValidation() {
        // Arrange
        LegalActionInitiationRequest request = new LegalActionInitiationRequest();
        String validCardLast4 = "5678";
        // Act
        LegalActionInitiationRequest result = request.cardLast4(validCardLast4);
        // Assert
        Assertions.assertSame(request, result);
    }
}