// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=cardLast4_8ce6f88dcb
ROOST_METHOD_SIG_HASH=cardLast4_4a0a960fb4

Here are the JUnit test scenarios for the provided `cardLast4` method:

Scenario 1: Valid Card Last 4 Digits

Details:
  TestName: validCardLast4SetsValue
  Description: This test verifies that providing a valid card last 4 digits string sets the corresponding private field correctly and returns the current instance.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the cardLast4 method with a valid 4-digit string (e.g., "1234").
  Assert: Assert that the private cardLast4 field is set to the provided value using reflection. Assert that the returned object is the same instance of LegalActionInitiationRequest.
Validation:
  The assertion ensures that the cardLast4 method correctly sets the private field and returns the current instance, allowing for method chaining. This test is important to validate the basic functionality of the method.

Scenario 2: Null Card Last 4 Digits

Details:
  TestName: nullCardLast4ClearsValue
  Description: This test verifies that providing a null value as the card last 4 digits clears the corresponding private field and returns the current instance.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the cardLast4 method with a null value.
  Assert: Assert that the private cardLast4 field is set to null using reflection. Assert that the returned object is the same instance of LegalActionInitiationRequest.
Validation:
  The assertion ensures that the cardLast4 method handles null values correctly by clearing the private field and returning the current instance. This test is important to validate the behavior when no card last 4 digits are provided.

Scenario 3: Empty Card Last 4 Digits

Details:
  TestName: emptyCardLast4SetsValue
  Description: This test verifies that providing an empty string as the card last 4 digits sets the corresponding private field to an empty string and returns the current instance.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the cardLast4 method with an empty string ("").
  Assert: Assert that the private cardLast4 field is set to an empty string using reflection. Assert that the returned object is the same instance of LegalActionInitiationRequest.
Validation:
  The assertion ensures that the cardLast4 method handles empty strings correctly by setting the private field to an empty string and returning the current instance. This test is important to validate the behavior when an empty string is provided.

Scenario 4: Card Last 4 Digits with Less Than 4 Characters

Details:
  TestName: cardLast4WithLessThan4CharactersSetsValue
  Description: This test verifies that providing a string with less than 4 characters as the card last 4 digits sets the corresponding private field to the provided value and returns the current instance.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the cardLast4 method with a string containing less than 4 characters (e.g., "123").
  Assert: Assert that the private cardLast4 field is set to the provided value using reflection. Assert that the returned object is the same instance of LegalActionInitiationRequest.
Validation:
  The assertion ensures that the cardLast4 method handles strings with less than 4 characters correctly by setting the private field to the provided value and returning the current instance. This test is important to validate the behavior when a shorter string is provided.

Scenario 5: Card Last 4 Digits with More Than 4 Characters

Details:
  TestName: cardLast4WithMoreThan4CharactersSetsValue
  Description: This test verifies that providing a string with more than 4 characters as the card last 4 digits sets the corresponding private field to the provided value and returns the current instance.
Execution:
  Arrange: Create an instance of the LegalActionInitiationRequest class.
  Act: Invoke the cardLast4 method with a string containing more than 4 characters (e.g., "12345").
  Assert: Assert that the private cardLast4 field is set to the provided value using reflection. Assert that the returned object is the same instance of LegalActionInitiationRequest.
Validation:
  The assertion ensures that the cardLast4 method handles strings with more than 4 characters correctly by setting the private field to the provided value and returning the current instance. This test is important to validate the behavior when a longer string is provided.

Note: The provided method does not have any explicit validation or error handling for the cardLast4 parameter. If additional validation or error handling is added to the method, corresponding test scenarios should be created to cover those cases.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import java.lang.reflect.Field;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestCardLast4Test {

	private LegalActionInitiationRequest request;

	@BeforeEach
	void setUp() {
		request = new LegalActionInitiationRequest();
	}

	@Test
	void validCardLast4SetsValue() throws NoSuchFieldException, IllegalAccessException {
		String validCardLast4 = "1234";
		LegalActionInitiationRequest result = request.cardLast4(validCardLast4);
		Field cardLast4Field = LegalActionInitiationRequest.class.getDeclaredField("cardLast4");
		cardLast4Field.setAccessible(true);
		String actualCardLast4 = (String) cardLast4Field.get(request);
		assertSame(request, result);
		assertEquals(validCardLast4, actualCardLast4);
	}

	@Test
	void nullCardLast4ClearsValue() throws NoSuchFieldException, IllegalAccessException {
		LegalActionInitiationRequest result = request.cardLast4(null);
		Field cardLast4Field = LegalActionInitiationRequest.class.getDeclaredField("cardLast4");
		cardLast4Field.setAccessible(true);
		String actualCardLast4 = (String) cardLast4Field.get(request);
		assertSame(request, result);
		assertNull(actualCardLast4);
	}

	@Test
	void emptyCardLast4SetsValue() throws NoSuchFieldException, IllegalAccessException {
		String emptyCardLast4 = "";
		LegalActionInitiationRequest result = request.cardLast4(emptyCardLast4);
		Field cardLast4Field = LegalActionInitiationRequest.class.getDeclaredField("cardLast4");
		cardLast4Field.setAccessible(true);
		String actualCardLast4 = (String) cardLast4Field.get(request);
		assertSame(request, result);
		assertEquals(emptyCardLast4, actualCardLast4);
	}

	@ParameterizedTest
	@ValueSource(strings = { "1", "12", "123" })
	void cardLast4WithLessThan4CharactersSetsValue(String cardLast4)
			throws NoSuchFieldException, IllegalAccessException {
		LegalActionInitiationRequest result = request.cardLast4(cardLast4);
		Field cardLast4Field = LegalActionInitiationRequest.class.getDeclaredField("cardLast4");
		cardLast4Field.setAccessible(true);
		String actualCardLast4 = (String) cardLast4Field.get(request);
		assertSame(request, result);
		assertEquals(cardLast4, actualCardLast4);
	}

	@ParameterizedTest
	@ValueSource(strings = { "12345", "123456", "1234567890" })
	void cardLast4WithMoreThan4CharactersSetsValue(String cardLast4)
			throws NoSuchFieldException, IllegalAccessException {
		LegalActionInitiationRequest result = request.cardLast4(cardLast4);
		Field cardLast4Field = LegalActionInitiationRequest.class.getDeclaredField("cardLast4");
		cardLast4Field.setAccessible(true);
		String actualCardLast4 = (String) cardLast4Field.get(request);
		assertSame(request, result);
		assertEquals(cardLast4, actualCardLast4);
	}

}