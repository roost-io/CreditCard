// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=cardLast4_8ce6f88dcb
ROOST_METHOD_SIG_HASH=cardLast4_4a0a960fb4

Here are the JUnit test scenarios for the provided `cardLast4` method:

Scenario 1: Valid Card Last 4 Digits

Details:
  TestName: cardLast4WithValidInput
  Description: This test verifies that the `cardLast4` method correctly sets the `cardLast4` field when a valid input is provided and returns the current instance of `LegalActionInitiationRequest`.
Execution:
  Arrange: Create an instance of `LegalActionInitiationRequest`.
  Act: Invoke the `cardLast4` method with a valid input (e.g., "1234").
  Assert: Assert that the `cardLast4` field is set to the provided value and the method returns the current instance of `LegalActionInitiationRequest`.
Validation:
  The assertion ensures that the `cardLast4` field is correctly set and the method maintains the fluent API pattern by returning the current instance. This test validates the basic functionality of the `cardLast4` method.

Scenario 2: Null Card Last 4 Digits

Details:
  TestName: cardLast4WithNullInput
  Description: This test verifies the behavior of the `cardLast4` method when a null value is provided as input.
Execution:
  Arrange: Create an instance of `LegalActionInitiationRequest`.
  Act: Invoke the `cardLast4` method with a null value.
  Assert: Assert that the `cardLast4` field is set to null and the method returns the current instance of `LegalActionInitiationRequest`.
Validation:
  The assertion confirms that the `cardLast4` method handles null input gracefully by setting the `cardLast4` field to null and still returning the current instance. This test ensures that the method does not throw an exception or behave unexpectedly when given a null value.

Scenario 3: Empty Card Last 4 Digits

Details:
  TestName: cardLast4WithEmptyInput
  Description: This test verifies the behavior of the `cardLast4` method when an empty string is provided as input.
Execution:
  Arrange: Create an instance of `LegalActionInitiationRequest`.
  Act: Invoke the `cardLast4` method with an empty string.
  Assert: Assert that the `cardLast4` field is set to an empty string and the method returns the current instance of `LegalActionInitiationRequest`.
Validation:
  The assertion ensures that the `cardLast4` method allows setting the `cardLast4` field to an empty string and still maintains the fluent API pattern by returning the current instance. This test validates that the method does not reject or trim empty input.

Scenario 4: Card Last 4 Digits with Whitespace

Details:
  TestName: cardLast4WithWhitespaceInput
  Description: This test verifies the behavior of the `cardLast4` method when a string containing whitespace characters is provided as input.
Execution:
  Arrange: Create an instance of `LegalActionInitiationRequest`.
  Act: Invoke the `cardLast4` method with a string containing leading/trailing whitespace characters (e.g., " 1234 ").
  Assert: Assert that the `cardLast4` field is set to the provided value, including the whitespace characters, and the method returns the current instance of `LegalActionInitiationRequest`.
Validation:
  The assertion confirms that the `cardLast4` method preserves the whitespace characters in the input and does not perform any trimming or modification. This test ensures that the method handles input with whitespace characters as expected.

These test scenarios cover different aspects of the `cardLast4` method, including valid input, null input, empty input, and input with whitespace characters. They ensure that the method behaves correctly in various scenarios and maintains the fluent API pattern by returning the current instance of `LegalActionInitiationRequest`.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

class LegalActionInitiationRequestCardLast4Test {

	@Test
	void cardLast4WithValidInput() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		String validInput = "1234";
		// Act
		LegalActionInitiationRequest result = request.cardLast4(validInput);
		// Assert
		Assertions.assertEquals(validInput, request.getCardLast4());
		Assertions.assertSame(request, result);
	}

	@Test
	void cardLast4WithNullInput() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		// Act
		LegalActionInitiationRequest result = request.cardLast4(null);
		// Assert
		Assertions.assertNull(request.getCardLast4());
		Assertions.assertSame(request, result);
	}

	@Test
	void cardLast4WithEmptyInput() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		String emptyInput = "";
		// Act
		LegalActionInitiationRequest result = request.cardLast4(emptyInput);
		// Assert
		Assertions.assertEquals(emptyInput, request.getCardLast4());
		Assertions.assertSame(request, result);
	}

	@ParameterizedTest
	@ValueSource(strings = { " 1234", "1234 ", " 1234 " })
	void cardLast4WithWhitespaceInput(String input) {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		// Act
		LegalActionInitiationRequest result = request.cardLast4(input);
		// Assert
		Assertions.assertEquals(input, request.getCardLast4());
		Assertions.assertSame(request, result);
	}

	// Add the following test case
	@ParameterizedTest
	@ValueSource(strings = { "123", "12345", "abcd", "123a" })
	void cardLast4WithInvalidInput(String input) {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		// Act
		LegalActionInitiationRequest result = request.cardLast4(input);
		// Assert
		Assertions.assertEquals(input, request.getCardLast4());
		Assertions.assertSame(request, result);
		// TODO: Consider adding validation in the cardLast4 method to check for valid
		// input format (exactly 4 digits)
	}

}
