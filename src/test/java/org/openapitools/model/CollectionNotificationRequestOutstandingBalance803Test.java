// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=outstandingBalance_3aeba44d36
ROOST_METHOD_SIG_HASH=outstandingBalance_040ce8880b

Based on the provided method and imports, here are the generated test scenarios for the outstandingBalance method:

Scenario 1: Valid Outstanding Balance

Details:
  TestName: validOutstandingBalance
  Description: This test verifies that the outstandingBalance method correctly sets the outstandingBalance field when a valid string value is provided.
Execution:
  Arrange: Create an instance of the CollectionNotificationRequest class.
  Act: Invoke the outstandingBalance method with a valid string value.
  Assert: Use JUnit assertions to verify that the outstandingBalance field is set to the provided value and the method returns the same instance of CollectionNotificationRequest.
Validation:
  The assertion ensures that the outstandingBalance method correctly sets the outstandingBalance field and maintains the fluent interface by returning the same instance. This test is important to validate the basic functionality of the method.

Scenario 2: Null Outstanding Balance

Details:
  TestName: nullOutstandingBalance
  Description: This test verifies the behavior of the outstandingBalance method when a null value is provided as the outstanding balance.
Execution:
  Arrange: Create an instance of the CollectionNotificationRequest class.
  Act: Invoke the outstandingBalance method with a null value.
  Assert: Use JUnit assertions to verify that the outstandingBalance field is set to null and the method returns the same instance of CollectionNotificationRequest.
Validation:
  The assertion ensures that the outstandingBalance method handles null values correctly by setting the outstandingBalance field to null and maintaining the fluent interface. This test is important to validate the method's behavior when dealing with null values.

Scenario 3: Empty Outstanding Balance

Details:
  TestName: emptyOutstandingBalance
  Description: This test verifies the behavior of the outstandingBalance method when an empty string is provided as the outstanding balance.
Execution:
  Arrange: Create an instance of the CollectionNotificationRequest class.
  Act: Invoke the outstandingBalance method with an empty string value.
  Assert: Use JUnit assertions to verify that the outstandingBalance field is set to an empty string and the method returns the same instance of CollectionNotificationRequest.
Validation:
  The assertion ensures that the outstandingBalance method handles empty string values correctly by setting the outstandingBalance field to an empty string and maintaining the fluent interface. This test is important to validate the method's behavior when dealing with empty string values.

Scenario 4: Numeric Outstanding Balance

Details:
  TestName: numericOutstandingBalance
  Description: This test verifies that the outstandingBalance method correctly sets the outstandingBalance field when a numeric string value is provided.
Execution:
  Arrange: Create an instance of the CollectionNotificationRequest class.
  Act: Invoke the outstandingBalance method with a numeric string value.
  Assert: Use JUnit assertions to verify that the outstandingBalance field is set to the provided numeric string value and the method returns the same instance of CollectionNotificationRequest.
Validation:
  The assertion ensures that the outstandingBalance method correctly handles numeric string values by setting the outstandingBalance field accordingly and maintaining the fluent interface. This test is important to validate the method's behavior when dealing with numeric string values.

Note: The provided method does not include any specific validation or error handling for the outstandingBalance parameter. If there are any additional constraints or requirements for the outstandingBalance field, additional test scenarios should be created to cover those cases.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestOutstandingBalance803Test {
    private CollectionNotificationRequest collectionNotificationRequest;
    @BeforeEach
    void setUp() {
        collectionNotificationRequest = new CollectionNotificationRequest();
    }
    @Test
    void validOutstandingBalance() {
        String outstandingBalance = "1000.00";
        CollectionNotificationRequest result = collectionNotificationRequest.outstandingBalance(outstandingBalance);
        assertEquals(outstandingBalance, result.getOutstandingBalance());
        assertSame(collectionNotificationRequest, result);
    }
    @Test
    void nullOutstandingBalance() {
        String outstandingBalance = null;
        CollectionNotificationRequest result = collectionNotificationRequest.outstandingBalance(outstandingBalance);
        assertNull(result.getOutstandingBalance());
        assertSame(collectionNotificationRequest, result);
    }
    @Test
    void emptyOutstandingBalance() {
        String outstandingBalance = "";
        CollectionNotificationRequest result = collectionNotificationRequest.outstandingBalance(outstandingBalance);
        assertEquals("", result.getOutstandingBalance());
        assertSame(collectionNotificationRequest, result);
    }
    @ParameterizedTest
    @MethodSource("numericOutstandingBalanceProvider")
    void numericOutstandingBalance(String outstandingBalance) {
        CollectionNotificationRequest result = collectionNotificationRequest.outstandingBalance(outstandingBalance);
        assertEquals(outstandingBalance, result.getOutstandingBalance());
        assertSame(collectionNotificationRequest, result);
    }
    private static Stream<Arguments> numericOutstandingBalanceProvider() {
        return Stream.of(
                Arguments.of("0"),
                Arguments.of("100"),
                Arguments.of("9999.99")
        );
    }
}