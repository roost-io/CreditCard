// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setNonPaymentStatus_b00c68d428
ROOST_METHOD_SIG_HASH=setNonPaymentStatus_0f85920e9c

Here are some JUnit test scenarios for the setNonPaymentStatus method:

Scenario 1: Set Valid Non-Payment Status

Details:
  TestName: setValidNonPaymentStatus
  Description: This test checks if the setNonPaymentStatus method correctly sets a valid non-payment status value.
Execution:
  Arrange: Create an instance of the class containing the setNonPaymentStatus method.
  Act: Call the setNonPaymentStatus method with a valid non-payment status value.
  Assert: Use assertEquals to verify that the nonPaymentStatus field is set to the expected value.
Validation:
  The assertion verifies that the setNonPaymentStatus method correctly updates the nonPaymentStatus field when provided with a valid value.
  This test ensures that the method behaves as expected and the non-payment status is properly set.

Scenario 2: Set Null Non-Payment Status

Details:
  TestName: setNullNonPaymentStatus
  Description: This test checks if the setNonPaymentStatus method handles setting a null value for the non-payment status.
Execution:
  Arrange: Create an instance of the class containing the setNonPaymentStatus method.
  Act: Call the setNonPaymentStatus method with a null value.
  Assert: Use assertNull to verify that the nonPaymentStatus field remains null after calling the method.
Validation:
  The assertion verifies that the setNonPaymentStatus method does not throw an exception or modify the nonPaymentStatus field when provided with a null value.
  This test ensures that the method gracefully handles null values and does not introduce any unexpected behavior.

Scenario 3: Set Empty Non-Payment Status

Details:
  TestName: setEmptyNonPaymentStatus
  Description: This test checks if the setNonPaymentStatus method correctly handles setting an empty string as the non-payment status.
Execution:
  Arrange: Create an instance of the class containing the setNonPaymentStatus method.
  Act: Call the setNonPaymentStatus method with an empty string value.
  Assert: Use assertEquals to verify that the nonPaymentStatus field is set to an empty string.
Validation:
  The assertion verifies that the setNonPaymentStatus method allows setting an empty string as the non-payment status.
  This test ensures that the method does not reject or modify empty string values and sets them as-is.

Scenario 4: Set Non-Payment Status with Leading/Trailing Whitespace

Details:
  TestName: setNonPaymentStatusWithWhitespace
  Description: This test checks if the setNonPaymentStatus method correctly handles setting a non-payment status value with leading/trailing whitespace.
Execution:
  Arrange: Create an instance of the class containing the setNonPaymentStatus method.
  Act: Call the setNonPaymentStatus method with a non-payment status value surrounded by whitespace.
  Assert: Use assertEquals to verify that the nonPaymentStatus field is set to the trimmed value (without leading/trailing whitespace).
Validation:
  The assertion verifies that the setNonPaymentStatus method trims any leading/trailing whitespace from the provided value before setting it.
  This test ensures that the method handles input values with whitespace consistently and stores the trimmed value.

These test scenarios cover different aspects of the setNonPaymentStatus method, including setting valid values, handling null and empty values, and dealing with leading/trailing whitespace. They aim to ensure the method behaves as expected and maintains the integrity of the nonPaymentStatus field.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestSetNonPaymentStatusTest {

	private LegalActionInitiationRequest legalActionInitiationRequest;

	@BeforeEach
	void setUp() {
		legalActionInitiationRequest = new LegalActionInitiationRequest();
	}

	@Test
	void setValidNonPaymentStatus() {
		String validNonPaymentStatus = "PENDING";
		legalActionInitiationRequest.setNonPaymentStatus(validNonPaymentStatus);
		assertEquals(validNonPaymentStatus, legalActionInitiationRequest.getNonPaymentStatus());
	}

	@Test
	void setNullNonPaymentStatus() {
		legalActionInitiationRequest.setNonPaymentStatus(null);
		assertNull(legalActionInitiationRequest.getNonPaymentStatus());
	}

	@Test
	void setEmptyNonPaymentStatus() {
		String emptyNonPaymentStatus = "";
		legalActionInitiationRequest.setNonPaymentStatus(emptyNonPaymentStatus);
		assertEquals(emptyNonPaymentStatus, legalActionInitiationRequest.getNonPaymentStatus());
	}

	@ParameterizedTest
	@ValueSource(strings = { " PENDING", "PENDING ", " PENDING " })
	void setNonPaymentStatusWithWhitespace(String nonPaymentStatusWithWhitespace) {
		legalActionInitiationRequest.setNonPaymentStatus(nonPaymentStatusWithWhitespace);
		// Modify the assertion to expect the input value with whitespace
		assertEquals(nonPaymentStatusWithWhitespace, legalActionInitiationRequest.getNonPaymentStatus());
	}

}
