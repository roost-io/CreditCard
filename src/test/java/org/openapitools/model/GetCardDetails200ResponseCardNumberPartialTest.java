// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=cardNumberPartial_04fe6f7542
ROOST_METHOD_SIG_HASH=cardNumberPartial_e7ae1dfa63

Here are the JUnit test scenarios for the provided `cardNumberPartial` method:

Scenario 1: Valid Card Number Partial

Details:
  TestName: validCardNumberPartial
  Description: This test verifies that the `cardNumberPartial` method correctly sets the `cardNumberPartial` field and returns the `GetCardDetails200Response` instance when a valid card number partial is provided.
Execution:
  Arrange: Create an instance of `GetCardDetails200Response`.
  Act: Invoke the `cardNumberPartial` method with a valid card number partial string.
  Assert: Assert that the returned object is the same instance of `GetCardDetails200Response` and assert that the `cardNumberPartial` field is set to the provided value.
Validation:
  The assertion verifies that the `cardNumberPartial` method correctly sets the `cardNumberPartial` field and returns the same instance of `GetCardDetails200Response`. This test ensures that the method behaves as expected when a valid card number partial is provided, maintaining the integrity of the object state.

Scenario 2: Null Card Number Partial

Details:
  TestName: nullCardNumberPartial
  Description: This test verifies that the `cardNumberPartial` method handles a null card number partial gracefully and sets the `cardNumberPartial` field to null.
Execution:
  Arrange: Create an instance of `GetCardDetails200Response`.
  Act: Invoke the `cardNumberPartial` method with a null value.
  Assert: Assert that the returned object is the same instance of `GetCardDetails200Response` and assert that the `cardNumberPartial` field is set to null.
Validation:
  The assertion verifies that the `cardNumberPartial` method correctly handles a null value and sets the `cardNumberPartial` field to null. This test ensures that the method does not throw any exceptions and maintains the object state when a null value is provided.

Scenario 3: Empty Card Number Partial

Details:
  TestName: emptyCardNumberPartial
  Description: This test verifies that the `cardNumberPartial` method handles an empty card number partial string and sets the `cardNumberPartial` field to an empty string.
Execution:
  Arrange: Create an instance of `GetCardDetails200Response`.
  Act: Invoke the `cardNumberPartial` method with an empty string.
  Assert: Assert that the returned object is the same instance of `GetCardDetails200Response` and assert that the `cardNumberPartial` field is set to an empty string.
Validation:
  The assertion verifies that the `cardNumberPartial` method correctly handles an empty string and sets the `cardNumberPartial` field to an empty string. This test ensures that the method does not throw any exceptions and maintains the object state when an empty string is provided.

Scenario 4: Card Number Partial with Special Characters

Details:
  TestName: cardNumberPartialWithSpecialCharacters
  Description: This test verifies that the `cardNumberPartial` method correctly handles a card number partial string that contains special characters.
Execution:
  Arrange: Create an instance of `GetCardDetails200Response`.
  Act: Invoke the `cardNumberPartial` method with a card number partial string that includes special characters.
  Assert: Assert that the returned object is the same instance of `GetCardDetails200Response` and assert that the `cardNumberPartial` field is set to the provided value, including the special characters.
Validation:
  The assertion verifies that the `cardNumberPartial` method correctly handles a card number partial string with special characters and sets the `cardNumberPartial` field accordingly. This test ensures that the method does not modify or sanitize the input and maintains the object state when special characters are included.

These test scenarios cover various cases, including valid input, null input, empty input, and input with special characters. They ensure that the `cardNumberPartial` method behaves as expected in different scenarios and maintains the integrity of the `GetCardDetails200Response` object.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;

class GetCardDetails200ResponseCardNumberPartialTest {

	@Test
	void validCardNumberPartial() {
		// Arrange
		GetCardDetails200Response response = new GetCardDetails200Response();
		String validCardNumberPartial = "1234";
		// Act
		GetCardDetails200Response result = response.cardNumberPartial(validCardNumberPartial);
		// Assert
		assertSame(response, result);
		assertEquals(validCardNumberPartial, response.getCardNumberPartial());
	}

	@Test
	void nullCardNumberPartial() {
		// Arrange
		GetCardDetails200Response response = new GetCardDetails200Response();
		// Act
		GetCardDetails200Response result = response.cardNumberPartial(null);
		// Assert
		assertSame(response, result);
		assertNull(response.getCardNumberPartial());
	}

	@Test
	void emptyCardNumberPartial() {
		// Arrange
		GetCardDetails200Response response = new GetCardDetails200Response();
		String emptyCardNumberPartial = "";
		// Act
		GetCardDetails200Response result = response.cardNumberPartial(emptyCardNumberPartial);
		// Assert
		assertSame(response, result);
		assertEquals(emptyCardNumberPartial, response.getCardNumberPartial());
	}

	@ParameterizedTest
	@ValueSource(strings = { "!@#$%", "abc123", "12-34", "56_78" })
	void cardNumberPartialWithSpecialCharacters(String cardNumberPartial) {
		// Arrange
		GetCardDetails200Response response = new GetCardDetails200Response();
		// Act
		GetCardDetails200Response result = response.cardNumberPartial(cardNumberPartial);
		// Assert
		assertSame(response, result);
		assertEquals(cardNumberPartial, response.getCardNumberPartial());
	}

	// Add test case for card number partial with length greater than 4 digits
	@Test
	void cardNumberPartialWithLengthGreaterThan4() {
		// Arrange
		GetCardDetails200Response response = new GetCardDetails200Response();
		String longCardNumberPartial = "123456789";
		// Act
		GetCardDetails200Response result = response.cardNumberPartial(longCardNumberPartial);
		// Assert
		assertSame(response, result);
		assertEquals(longCardNumberPartial, response.getCardNumberPartial());
		// Consider adding validation in the business logic to restrict the length to 4
		// digits
	}

}
