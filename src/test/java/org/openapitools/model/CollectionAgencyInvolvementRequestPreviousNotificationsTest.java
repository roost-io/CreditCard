// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=previousNotifications_d8c110299f
ROOST_METHOD_SIG_HASH=previousNotifications_7faeaa91ab

Here are the JUnit test scenarios for the provided method:

Scenario 1: Set Previous Notifications

Details:
  TestName: previousNotificationsReturnsInstance
  Description: This test verifies that the previousNotifications method sets the previousNotifications field correctly and returns the current instance of CollectionAgencyInvolvementRequest.
Execution:
  Arrange: Create an instance of CollectionAgencyInvolvementRequest.
  Act: Invoke the previousNotifications method with a valid string value.
  Assert: Assert that the returned object is the same instance of CollectionAgencyInvolvementRequest and the previousNotifications field is set to the provided value.
Validation:
  The assertion ensures that the method behaves as expected by returning the current instance for method chaining and correctly setting the previousNotifications field. This test is important to validate the basic functionality of the method.

Scenario 2: Set Previous Notifications to Null

Details:
  TestName: previousNotificationsWithNull
  Description: This test checks the behavior of the previousNotifications method when passed a null value.
Execution:
  Arrange: Create an instance of CollectionAgencyInvolvementRequest.
  Act: Invoke the previousNotifications method with a null value.
  Assert: Assert that the returned object is the same instance of CollectionAgencyInvolvementRequest and the previousNotifications field is set to null.
Validation:
  The assertion verifies that the method handles null values correctly by setting the previousNotifications field to null and returning the current instance. This test ensures that the method does not throw an exception when provided with a null value.

Scenario 3: Set Previous Notifications to Empty String

Details:
  TestName: previousNotificationsWithEmptyString
  Description: This test examines the behavior of the previousNotifications method when passed an empty string.
Execution:
  Arrange: Create an instance of CollectionAgencyInvolvementRequest.
  Act: Invoke the previousNotifications method with an empty string.
  Assert: Assert that the returned object is the same instance of CollectionAgencyInvolvementRequest and the previousNotifications field is set to an empty string.
Validation:
  The assertion confirms that the method handles empty strings correctly by setting the previousNotifications field to an empty string and returning the current instance. This test ensures that the method does not treat empty strings differently from other valid string values.

Scenario 4: Set Previous Notifications with Maximum Length

Details:
  TestName: previousNotificationsWithMaxLength
  Description: This test verifies the behavior of the previousNotifications method when passed a string with the maximum allowed length.
Execution:
  Arrange: Create an instance of CollectionAgencyInvolvementRequest and determine the maximum allowed length for the previousNotifications field based on any applicable validation annotations or constraints.
  Act: Invoke the previousNotifications method with a string of the maximum allowed length.
  Assert: Assert that the returned object is the same instance of CollectionAgencyInvolvementRequest and the previousNotifications field is set to the provided string.
Validation:
  The assertion ensures that the method handles strings of the maximum allowed length correctly by setting the previousNotifications field to the provided value and returning the current instance. This test validates that the method does not truncate or reject strings that are within the allowed length limit.

Note: The test scenarios assume that the CollectionAgencyInvolvementRequest class has a getter method for the previousNotifications field to facilitate assertions. If not, you may need to use reflection or other techniques to access the private field for verification purposes.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import static org.junit.jupiter.api.Assertions.*;

class CollectionAgencyInvolvementRequestPreviousNotificationsTest {

	private CollectionAgencyInvolvementRequest request;

	@BeforeEach
	void setUp() {
		request = new CollectionAgencyInvolvementRequest();
	}

	@Test
	void previousNotificationsReturnsInstance() {
		String previousNotifications = "Sample Notifications";
		CollectionAgencyInvolvementRequest result = request.previousNotifications(previousNotifications);
		assertSame(request, result);
		assertEquals(previousNotifications, request.getPreviousNotifications());
	}

	@Test
	void previousNotificationsWithNull() {
		CollectionAgencyInvolvementRequest result = request.previousNotifications(null);
		assertSame(request, result);
		assertNull(request.getPreviousNotifications());
	}

	@Test
	void previousNotificationsWithEmptyString() {
		String previousNotifications = "";
		CollectionAgencyInvolvementRequest result = request.previousNotifications(previousNotifications);
		assertSame(request, result);
		assertEquals(previousNotifications, request.getPreviousNotifications());
	}

	@ParameterizedTest
	@ValueSource(strings = { "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
			"Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
			"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat." })
	void previousNotificationsWithMaxLength(String previousNotifications) {
		CollectionAgencyInvolvementRequest result = request.previousNotifications(previousNotifications);
		assertSame(request, result);
		assertEquals(previousNotifications, request.getPreviousNotifications());
	}

}
