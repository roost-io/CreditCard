// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_87ba2ead00
ROOST_METHOD_SIG_HASH=equals_f2d574000d

Here are the JUnit test scenarios for the provided equals method:

Scenario 1: Test equality of identical objects

Details:
  TestName: equalsIdenticalObjects
  Description: This test verifies that the equals method returns true when comparing an object to itself.
Execution:
  Arrange: Create an instance of GetCardDetails200Response with a specific cardNumberPartial value.
  Act: Invoke the equals method on the instance, passing the same instance as the argument.
  Assert: Assert that the equals method returns true.
Validation:
  The assertion verifies that the equals method correctly identifies an object as equal to itself.
  This test ensures that the equals method adheres to the reflexive property of equality.

Scenario 2: Test equality of objects with the same cardNumberPartial

Details:
  TestName: equalsSameCardNumberPartial
  Description: This test verifies that the equals method returns true when comparing two GetCardDetails200Response objects with the same cardNumberPartial value.
Execution:
  Arrange: Create two instances of GetCardDetails200Response with the same cardNumberPartial value.
  Act: Invoke the equals method on one instance, passing the other instance as the argument.
  Assert: Assert that the equals method returns true.
Validation:
  The assertion verifies that the equals method correctly identifies two objects as equal when they have the same cardNumberPartial value.
  This test ensures that the equals method correctly compares the cardNumberPartial field for equality.

Scenario 3: Test inequality of objects with different cardNumberPartial

Details:
  TestName: equalsDifferentCardNumberPartial
  Description: This test verifies that the equals method returns false when comparing two GetCardDetails200Response objects with different cardNumberPartial values.
Execution:
  Arrange: Create two instances of GetCardDetails200Response with different cardNumberPartial values.
  Act: Invoke the equals method on one instance, passing the other instance as the argument.
  Assert: Assert that the equals method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies two objects as not equal when they have different cardNumberPartial values.
  This test ensures that the equals method correctly distinguishes objects based on the cardNumberPartial field.

Scenario 4: Test inequality of object with null

Details:
  TestName: equalsNull
  Description: This test verifies that the equals method returns false when comparing a GetCardDetails200Response object with null.
Execution:
  Arrange: Create an instance of GetCardDetails200Response with a specific cardNumberPartial value.
  Act: Invoke the equals method on the instance, passing null as the argument.
  Assert: Assert that the equals method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies an object as not equal to null.
  This test ensures that the equals method handles the case when the compared object is null.

Scenario 5: Test inequality of object with different class

Details:
  TestName: equalsDifferentClass
  Description: This test verifies that the equals method returns false when comparing a GetCardDetails200Response object with an object of a different class.
Execution:
  Arrange: Create an instance of GetCardDetails200Response with a specific cardNumberPartial value and an object of a different class (e.g., String).
  Act: Invoke the equals method on the GetCardDetails200Response instance, passing the object of a different class as the argument.
  Assert: Assert that the equals method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies an object as not equal to an object of a different class.
  This test ensures that the equals method correctly distinguishes objects based on their class type.

These test scenarios cover various aspects of the equals method, including equality of identical objects, equality based on the cardNumberPartial field, inequality with null and objects of different classes. They ensure that the equals method behaves correctly according to the equality contract and handles different scenarios appropriately.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class GetCardDetails200ResponseEqualsTest {
    @Test
    void equalsIdenticalObjects() {
        GetCardDetails200Response response1 = new GetCardDetails200Response().cardNumberPartial("1234");
        assertTrue(response1.equals(response1));
    }
    @Test
    void equalsSameCardNumberPartial() {
        GetCardDetails200Response response1 = new GetCardDetails200Response().cardNumberPartial("1234");
        GetCardDetails200Response response2 = new GetCardDetails200Response().cardNumberPartial("1234");
        assertTrue(response1.equals(response2));
    }
    @Test
    void equalsDifferentCardNumberPartial() {
        GetCardDetails200Response response1 = new GetCardDetails200Response().cardNumberPartial("1234");
        GetCardDetails200Response response2 = new GetCardDetails200Response().cardNumberPartial("5678");
        assertFalse(response1.equals(response2));
    }
    @Test
    void equalsNull() {
        GetCardDetails200Response response = new GetCardDetails200Response().cardNumberPartial("1234");
        assertFalse(response.equals(null));
    }
    @Test
    void equalsDifferentClass() {
        GetCardDetails200Response response = new GetCardDetails200Response().cardNumberPartial("1234");
        String otherObject = "1234";
        assertFalse(response.equals(otherObject));
    }
}