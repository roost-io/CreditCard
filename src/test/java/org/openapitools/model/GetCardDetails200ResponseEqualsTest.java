// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_76bef6018f
ROOST_METHOD_SIG_HASH=equals_ded257778a

Here are the JUnit test scenarios for the provided equals method:

Scenario 1: Equality of the Same Object

Details:
  TestName: equalityOfSameObject()
  Description: This test verifies that the equals method returns true when comparing an object to itself.
Execution:
  Arrange: Create an instance of the GetCardDetails200Response class.
  Act: Invoke the equals method on the instance, passing the same instance as the argument.
  Assert: Assert that the method returns true using assertEquals(true, result).
Validation:
  The assertion verifies that the equals method correctly identifies that an object is equal to itself.
  This test ensures the reflexive property of equality, which is a fundamental requirement for the equals method.

Scenario 2: Inequality with Null

Details:
  TestName: inequalityWithNull()
  Description: This test verifies that the equals method returns false when comparing an object to null.
Execution:
  Arrange: Create an instance of the GetCardDetails200Response class.
  Act: Invoke the equals method on the instance, passing null as the argument.
  Assert: Assert that the method returns false using assertEquals(false, result).
Validation:
  The assertion verifies that the equals method correctly handles the case when the compared object is null.
  This test ensures that the equals method does not throw a NullPointerException and returns false for null comparisons.

Scenario 3: Inequality with Different Class

Details:
  TestName: inequalityWithDifferentClass()
  Description: This test verifies that the equals method returns false when comparing an object to an instance of a different class.
Execution:
  Arrange: Create an instance of the GetCardDetails200Response class and an instance of a different class (e.g., Object).
  Act: Invoke the equals method on the GetCardDetails200Response instance, passing the instance of the different class as the argument.
  Assert: Assert that the method returns false using assertEquals(false, result).
Validation:
  The assertion verifies that the equals method correctly identifies that objects of different classes are not equal.
  This test ensures that the equals method properly checks the class of the compared object before performing further comparisons.

Scenario 4: Equality with Same cardNumberPartial Value

Details:
  TestName: equalityWithSameCardNumberPartial()
  Description: This test verifies that the equals method returns true when comparing two GetCardDetails200Response objects with the same cardNumberPartial value.
Execution:
  Arrange: Create two instances of the GetCardDetails200Response class with the same cardNumberPartial value.
  Act: Invoke the equals method on one instance, passing the other instance as the argument.
  Assert: Assert that the method returns true using assertEquals(true, result).
Validation:
  The assertion verifies that the equals method correctly identifies that two GetCardDetails200Response objects with the same cardNumberPartial value are equal.
  This test ensures that the equals method properly compares the cardNumberPartial field when determining equality.

Scenario 5: Inequality with Different cardNumberPartial Value

Details:
  TestName: inequalityWithDifferentCardNumberPartial()
  Description: This test verifies that the equals method returns false when comparing two GetCardDetails200Response objects with different cardNumberPartial values.
Execution:
  Arrange: Create two instances of the GetCardDetails200Response class with different cardNumberPartial values.
  Act: Invoke the equals method on one instance, passing the other instance as the argument.
  Assert: Assert that the method returns false using assertEquals(false, result).
Validation:
  The assertion verifies that the equals method correctly identifies that two GetCardDetails200Response objects with different cardNumberPartial values are not equal.
  This test ensures that the equals method properly distinguishes between objects based on the cardNumberPartial field.

These test scenarios cover various aspects of the equals method, including equality of the same object, inequality with null and different classes, and equality and inequality based on the cardNumberPartial field. They ensure that the equals method behaves correctly according to the equals contract and the specific implementation logic.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class GetCardDetails200ResponseEqualsTest {

	@Test
	void equalityOfSameObject() {
		GetCardDetails200Response response = new GetCardDetails200Response();
		response.setCardNumberPartial("1234");

		boolean result = response.equals(response);

		assertTrue(result);
	}

	@Test
	void inequalityWithNull() {
		GetCardDetails200Response response = new GetCardDetails200Response();
		response.setCardNumberPartial("1234");

		boolean result = response.equals(null);

		assertFalse(result);
	}

	@Test
	void inequalityWithDifferentClass() {
		GetCardDetails200Response response = new GetCardDetails200Response();
		response.setCardNumberPartial("1234");

		Object obj = new Object();

		boolean result = response.equals(obj);

		assertFalse(result);
	}

	@Test
	void equalityWithSameCardNumberPartial() {
		GetCardDetails200Response response1 = new GetCardDetails200Response();
		response1.setCardNumberPartial("1234");

		GetCardDetails200Response response2 = new GetCardDetails200Response();
		response2.setCardNumberPartial("1234");

		boolean result = response1.equals(response2);

		assertTrue(result);
	}

	@Test
	void inequalityWithDifferentCardNumberPartial() {
		GetCardDetails200Response response1 = new GetCardDetails200Response();
		response1.setCardNumberPartial("1234");

		GetCardDetails200Response response2 = new GetCardDetails200Response();
		response2.setCardNumberPartial("5678");

		boolean result = response1.equals(response2);

		assertFalse(result);
	}

}