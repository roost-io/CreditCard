// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_76bef6018f
ROOST_METHOD_SIG_HASH=equals_ded257778a

Here are the JUnit test scenarios for the provided equals method:

Scenario 1: Equality Check with Same Object

Details:
  TestName: equalsSameObject()
  Description: This test verifies that the equals method returns true when comparing an object to itself.
Execution:
  Arrange: Create an instance of the GetCardDetails200Response class.
  Act: Invoke the equals method, passing the same instance as the argument.
  Assert: Use assertEquals to verify that the method returns true.
Validation:
  The assertion checks that the equals method correctly identifies an object as equal to itself.
  This test ensures the reflexive property of equality is maintained.

Scenario 2: Equality Check with Equal Objects

Details:
  TestName: equalsEqualObjects()
  Description: This test verifies that the equals method returns true when comparing two objects with the same cardNumberPartial value.
Execution:
  Arrange: Create two instances of the GetCardDetails200Response class with the same cardNumberPartial value.
  Act: Invoke the equals method on one instance, passing the other instance as the argument.
  Assert: Use assertEquals to verify that the method returns true.
Validation:
  The assertion checks that the equals method correctly identifies two objects as equal when they have the same cardNumberPartial value.
  This test ensures the symmetric property of equality is maintained.

Scenario 3: Equality Check with Unequal Objects

Details:
  TestName: equalsUnequalObjects()
  Description: This test verifies that the equals method returns false when comparing two objects with different cardNumberPartial values.
Execution:
  Arrange: Create two instances of the GetCardDetails200Response class with different cardNumberPartial values.
  Act: Invoke the equals method on one instance, passing the other instance as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion checks that the equals method correctly identifies two objects as unequal when they have different cardNumberPartial values.
  This test ensures the equals method distinguishes between objects based on their cardNumberPartial values.

Scenario 4: Equality Check with Null Object

Details:
  TestName: equalsNullObject()
  Description: This test verifies that the equals method returns false when comparing an object to null.
Execution:
  Arrange: Create an instance of the GetCardDetails200Response class.
  Act: Invoke the equals method, passing null as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion checks that the equals method correctly handles the case when the compared object is null.
  This test ensures the equals method does not throw a NullPointerException and returns false for null comparisons.

Scenario 5: Equality Check with Different Class Object

Details:
  TestName: equalsDifferentClassObject()
  Description: This test verifies that the equals method returns false when comparing an object to an instance of a different class.
Execution:
  Arrange: Create an instance of the GetCardDetails200Response class and an instance of a different class (e.g., String).
  Act: Invoke the equals method on the GetCardDetails200Response instance, passing the different class instance as the argument.
  Assert: Use assertFalse to verify that the method returns false.
Validation:
  The assertion checks that the equals method correctly identifies objects of different classes as unequal.
  This test ensures the equals method maintains the contract of equality by comparing the class of the objects.

These test scenarios cover various aspects of the equals method, including equality checks with the same object, equal objects, unequal objects, null objects, and objects of different classes. They ensure the correctness and consistency of the equals implementation in the GetCardDetails200Response class.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class GetCardDetails200ResponseEqualsTest {

	@Test
	void equalsSameObject() {
		GetCardDetails200Response response = new GetCardDetails200Response();
		assertTrue(response.equals(response));
	}

	@ParameterizedTest
	@MethodSource("provideEqualObjects")
	void equalsEqualObjects(GetCardDetails200Response response1, GetCardDetails200Response response2) {
		assertTrue(response1.equals(response2));
		assertTrue(response2.equals(response1));
	}

	private static Stream<Arguments> provideEqualObjects() {
		return Stream.of(Arguments.of(new GetCardDetails200Response(), new GetCardDetails200Response()),
				Arguments.of(new GetCardDetails200Response().cardNumberPartial("1234"),
						new GetCardDetails200Response().cardNumberPartial("1234")));
	}

	@ParameterizedTest
	@MethodSource("provideUnequalObjects")
	void equalsUnequalObjects(GetCardDetails200Response response1, GetCardDetails200Response response2) {
		assertFalse(response1.equals(response2));
		assertFalse(response2.equals(response1));
	}

	private static Stream<Arguments> provideUnequalObjects() {
		return Stream.of(
				Arguments.of(new GetCardDetails200Response().cardNumberPartial("1234"),
						new GetCardDetails200Response().cardNumberPartial("5678")),
				Arguments.of(new GetCardDetails200Response().cardNumberPartial("1234"),
						new GetCardDetails200Response()));
	}

	@Test
	void equalsNullObject() {
		GetCardDetails200Response response = new GetCardDetails200Response();
		assertFalse(response.equals(null));
	}

	@Test
	void equalsDifferentClassObject() {
		GetCardDetails200Response response = new GetCardDetails200Response();
		assertFalse(response.equals("string"));
	}

}
