// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=delinquencyStatus_b469ffc152
ROOST_METHOD_SIG_HASH=delinquencyStatus_225684ea79

Here are the JUnit test scenarios for the provided delinquencyStatus method:

Scenario 1: Valid Delinquency Status Update

Details:
  TestName: validDelinquencyStatusUpdate
  Description: This test verifies that the delinquencyStatus method correctly updates the delinquencyStatus field when a valid status is provided and returns the CollectionNotificationRequest instance.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the delinquencyStatus method with a valid delinquency status string.
  Assert: Assert that the returned CollectionNotificationRequest instance is the same as the original instance and verify that the delinquencyStatus field is updated with the provided value.
Validation:
  The assertion ensures that the delinquencyStatus method correctly updates the delinquencyStatus field and returns the CollectionNotificationRequest instance for method chaining. This test validates the basic functionality of updating the delinquency status.

Scenario 2: Null Delinquency Status Update

Details:
  TestName: nullDelinquencyStatusUpdate
  Description: This test checks the behavior of the delinquencyStatus method when a null value is passed as the delinquency status. It verifies that the method handles null values gracefully.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the delinquencyStatus method with a null value.
  Assert: Assert that the returned CollectionNotificationRequest instance is the same as the original instance and verify that the delinquencyStatus field remains unchanged (null).
Validation:
  The assertion confirms that passing a null value to the delinquencyStatus method does not modify the existing delinquencyStatus field. This test ensures that the method does not throw any exceptions or have unexpected behavior when encountering a null value.

Scenario 3: Empty Delinquency Status Update

Details:
  TestName: emptyDelinquencyStatusUpdate
  Description: This test verifies the behavior of the delinquencyStatus method when an empty string is provided as the delinquency status. It checks if the method handles empty strings appropriately.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the delinquencyStatus method with an empty string.
  Assert: Assert that the returned CollectionNotificationRequest instance is the same as the original instance and verify that the delinquencyStatus field is updated with the empty string.
Validation:
  The assertion validates that the delinquencyStatus method allows setting an empty string as the delinquency status. This test ensures that the method does not reject or trim empty strings and updates the field accordingly.

Scenario 4: Delinquency Status Update with Whitespace

Details:
  TestName: delinquencyStatusUpdateWithWhitespace
  Description: This test checks if the delinquencyStatus method correctly handles and preserves whitespace characters in the provided delinquency status string.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the delinquencyStatus method with a string containing leading/trailing whitespace characters.
  Assert: Assert that the returned CollectionNotificationRequest instance is the same as the original instance and verify that the delinquencyStatus field is updated with the provided string, including the whitespace characters.
Validation:
  The assertion ensures that the delinquencyStatus method does not trim or modify the provided delinquency status string and preserves any whitespace characters. This test validates that the method handles and stores the delinquency status exactly as provided.

These test scenarios cover different aspects of the delinquencyStatus method, including valid updates, null values, empty strings, and whitespace handling. They ensure that the method behaves as expected in various scenarios and provide confidence in its functionality.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestDelinquencyStatusTest {

	private CollectionNotificationRequest request;

	@BeforeEach
	void setUp() {
		request = new CollectionNotificationRequest();
	}

	@Test
	void validDelinquencyStatusUpdate() {
		String delinquencyStatus = "OVERDUE";
		CollectionNotificationRequest result = request.delinquencyStatus(delinquencyStatus);
		assertSame(request, result);
		assertEquals(delinquencyStatus, request.getDelinquencyStatus());
	}

	@ParameterizedTest
	@NullSource
	void nullDelinquencyStatusUpdate(String delinquencyStatus) {
		CollectionNotificationRequest result = request.delinquencyStatus(delinquencyStatus);
		assertSame(request, result);
		assertNull(request.getDelinquencyStatus());
	}

	@ParameterizedTest
	@ValueSource(strings = { "", " " })
	void emptyDelinquencyStatusUpdate(String delinquencyStatus) {
		CollectionNotificationRequest result = request.delinquencyStatus(delinquencyStatus);
		assertSame(request, result);
		assertEquals(delinquencyStatus, request.getDelinquencyStatus());
	}

	@ParameterizedTest
	@CsvSource({ "' OVERDUE ',  OVERDUE ", "'OVERDUE ',OVERDUE ", "' OVERDUE', OVERDUE" })
	void delinquencyStatusUpdateWithWhitespace(String input, String expected) {
		CollectionNotificationRequest result = request.delinquencyStatus(input);
		assertSame(request, result);
		assertEquals(input, request.getDelinquencyStatus());
	}

}