// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=delinquencyStatus_b469ffc152
ROOST_METHOD_SIG_HASH=delinquencyStatus_225684ea79

Here are the JUnit test scenarios for the `delinquencyStatus` method:

Scenario 1: Valid Delinquency Status

Details:
  TestName: validDelinquencyStatus
  Description: This test verifies that the `delinquencyStatus` method sets the `delinquencyStatus` property correctly when a valid delinquency status is provided.
Execution:
  Arrange: Create an instance of the `CollectionNotificationRequest` class.
  Act: Invoke the `delinquencyStatus` method with a valid delinquency status string.
  Assert: Use JUnit assertions to verify that the `delinquencyStatus` property of the `CollectionNotificationRequest` instance is set to the provided value.
Validation:
  The assertion ensures that the `delinquencyStatus` method correctly sets the `delinquencyStatus` property of the `CollectionNotificationRequest` instance. This test is important to validate that the method behaves as expected when a valid delinquency status is provided.

Scenario 2: Null Delinquency Status

Details:
  TestName: nullDelinquencyStatus
  Description: This test verifies that the `delinquencyStatus` method handles a null delinquency status correctly.
Execution:
  Arrange: Create an instance of the `CollectionNotificationRequest` class.
  Act: Invoke the `delinquencyStatus` method with a null value.
  Assert: Use JUnit assertions to verify that the `delinquencyStatus` property of the `CollectionNotificationRequest` instance is set to null.
Validation:
  The assertion ensures that the `delinquencyStatus` method correctly sets the `delinquencyStatus` property to null when a null value is provided. This test is important to validate that the method handles null values gracefully and does not throw any exceptions.

Scenario 3: Empty Delinquency Status

Details:
  TestName: emptyDelinquencyStatus
  Description: This test verifies that the `delinquencyStatus` method handles an empty delinquency status string correctly.
Execution:
  Arrange: Create an instance of the `CollectionNotificationRequest` class.
  Act: Invoke the `delinquencyStatus` method with an empty string.
  Assert: Use JUnit assertions to verify that the `delinquencyStatus` property of the `CollectionNotificationRequest` instance is set to an empty string.
Validation:
  The assertion ensures that the `delinquencyStatus` method correctly sets the `delinquencyStatus` property to an empty string when an empty string is provided. This test is important to validate that the method handles empty strings appropriately and does not throw any exceptions.

Scenario 4: Fluent API

Details:
  TestName: fluentApi
  Description: This test verifies that the `delinquencyStatus` method returns the `CollectionNotificationRequest` instance, allowing for fluent API usage.
Execution:
  Arrange: Create an instance of the `CollectionNotificationRequest` class.
  Act: Invoke the `delinquencyStatus` method with a valid delinquency status string and store the returned value.
  Assert: Use JUnit assertions to verify that the returned value is the same instance of the `CollectionNotificationRequest` class.
Validation:
  The assertion ensures that the `delinquencyStatus` method returns the `CollectionNotificationRequest` instance, enabling fluent API usage. This test is important to validate that the method can be chained with other methods of the `CollectionNotificationRequest` class.

These test scenarios cover different aspects of the `delinquencyStatus` method, including valid and null/empty delinquency status values, as well as the fluent API behavior. They help ensure the correctness and robustness of the method implementation.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestDelinquencyStatusTest {

	private CollectionNotificationRequest request;

	@BeforeEach
	void setUp() {
		request = new CollectionNotificationRequest();
	}

	@ParameterizedTest
	@ValueSource(strings = { "NEW", "PARTIAL_PAYMENT", "PAID_IN_FULL" })
	void validDelinquencyStatus(String delinquencyStatus) {
		CollectionNotificationRequest result = request.delinquencyStatus(delinquencyStatus);
		assertEquals(delinquencyStatus, request.getDelinquencyStatus());
		assertSame(request, result);
	}

	@ParameterizedTest
	@NullSource
	void nullDelinquencyStatus(String delinquencyStatus) {
		CollectionNotificationRequest result = request.delinquencyStatus(delinquencyStatus);
		assertNull(request.getDelinquencyStatus());
		assertSame(request, result);
	}

	@Test
	void emptyDelinquencyStatus() {
		String delinquencyStatus = "";
		CollectionNotificationRequest result = request.delinquencyStatus(delinquencyStatus);
		assertEquals(delinquencyStatus, request.getDelinquencyStatus());
		assertSame(request, result);
	}

	@Test
	void fluentApi() {
		String delinquencyStatus = "NEW";
		CollectionNotificationRequest result = request.delinquencyStatus(delinquencyStatus);
		assertSame(request, result);
	}

}