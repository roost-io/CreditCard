// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=delinquencyStatus_b469ffc152
ROOST_METHOD_SIG_HASH=delinquencyStatus_225684ea79

Here are the generated test scenarios for the delinquencyStatus method:

Scenario 1: Test setting delinquency status to a valid value

Details:
  TestName: setDelinquencyStatusToValidValue
  Description: This test checks if the delinquencyStatus method correctly sets the delinquencyStatus field when provided with a valid string value and returns the current instance of CollectionNotificationRequest.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the delinquencyStatus method with a valid string value.
  Assert: Assert that the delinquencyStatus field is set to the provided value and the method returns the current instance.
Validation:
  The assertion verifies that the setter method behaves as expected by updating the private field and returning the instance for method chaining. This test ensures the basic functionality of the setter method.

Scenario 2: Test setting delinquency status to null

Details:
  TestName: setDelinquencyStatusToNull
  Description: This test checks if the delinquencyStatus method allows setting the delinquencyStatus field to null and returns the current instance of CollectionNotificationRequest.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the delinquencyStatus method with a null value.
  Assert: Assert that the delinquencyStatus field is set to null and the method returns the current instance.
Validation:
  The assertion verifies that the setter method can accept a null value for the delinquencyStatus field. This test ensures that the method does not throw an exception when provided with null and allows resetting the field.

Scenario 3: Test setting delinquency status to an empty string

Details:
  TestName: setDelinquencyStatusToEmptyString
  Description: This test checks if the delinquencyStatus method allows setting the delinquencyStatus field to an empty string and returns the current instance of CollectionNotificationRequest.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the delinquencyStatus method with an empty string value.
  Assert: Assert that the delinquencyStatus field is set to an empty string and the method returns the current instance.
Validation:
  The assertion verifies that the setter method can accept an empty string value for the delinquencyStatus field. This test ensures that the method does not throw an exception when provided with an empty string and allows setting the field to an empty value.

Scenario 4: Test method chaining with delinquencyStatus

Details:
  TestName: methodChainingWithDelinquencyStatus
  Description: This test checks if the delinquencyStatus method supports method chaining by returning the current instance of CollectionNotificationRequest, allowing multiple setter methods to be called in a single statement.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the delinquencyStatus method along with other setter methods in a chained manner.
  Assert: Assert that the delinquencyStatus field and other fields are set to the provided values.
Validation:
  The assertion verifies that the setter method returns the current instance, enabling method chaining. This test ensures that the method follows the fluent interface pattern and allows for more concise and readable code when setting multiple fields.

Note: The test scenarios assume that the CollectionNotificationRequest class has a getter method for the delinquencyStatus field to facilitate assertions.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestDelinquencyStatusTest {

	@Test
	@DisplayName("Test setting delinquency status to a valid value")
	void setDelinquencyStatusToValidValue() {
		// Arrange
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		String validStatus = "OVERDUE";
		// Act
		CollectionNotificationRequest result = request.delinquencyStatus(validStatus);
		// Assert
		assertEquals(validStatus, request.getDelinquencyStatus());
		assertSame(request, result);
	}

	@Test
	@DisplayName("Test setting delinquency status to null")
	void setDelinquencyStatusToNull() {
		// Arrange
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		// Act
		CollectionNotificationRequest result = request.delinquencyStatus(null);
		// Assert
		assertNull(request.getDelinquencyStatus());
		assertSame(request, result);
	}

	@Test
	@DisplayName("Test setting delinquency status to an empty string")
	void setDelinquencyStatusToEmptyString() {
		// Arrange
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		String emptyStatus = "";
		// Act
		CollectionNotificationRequest result = request.delinquencyStatus(emptyStatus);
		// Assert
		assertEquals(emptyStatus, request.getDelinquencyStatus());
		assertSame(request, result);
	}

	@Test
	@DisplayName("Test method chaining with delinquencyStatus")
	void methodChainingWithDelinquencyStatus() {
		// Arrange
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		String status = "OVERDUE";
		String balance = "1000.00";
		String charges = "50.00";
		String cardLast4 = "1234";
		// Act
		CollectionNotificationRequest result = request.delinquencyStatus(status)
			.outstandingBalance(balance)
			.additionalCharges(charges)
			.cardLast4(cardLast4);
		// Assert
		assertEquals(status, request.getDelinquencyStatus());
		assertEquals(balance, request.getOutstandingBalance());
		assertEquals(charges, request.getAdditionalCharges());
		assertEquals(cardLast4, request.getCardLast4());
		assertSame(request, result);
	}

}
