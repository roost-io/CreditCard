// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_577b60535e
ROOST_METHOD_SIG_HASH=equals_f2d574000d

Here are the JUnit test scenarios for the provided `equals` method:

Scenario 1: Comparing object with itself

Details:
  TestName: equalsComparingWithSelf
  Description: This test verifies that the equals method returns true when comparing an object with itself.
Execution:
  Arrange: Create an instance of CollectionAgencyInvolvementRequest.
  Act: Invoke the equals method, passing the same instance as the argument.
  Assert: Assert that the result is true using assertTrue.
Validation:
  The assertion verifies that the equals method correctly identifies an object as equal to itself.
  This test ensures the reflexive property of the equals method.

Scenario 2: Comparing with null object

Details:
  TestName: equalsComparingWithNull
  Description: This test checks that the equals method returns false when comparing with a null object.
Execution:
  Arrange: Create an instance of CollectionAgencyInvolvementRequest.
  Act: Invoke the equals method, passing null as the argument.
  Assert: Assert that the result is false using assertFalse.
Validation:
  The assertion verifies that the equals method correctly handles comparison with a null object.
  This test ensures the null-safe behavior of the equals method.

Scenario 3: Comparing with object of different class

Details:
  TestName: equalsComparingWithDifferentClass
  Description: This test verifies that the equals method returns false when comparing with an object of a different class.
Execution:
  Arrange: Create an instance of CollectionAgencyInvolvementRequest and an object of a different class (e.g., String).
  Act: Invoke the equals method, passing the object of a different class as the argument.
  Assert: Assert that the result is false using assertFalse.
Validation:
  The assertion verifies that the equals method correctly identifies objects of different classes as not equal.
  This test ensures the class equality check in the equals method.

Scenario 4: Comparing with object having same property values

Details:
  TestName: equalsComparingWithSamePropertyValues
  Description: This test checks that the equals method returns true when comparing with an object having the same property values.
Execution:
  Arrange: Create two instances of CollectionAgencyInvolvementRequest with the same property values.
  Act: Invoke the equals method, passing one instance as the argument to compare with the other instance.
  Assert: Assert that the result is true using assertTrue.
Validation:
  The assertion verifies that the equals method correctly identifies objects with the same property values as equal.
  This test ensures the proper comparison of property values in the equals method.

Scenario 5: Comparing with object having different property values

Details:
  TestName: equalsComparingWithDifferentPropertyValues
  Description: This test verifies that the equals method returns false when comparing with an object having different property values.
Execution:
  Arrange: Create two instances of CollectionAgencyInvolvementRequest with different property values.
  Act: Invoke the equals method, passing one instance as the argument to compare with the other instance.
  Assert: Assert that the result is false using assertFalse.
Validation:
  The assertion verifies that the equals method correctly identifies objects with different property values as not equal.
  This test ensures the proper comparison of property values in the equals method.

These test scenarios cover various aspects of the `equals` method, including comparing an object with itself, handling null objects, comparing objects of different classes, and comparing objects with the same and different property values. They help ensure the correctness and robustness of the `equals` method implementation.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionAgencyInvolvementRequestEquals622Test {
    @Test
    void equalsComparingWithSelf() {
        CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest()
                .previousNotifications("notifications")
                .responseStatus("status")
                .cardLast4("1234");
        assertTrue(request.equals(request));
    }
    @Test
    void equalsComparingWithNull() {
        CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest()
                .previousNotifications("notifications")
                .responseStatus("status")
                .cardLast4("1234");
        assertFalse(request.equals(null));
    }
    @Test
    void equalsComparingWithDifferentClass() {
        CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest()
                .previousNotifications("notifications")
                .responseStatus("status")
                .cardLast4("1234");
        assertFalse(request.equals("Different Class"));
    }
    @Test
    void equalsComparingWithSamePropertyValues() {
        CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest()
                .previousNotifications("notifications")
                .responseStatus("status")
                .cardLast4("1234");
        CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest()
                .previousNotifications("notifications")
                .responseStatus("status")
                .cardLast4("1234");
        assertTrue(request1.equals(request2));
    }
    @Test
    void equalsComparingWithDifferentPropertyValues() {
        CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest()
                .previousNotifications("notifications")
                .responseStatus("status")
                .cardLast4("1234");
        CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest()
                .previousNotifications("different notifications")
                .responseStatus("different status")
                .cardLast4("5678");
        assertFalse(request1.equals(request2));
    }
}