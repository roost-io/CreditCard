// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setCardLast4_1ec3bfb1aa
ROOST_METHOD_SIG_HASH=setCardLast4_67db513785

Here are the JUnit test scenarios for the setCardLast4 method:

Scenario 1: Valid Card Last 4 Digits

Details:
  TestName: setCardLast4WithValidInput
  Description: This test verifies that the setCardLast4 method correctly sets the cardLast4 field when provided with a valid input.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with a valid input, such as "1234".
  Assert: Use assertEquals to verify that the cardLast4 field is set to the expected value.
Validation:
  The assertion ensures that the setCardLast4 method correctly updates the cardLast4 field when given a valid input.
  This test is important to ensure that the method behaves as expected and stores the correct value.

Scenario 2: Null Card Last 4 Digits

Details:
  TestName: setCardLast4WithNullInput
  Description: This test verifies the behavior of the setCardLast4 method when provided with a null input.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with a null input.
  Assert: Use assertNull to verify that the cardLast4 field remains null after the method invocation.
Validation:
  The assertion checks that the setCardLast4 method handles a null input gracefully and does not modify the cardLast4 field.
  This test is important to ensure that the method does not throw an exception or set an invalid value when given a null input.

Scenario 3: Empty Card Last 4 Digits

Details:
  TestName: setCardLast4WithEmptyInput
  Description: This test verifies the behavior of the setCardLast4 method when provided with an empty string input.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with an empty string input.
  Assert: Use assertEquals to verify that the cardLast4 field is set to an empty string.
Validation:
  The assertion ensures that the setCardLast4 method correctly sets the cardLast4 field to an empty string when given an empty input.
  This test is important to verify that the method handles empty inputs as expected and does not throw an exception.

Scenario 4: Card Last 4 Digits with Leading/Trailing Whitespace

Details:
  TestName: setCardLast4WithWhitespaceInput
  Description: This test verifies that the setCardLast4 method correctly trims leading and trailing whitespace from the input.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with an input containing leading and trailing whitespace, such as "  1234  ".
  Assert: Use assertEquals to verify that the cardLast4 field is set to the trimmed value, without any leading or trailing whitespace.
Validation:
  The assertion ensures that the setCardLast4 method correctly trims any leading or trailing whitespace from the input before setting the cardLast4 field.
  This test is important to handle inputs with unintended whitespace and maintain data consistency.

Note: The test scenarios assume that the setCardLast4 method is a public method within the class containing the fields mentioned in the provided information. The test scenarios focus on the behavior of the setCardLast4 method and do not rely on the other fields or methods in the class.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import static org.junit.jupiter.api.Assertions.*;

class BalanceAlertRequestSetCardLast4Test {

	private BalanceAlertRequest balanceAlertRequest;

	@BeforeEach
	void setUp() {
		balanceAlertRequest = new BalanceAlertRequest();
	}

	@Test
	void setCardLast4WithValidInput() {
		String validCardLast4 = "1234";
		balanceAlertRequest.setCardLast4(validCardLast4);
		assertEquals(validCardLast4, balanceAlertRequest.getCardLast4());
	}

	@Test
	void setCardLast4WithNullInput() {
		balanceAlertRequest.setCardLast4(null);
		assertNull(balanceAlertRequest.getCardLast4());
	}

	@Test
	void setCardLast4WithEmptyInput() {
		String emptyCardLast4 = "";
		balanceAlertRequest.setCardLast4(emptyCardLast4);
		assertEquals(emptyCardLast4, balanceAlertRequest.getCardLast4());
	}

	@Test
	void setCardLast4WithWhitespaceInput() {
		String whitespaceCardLast4 = "  1234  ";
		balanceAlertRequest.setCardLast4(whitespaceCardLast4);
		assertEquals(whitespaceCardLast4.trim(), balanceAlertRequest.getCardLast4());
	}

	@ParameterizedTest
	@ValueSource(strings = { "1234", "5678", "9012", "3456" })
	void setCardLast4WithMultipleValidInputs(String cardLast4) {
		balanceAlertRequest.setCardLast4(cardLast4);
		assertEquals(cardLast4, balanceAlertRequest.getCardLast4());
	}

	// Commented out test case as it is not clear if length validation is required
	// @Test
	// void setCardLast4WithInvalidLengthInput() {
	// String invalidLengthCardLast4 = "12345";
	// balanceAlertRequest.setCardLast4(invalidLengthCardLast4);
	// assertEquals(invalidLengthCardLast4, balanceAlertRequest.getCardLast4());
	// }

	// Commented out test case as it is not clear if numeric validation is required
	// @Test
	// void setCardLast4WithNonNumericInput() {
	// String nonNumericCardLast4 = "abcd";
	// balanceAlertRequest.setCardLast4(nonNumericCardLast4);
	// assertEquals(nonNumericCardLast4, balanceAlertRequest.getCardLast4());
	// }

}
