// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_ee72d9c54f
ROOST_METHOD_SIG_HASH=equals_ded257778a

Here are some JUnit test scenarios for the provided equals method:

Scenario 1: Comparing object with itself

Details:
  TestName: equalsComparingWithSelf
  Description: This test verifies that comparing an object with itself using the equals method returns true.
Execution:
  Arrange: Create an instance of CollectionAgencyInvolvementRequest.
  Act: Invoke the equals method, passing the same instance as the argument.
  Assert: Use assertEquals to verify that the result is true.
Validation:
  The assertion checks that an object is equal to itself, which is a fundamental property of the equals method.
  This test ensures that the equals method correctly handles self-comparison.

Scenario 2: Comparing object with null

Details:
  TestName: equalsComparingWithNull
  Description: This test verifies that comparing an object with null using the equals method returns false.
Execution:
  Arrange: Create an instance of CollectionAgencyInvolvementRequest.
  Act: Invoke the equals method, passing null as the argument.
  Assert: Use assertEquals to verify that the result is false.
Validation:
  The assertion checks that comparing an object with null returns false, as an object should not be considered equal to null.
  This test ensures that the equals method correctly handles comparison with null.

Scenario 3: Comparing object with an instance of a different class

Details:
  TestName: equalsComparingWithDifferentClass
  Description: This test verifies that comparing an object with an instance of a different class using the equals method returns false.
Execution:
  Arrange: Create an instance of CollectionAgencyInvolvementRequest and an instance of a different class (e.g., String).
  Act: Invoke the equals method, passing the instance of the different class as the argument.
  Assert: Use assertEquals to verify that the result is false.
Validation:
  The assertion checks that comparing an object with an instance of a different class returns false, as objects of different classes should not be considered equal.
  This test ensures that the equals method correctly handles comparison with objects of different classes.

Scenario 4: Comparing objects with equal field values

Details:
  TestName: equalsComparingWithEqualFieldValues
  Description: This test verifies that comparing two objects with equal values for all fields using the equals method returns true.
Execution:
  Arrange: Create two instances of CollectionAgencyInvolvementRequest with equal values for previousNotifications, responseStatus, and cardLast4 fields.
  Act: Invoke the equals method, passing one instance as the argument to compare with the other instance.
  Assert: Use assertEquals to verify that the result is true.
Validation:
  The assertion checks that when all fields of two objects have equal values, the equals method returns true.
  This test ensures that the equals method correctly compares the relevant fields and returns true when they are equal.

Scenario 5: Comparing objects with unequal field values

Details:
  TestName: equalsComparingWithUnequalFieldValues
  Description: This test verifies that comparing two objects with unequal values for at least one field using the equals method returns false.
Execution:
  Arrange: Create two instances of CollectionAgencyInvolvementRequest with unequal values for at least one field (e.g., different previousNotifications).
  Act: Invoke the equals method, passing one instance as the argument to compare with the other instance.
  Assert: Use assertEquals to verify that the result is false.
Validation:
  The assertion checks that when at least one field of two objects has unequal values, the equals method returns false.
  This test ensures that the equals method correctly compares the relevant fields and returns false when they are not equal.

These test scenarios cover various aspects of the equals method, including self-comparison, comparison with null, comparison with objects of different classes, and comparison based on field values. They help ensure the correctness and robustness of the equals implementation.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionAgencyInvolvementRequestEqualsTest {

	@Test
	void equalsComparingWithSelf() {
		CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest("notification1", "status1",
				"1234");
		assertTrue(request.equals(request));
	}

	@Test
	void equalsComparingWithNull() {
		CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest("notification1", "status1",
				"1234");
		assertFalse(request.equals(null));
	}

	@Test
	void equalsComparingWithDifferentClass() {
		CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest("notification1", "status1",
				"1234");
		String otherObject = "not a CollectionAgencyInvolvementRequest";
		assertFalse(request.equals(otherObject));
	}

	@Test
	void equalsComparingWithEqualFieldValues() {
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest("notification1", "status1",
				"1234");
		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest("notification1", "status1",
				"1234");
		assertTrue(request1.equals(request2));
	}

	@Test
	void equalsComparingWithUnequalFieldValues() {
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest("notification1", "status1",
				"1234");
		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest("notification2", "status1",
				"1234");
		assertFalse(request1.equals(request2));
	}

	@Test
	void equalsComparingWithUnequalResponseStatus() {
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest("notification1", "status1",
				"1234");
		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest("notification1", "status2",
				"1234");
		assertFalse(request1.equals(request2));
	}

	@Test
	void equalsComparingWithUnequalCardLast4() {
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest("notification1", "status1",
				"1234");
		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest("notification1", "status1",
				"5678");
		assertFalse(request1.equals(request2));
	}

	@Test
	void equalsComparingWithNullFields() {
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest(null, null, null);
		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest(null, null, null);
		assertTrue(request1.equals(request2));
	}

}