// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=equals_577b60535e
ROOST_METHOD_SIG_HASH=equals_f2d574000d

Here are the JUnit test scenarios for the provided equals method:

Scenario 1: Test equality with the same object

Details:
  TestName: equalsWithSameObject
  Description: This test verifies that the equals method returns true when comparing an object with itself.
Execution:
  Arrange: Create an instance of CollectionAgencyInvolvementRequest.
  Act: Invoke the equals method, passing the same object as the argument.
  Assert: Use assertTrue to check if the result is true.
Validation:
  The assertion verifies that the equals method correctly identifies equality when an object is compared with itself.
  This test ensures that the reflexive property of equality is satisfied.

Scenario 2: Test equality with null

Details:
  TestName: equalsWithNull
  Description: This test verifies that the equals method returns false when comparing an object with null.
Execution:
  Arrange: Create an instance of CollectionAgencyInvolvementRequest.
  Act: Invoke the equals method, passing null as the argument.
  Assert: Use assertFalse to check if the result is false.
Validation:
  The assertion verifies that the equals method correctly handles comparison with null and returns false.
  This test ensures that the equals method does not throw a NullPointerException and properly identifies inequality with null.

Scenario 3: Test equality with an object of a different class

Details:
  TestName: equalsWithDifferentClass
  Description: This test verifies that the equals method returns false when comparing an object with an instance of a different class.
Execution:
  Arrange: Create an instance of CollectionAgencyInvolvementRequest and an instance of a different class (e.g., String).
  Act: Invoke the equals method, passing the instance of the different class as the argument.
  Assert: Use assertFalse to check if the result is false.
Validation:
  The assertion verifies that the equals method correctly identifies inequality when comparing objects of different classes.
  This test ensures that the equals method properly checks the class of the objects being compared.

Scenario 4: Test equality with equal objects

Details:
  TestName: equalsWithEqualObjects
  Description: This test verifies that the equals method returns true when comparing two objects with equal field values.
Execution:
  Arrange: Create two instances of CollectionAgencyInvolvementRequest with the same field values.
  Act: Invoke the equals method, passing one of the instances as the argument.
  Assert: Use assertTrue to check if the result is true.
Validation:
  The assertion verifies that the equals method correctly identifies equality when comparing objects with equal field values.
  This test ensures that the equals method properly compares the relevant fields (previousNotifications, responseStatus, cardLast4) for equality.

Scenario 5: Test equality with unequal objects

Details:
  TestName: equalsWithUnequalObjects
  Description: This test verifies that the equals method returns false when comparing two objects with different field values.
Execution:
  Arrange: Create two instances of CollectionAgencyInvolvementRequest with different field values.
  Act: Invoke the equals method, passing one of the instances as the argument.
  Assert: Use assertFalse to check if the result is false.
Validation:
  The assertion verifies that the equals method correctly identifies inequality when comparing objects with different field values.
  This test ensures that the equals method properly compares the relevant fields (previousNotifications, responseStatus, cardLast4) and returns false if any of them are not equal.

These test scenarios cover various cases, including equality with the same object, null, objects of different classes, equal objects, and unequal objects. They ensure that the equals method behaves correctly and follows the expected contract for object equality.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionAgencyInvolvementRequestEqualsTest {

	@Test
	void equalsWithSameObject() {
		CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Success")
			.cardLast4("1234");

		assertTrue(request.equals(request));
	}

	@Test
	void equalsWithNull() {
		CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Success")
			.cardLast4("1234");

		assertFalse(request.equals(null));
	}

	@Test
	void equalsWithDifferentClass() {
		CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Success")
			.cardLast4("1234");

		assertFalse(request.equals("Different Class"));
	}

	@Test
	void equalsWithEqualObjects() {
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Success")
			.cardLast4("1234");

		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Success")
			.cardLast4("1234");

		assertTrue(request1.equals(request2));
	}

	@Test
	void equalsWithUnequalPreviousNotifications() {
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Success")
			.cardLast4("1234");

		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification2")
			.responseStatus("Success")
			.cardLast4("1234");

		assertFalse(request1.equals(request2));
	}

	@Test
	void equalsWithUnequalResponseStatus() {
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Success")
			.cardLast4("1234");

		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Failure")
			.cardLast4("1234");

		assertFalse(request1.equals(request2));
	}

	@Test
	void equalsWithUnequalCardLast4() {
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Success")
			.cardLast4("1234");

		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Success")
			.cardLast4("5678");

		assertFalse(request1.equals(request2));
	}

}