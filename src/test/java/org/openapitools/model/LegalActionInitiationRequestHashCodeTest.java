// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=hashCode_1a29e07257
ROOST_METHOD_SIG_HASH=hashCode_5a2657087a

Based on the provided method and import statements, here are the generated test scenarios:

Scenario 1: Test hashCode with equal objects

Details:
  TestName: hashCodeWithEqualObjects()
  Description: This test verifies that the hashCode method returns the same hash code for two objects with identical nonPaymentStatus, legalStatus, and cardLast4 values.
Execution:
  Arrange: Create two objects of the class with the same values for nonPaymentStatus, legalStatus, and cardLast4.
  Act: Invoke the hashCode method on both objects.
  Assert: Use assertEquals to verify that the returned hash codes are equal.
Validation:
  The assertion checks if the hashCode method adheres to the contract of returning the same hash code for equal objects.
  This test ensures that the hashCode implementation is consistent and follows the expected behavior for object equality.

Scenario 2: Test hashCode with unequal objects

Details:
  TestName: hashCodeWithUnequalObjects()
  Description: This test verifies that the hashCode method returns different hash codes for objects with different nonPaymentStatus, legalStatus, or cardLast4 values.
Execution:
  Arrange: Create two objects of the class with different values for at least one of nonPaymentStatus, legalStatus, or cardLast4.
  Act: Invoke the hashCode method on both objects.
  Assert: Use assertNotEquals to verify that the returned hash codes are not equal.
Validation:
  The assertion checks if the hashCode method generates different hash codes for objects with different attribute values.
  This test ensures that the hashCode implementation distinguishes between objects based on their attribute values.

Scenario 3: Test hashCode with null values

Details:
  TestName: hashCodeWithNullValues()
  Description: This test verifies that the hashCode method handles null values correctly and does not throw any exceptions.
Execution:
  Arrange: Create an object of the class with null values for nonPaymentStatus, legalStatus, and cardLast4.
  Act: Invoke the hashCode method on the object.
  Assert: Use assertDoesNotThrow to verify that no exception is thrown during the execution.
Validation:
  The assertion checks if the hashCode method gracefully handles null values without throwing any exceptions.
  This test ensures that the hashCode implementation is robust and can handle null values for the relevant attributes.

Scenario 4: Test hashCode with empty or default values

Details:
  TestName: hashCodeWithEmptyOrDefaultValues()
  Description: This test verifies that the hashCode method returns consistent hash codes for objects with empty or default values for nonPaymentStatus, legalStatus, and cardLast4.
Execution:
  Arrange: Create two objects of the class with empty or default values for nonPaymentStatus, legalStatus, and cardLast4.
  Act: Invoke the hashCode method on both objects.
  Assert: Use assertEquals to verify that the returned hash codes are equal.
Validation:
  The assertion checks if the hashCode method generates consistent hash codes for objects with empty or default attribute values.
  This test ensures that the hashCode implementation handles empty or default values correctly and maintains consistency.

Note: The actual test code implementation and specific assertions may vary based on the class structure and the behavior of the nonPaymentStatus, legalStatus, and cardLast4 attributes.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestHashCodeTest {
    @Test
    void hashCodeWithEqualObjects() {
        LegalActionInitiationRequest request1 = new LegalActionInitiationRequest()
                .nonPaymentStatus("status1")
                .legalStatus("legal1")
                .cardLast4("1234");
        LegalActionInitiationRequest request2 = new LegalActionInitiationRequest()
                .nonPaymentStatus("status1")
                .legalStatus("legal1")
                .cardLast4("1234");
        assertEquals(request1.hashCode(), request2.hashCode());
    }
    @Test
    void hashCodeWithUnequalObjects() {
        LegalActionInitiationRequest request1 = new LegalActionInitiationRequest()
                .nonPaymentStatus("status1")
                .legalStatus("legal1")
                .cardLast4("1234");
        LegalActionInitiationRequest request2 = new LegalActionInitiationRequest()
                .nonPaymentStatus("status2")
                .legalStatus("legal2")
                .cardLast4("5678");
        assertNotEquals(request1.hashCode(), request2.hashCode());
    }
    @Test
    void hashCodeWithNullValues() {
        LegalActionInitiationRequest request = new LegalActionInitiationRequest()
                .nonPaymentStatus(null)
                .legalStatus(null)
                .cardLast4(null);
        assertDoesNotThrow(request::hashCode);
    }
    @Test
    void hashCodeWithEmptyOrDefaultValues() {
        LegalActionInitiationRequest request1 = new LegalActionInitiationRequest()
                .nonPaymentStatus("")
                .legalStatus("")
                .cardLast4("");
        LegalActionInitiationRequest request2 = new LegalActionInitiationRequest()
                .nonPaymentStatus("")
                .legalStatus("")
                .cardLast4("");
        assertEquals(request1.hashCode(), request2.hashCode());
    }
}