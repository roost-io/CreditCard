// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=hashCode_0006bcf8c7
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8

Here are the JUnit test scenarios for the provided hashCode() method:

Scenario 1: Test hashCode with all fields set to non-null values

Details:
  TestName: hashCodeWithNonNullFields()
  Description: This test verifies that the hashCode() method returns the expected hash code when all fields (nonPaymentStatus, legalStatus, cardLast4) are set to non-null values.
Execution:
  Arrange: Create an instance of the class with non-null values for nonPaymentStatus, legalStatus, and cardLast4.
  Act: Invoke the hashCode() method on the created instance.
  Assert: Assert that the returned hash code matches the expected hash code calculated using Objects.hash(nonPaymentStatus, legalStatus, cardLast4).
Validation:
  The assertion verifies that the hashCode() method correctly calculates the hash code based on the values of nonPaymentStatus, legalStatus, and cardLast4 when they are all non-null. This test ensures that the hashCode() method behaves as expected for non-null field values.

Scenario 2: Test hashCode with all fields set to null

Details:
  TestName: hashCodeWithNullFields()
  Description: This test verifies that the hashCode() method returns the expected hash code when all fields (nonPaymentStatus, legalStatus, cardLast4) are set to null.
Execution:
  Arrange: Create an instance of the class with null values for nonPaymentStatus, legalStatus, and cardLast4.
  Act: Invoke the hashCode() method on the created instance.
  Assert: Assert that the returned hash code matches the expected hash code calculated using Objects.hash(null, null, null).
Validation:
  The assertion verifies that the hashCode() method correctly calculates the hash code even when all fields are null. This test ensures that the hashCode() method handles null field values gracefully and returns a consistent hash code.

Scenario 3: Test hashCode with a mix of null and non-null fields

Details:
  TestName: hashCodeWithMixedNullAndNonNullFields()
  Description: This test verifies that the hashCode() method returns the expected hash code when some fields are null and others are non-null.
Execution:
  Arrange: Create an instance of the class with a combination of null and non-null values for nonPaymentStatus, legalStatus, and cardLast4.
  Act: Invoke the hashCode() method on the created instance.
  Assert: Assert that the returned hash code matches the expected hash code calculated using Objects.hash(nonPaymentStatus, legalStatus, cardLast4) with the respective null and non-null values.
Validation:
  The assertion verifies that the hashCode() method correctly calculates the hash code when some fields are null and others are non-null. This test ensures that the hashCode() method handles a mix of null and non-null field values correctly.

Scenario 4: Test hashCode with different field values

Details:
  TestName: hashCodeWithDifferentFieldValues()
  Description: This test verifies that the hashCode() method returns different hash codes for instances with different field values.
Execution:
  Arrange: Create two instances of the class with different values for nonPaymentStatus, legalStatus, and cardLast4.
  Act: Invoke the hashCode() method on both instances.
  Assert: Assert that the returned hash codes are different for the two instances.
Validation:
  The assertion verifies that the hashCode() method generates different hash codes for instances with different field values. This test ensures that the hashCode() method provides a good distribution of hash codes based on the field values.

Note: The actual test code implementation would require the complete class definition and the ability to create instances of the class with the desired field values.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Objects;

class LegalActionInitiationRequestHashCodeTest {

	@Test
	void hashCodeWithNonNullFields() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest("UNPAID", "LEGAL", "1234");

		// Act
		int actualHashCode = request.hashCode();

		// Assert
		int expectedHashCode = Objects.hash("UNPAID", "LEGAL", "1234");
		assertEquals(expectedHashCode, actualHashCode);
	}

	@Test
	void hashCodeWithNullFields() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest(null, null, null);

		// Act
		int actualHashCode = request.hashCode();

		// Assert
		int expectedHashCode = Objects.hash(null, null, null);
		assertEquals(expectedHashCode, actualHashCode);
	}

	@Test
	void hashCodeWithMixedNullAndNonNullFields() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest("UNPAID", null, "1234");

		// Act
		int actualHashCode = request.hashCode();

		// Assert
		int expectedHashCode = Objects.hash("UNPAID", null, "1234");
		assertEquals(expectedHashCode, actualHashCode);
	}

	@Test
	void hashCodeWithDifferentFieldValues() {
		// Arrange
		LegalActionInitiationRequest request1 = new LegalActionInitiationRequest("UNPAID", "LEGAL", "1234");
		LegalActionInitiationRequest request2 = new LegalActionInitiationRequest("PAID", "NON_LEGAL", "5678");

		// Act
		int hashCode1 = request1.hashCode();
		int hashCode2 = request2.hashCode();

		// Assert
		assertNotEquals(hashCode1, hashCode2);
	}

	@Test
	void hashCodeWithEqualObjects() {
		// Arrange
		LegalActionInitiationRequest request1 = new LegalActionInitiationRequest("UNPAID", "LEGAL", "1234");
		LegalActionInitiationRequest request2 = new LegalActionInitiationRequest("UNPAID", "LEGAL", "1234");

		// Act
		int hashCode1 = request1.hashCode();
		int hashCode2 = request2.hashCode();

		// Assert
		assertEquals(hashCode1, hashCode2);
	}

}
