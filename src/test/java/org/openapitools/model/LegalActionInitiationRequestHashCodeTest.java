// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=hashCode_0006bcf8c7
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8

Here are the JUnit test scenarios for the provided hashCode() method:

Scenario 1: Test hashCode with all fields set to non-null values

Details:
  TestName: hashCodeWithAllFieldsSet
  Description: This test checks if the hashCode method generates the correct hash code when all fields (nonPaymentStatus, legalStatus, cardLast4) are set to non-null values.
Execution:
  Arrange: Create an instance of the class with all fields set to non-null values.
  Act: Call the hashCode method on the instance.
  Assert: Assert that the returned hash code matches the expected hash code calculated using Objects.hash(nonPaymentStatus, legalStatus, cardLast4).
Validation:
  The assertion verifies that the hashCode method correctly generates the hash code based on the values of all fields.
  This test ensures that the hashCode method behaves as expected when all fields have non-null values, which is important for proper functioning in hash-based data structures and equality comparisons.

Scenario 2: Test hashCode with all fields set to null

Details:
  TestName: hashCodeWithAllFieldsNull
  Description: This test checks if the hashCode method generates the correct hash code when all fields (nonPaymentStatus, legalStatus, cardLast4) are set to null.
Execution:
  Arrange: Create an instance of the class with all fields set to null.
  Act: Call the hashCode method on the instance.
  Assert: Assert that the returned hash code matches the expected hash code calculated using Objects.hash(null, null, null).
Validation:
  The assertion verifies that the hashCode method correctly generates the hash code even when all fields are null.
  This test ensures that the hashCode method handles null values correctly and does not throw any exceptions, maintaining the contract of the hashCode method.

Scenario 3: Test hashCode with some fields set to null

Details:
  TestName: hashCodeWithSomeFieldsNull
  Description: This test checks if the hashCode method generates the correct hash code when some fields (e.g., nonPaymentStatus and cardLast4) are set to null while others (e.g., legalStatus) have non-null values.
Execution:
  Arrange: Create an instance of the class with some fields set to null and others set to non-null values.
  Act: Call the hashCode method on the instance.
  Assert: Assert that the returned hash code matches the expected hash code calculated using Objects.hash(null, legalStatus, null), assuming nonPaymentStatus and cardLast4 are null and legalStatus has a non-null value.
Validation:
  The assertion verifies that the hashCode method correctly generates the hash code when some fields are null and others are non-null.
  This test ensures that the hashCode method handles a mix of null and non-null field values correctly, maintaining the consistency of hash codes.

Scenario 4: Test hashCode with different combinations of field values

Details:
  TestName: hashCodeWithDifferentFieldValues
  Description: This test checks if the hashCode method generates different hash codes for instances with different combinations of field values.
Execution:
  Arrange: Create multiple instances of the class with different combinations of field values.
  Act: Call the hashCode method on each instance.
  Assert: Assert that the returned hash codes are different for instances with different field values.
Validation:
  The assertion verifies that the hashCode method generates distinct hash codes for instances with different field values.
  This test ensures that the hashCode method provides a good distribution of hash codes, reducing the likelihood of collisions in hash-based data structures.

These test scenarios cover different aspects of the hashCode method, including handling of null values, different combinations of field values, and ensuring the consistency and correctness of the generated hash codes.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestHashCodeTest {

	@Test
	void hashCodeWithAllFieldsSet() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest("Non-Payment", "Legal", "1234");

		// Act
		int hashCode = request.hashCode();

		// Assert
		assertEquals(Objects.hash("Non-Payment", "Legal", "1234"), hashCode);
	}

	@Test
	void hashCodeWithAllFieldsNull() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest(null, null, null);

		// Act
		int hashCode = request.hashCode();

		// Assert
		assertEquals(Objects.hash(null, null, null), hashCode);
	}

	@Test
	void hashCodeWithSomeFieldsNull() {
		// Arrange
		LegalActionInitiationRequest request = new LegalActionInitiationRequest(null, "Legal", null);

		// Act
		int hashCode = request.hashCode();

		// Assert
		assertEquals(Objects.hash(null, "Legal", null), hashCode);
	}

	@Test
	void hashCodeWithDifferentFieldValues() {
		// Arrange
		LegalActionInitiationRequest request1 = new LegalActionInitiationRequest("Non-Payment", "Legal", "1234");
		LegalActionInitiationRequest request2 = new LegalActionInitiationRequest("Payment", "Illegal", "5678");

		// Act
		int hashCode1 = request1.hashCode();
		int hashCode2 = request2.hashCode();

		// Assert
		assertNotEquals(hashCode1, hashCode2);
	}

}