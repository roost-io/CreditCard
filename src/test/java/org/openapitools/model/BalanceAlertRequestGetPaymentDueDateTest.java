// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=getPaymentDueDate_c021437d74
ROOST_METHOD_SIG_HASH=getPaymentDueDate_3e26f8c373

Here are the generated test scenarios for the getPaymentDueDate method:

Scenario 1: Valid Payment Due Date Retrieval

Details:
  TestName: validPaymentDueDateRetrieval
  Description: This test verifies that the getPaymentDueDate method correctly retrieves the payment due date when a valid value is set.
Execution:
  Arrange: Set the paymentDueDate field to a specific LocalDate value.
  Act: Invoke the getPaymentDueDate method.
  Assert: Use assertEquals to compare the returned LocalDate value with the expected payment due date.
Validation:
  The assertion verifies that the getPaymentDueDate method returns the correct payment due date value.
  This test ensures that the method properly retrieves the stored payment due date when a valid value is present.

Scenario 2: Payment Due Date Not Set

Details:
  TestName: paymentDueDateNotSet
  Description: This test checks the behavior of the getPaymentDueDate method when the payment due date is not set (i.e., null).
Execution:
  Arrange: Ensure that the paymentDueDate field is null.
  Act: Invoke the getPaymentDueDate method.
  Assert: Use assertNull to verify that the returned value is null.
Validation:
  The assertion confirms that the getPaymentDueDate method returns null when the payment due date is not set.
  This test validates that the method handles the scenario where the payment due date is absent and returns an appropriate value.

Scenario 3: Payment Due Date Comparison with Current Date

Details:
  TestName: paymentDueDateComparisonWithCurrentDate
  Description: This test compares the payment due date retrieved by the getPaymentDueDate method with the current date.
Execution:
  Arrange: Set the paymentDueDate field to a specific LocalDate value and set the currentDate field to the current date.
  Act: Invoke the getPaymentDueDate method.
  Assert: Use assertTrue or assertFalse to compare the payment due date with the current date using the isBefore, isAfter, or isEqual methods of LocalDate.
Validation:
  The assertion verifies the relationship between the payment due date and the current date.
  This test ensures that the getPaymentDueDate method returns a payment due date that is consistent with the expected temporal relationship to the current date.

Scenario 4: Payment Due Date Format Validation

Details:
  TestName: paymentDueDateFormatValidation
  Description: This test validates that the getPaymentDueDate method returns a LocalDate object in the correct format.
Execution:
  Arrange: Set the paymentDueDate field to a specific LocalDate value.
  Act: Invoke the getPaymentDueDate method.
  Assert: Use assertTrue to verify that the returned LocalDate object can be successfully formatted using a specific DateTimeFormatter.
Validation:
  The assertion confirms that the payment due date returned by the method adheres to the expected format.
  This test ensures that the getPaymentDueDate method returns a properly formatted LocalDate object, which is important for consistent date representation and processing.

Note: The provided test scenarios assume the existence of necessary setup and teardown methods, as well as any required dependencies or configurations for the test class.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import static org.junit.jupiter.api.Assertions.*;

class BalanceAlertRequestGetPaymentDueDateTest {

	private BalanceAlertRequest balanceAlertRequest;

	@BeforeEach
	void setUp() {
		balanceAlertRequest = new BalanceAlertRequest();
	}

	@Test
	void validPaymentDueDateRetrieval() {
		// Arrange
		LocalDate expectedDate = LocalDate.of(2023, 6, 15);
		balanceAlertRequest.setPaymentDueDate(expectedDate);
		// Act
		LocalDate actualDate = balanceAlertRequest.getPaymentDueDate();
		// Assert
		assertEquals(expectedDate, actualDate);
	}

	@Test
	void paymentDueDateNotSet() {
		// Arrange
		balanceAlertRequest.setPaymentDueDate(null);
		// Act
		LocalDate actualDate = balanceAlertRequest.getPaymentDueDate();
		// Assert
		assertNull(actualDate);
	}

	@ParameterizedTest
	@CsvSource({ "2023-06-15, false", "2023-06-10, true", "2023-06-20, false" })
	void paymentDueDateComparisonWithCurrentDate(String dueDateStr, boolean isPastDue) {
		// Arrange
		LocalDate dueDate = LocalDate.parse(dueDateStr);
		LocalDate currentDate = LocalDate.of(2023, 6, 12); // Set a fixed current date for
															// testing
		balanceAlertRequest.setPaymentDueDate(dueDate);
		// Act
		LocalDate actualDueDate = balanceAlertRequest.getPaymentDueDate();
		// Assert
		assertEquals(isPastDue, actualDueDate.isBefore(currentDate));
	}

	@Test
	void paymentDueDateFormatValidation() {
		// Arrange
		LocalDate dueDate = LocalDate.of(2023, 6, 15);
		balanceAlertRequest.setPaymentDueDate(dueDate);
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		// Act
		LocalDate actualDueDate = balanceAlertRequest.getPaymentDueDate();
		// Assert
		assertTrue(actualDueDate.format(formatter).matches("\\d{4}-\\d{2}-\\d{2}"));
	}

}
