// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=installmentAmount_bad83d109a
ROOST_METHOD_SIG_HASH=installmentAmount_5df8337dbb

Here are the generated test scenarios for the `installmentAmount` method:

Scenario 1: Valid Installment Amount

Details:
  TestName: validInstallmentAmount()
  Description: This test verifies that the `installmentAmount` method correctly sets the `installmentAmount` field when a valid value is provided.
Execution:
  Arrange: Create an instance of the `PaymentPlanProposalRequestPaymentPlan` class.
  Act: Call the `installmentAmount` method with a valid string value.
  Assert: Use JUnit assertions to verify that the `installmentAmount` field is set to the provided value.
Validation:
  The assertion ensures that the `installmentAmount` field is correctly updated when a valid value is passed to the method.
  This test is important to validate that the method behaves as expected and the installment amount is properly stored.

Scenario 2: Null Installment Amount

Details:
  TestName: nullInstallmentAmount()
  Description: This test checks how the `installmentAmount` method handles a null value passed as the installment amount.
Execution:
  Arrange: Create an instance of the `PaymentPlanProposalRequestPaymentPlan` class.
  Act: Call the `installmentAmount` method with a null value.
  Assert: Use JUnit assertions to verify that the `installmentAmount` field remains unchanged or is set to a default value (if applicable).
Validation:
  The assertion verifies the behavior of the method when a null value is provided, ensuring that it doesn't cause any unexpected exceptions or side effects.
  This test is crucial to assess the method's resilience and proper handling of null inputs.

Scenario 3: Empty Installment Amount

Details:
  TestName: emptyInstallmentAmount()
  Description: This test evaluates the behavior of the `installmentAmount` method when an empty string is passed as the installment amount.
Execution:
  Arrange: Create an instance of the `PaymentPlanProposalRequestPaymentPlan` class.
  Act: Call the `installmentAmount` method with an empty string value.
  Assert: Use JUnit assertions to verify that the `installmentAmount` field is set to an empty string or a default value (if applicable).
Validation:
  The assertion confirms that the method handles an empty string input gracefully and sets the `installmentAmount` field accordingly.
  This test ensures that the method can handle empty values without causing any unexpected behavior or exceptions.

Scenario 4: Fluent API Test

Details:
  TestName: fluentApiTest()
  Description: This test verifies that the `installmentAmount` method returns the `PaymentPlanProposalRequestPaymentPlan` instance, allowing for fluent API usage.
Execution:
  Arrange: Create an instance of the `PaymentPlanProposalRequestPaymentPlan` class.
  Act: Call the `installmentAmount` method with a valid value and chain additional method calls.
  Assert: Use JUnit assertions to verify that the chained method calls are executed successfully and the final state of the object is as expected.
Validation:
  The assertion ensures that the `installmentAmount` method returns the `PaymentPlanProposalRequestPaymentPlan` instance, enabling fluent API usage.
  This test validates that the method supports method chaining and allows for a more expressive and readable code style.

These test scenarios cover different aspects of the `installmentAmount` method, including valid input, null input, empty input, and fluent API usage. They aim to ensure the correct behavior of the method under various conditions and validate its integration with the `PaymentPlanProposalRequestPaymentPlan` class.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class PaymentPlanProposalRequestPaymentPlanInstallmentAmountTest {
    private PaymentPlanProposalRequestPaymentPlan paymentPlan;
    @BeforeEach
    void setUp() {
        paymentPlan = new PaymentPlanProposalRequestPaymentPlan();
    }
    @ParameterizedTest
    @CsvSource({
            "100.00",
            "1000.50",
            "9999.99"
    })
    void validInstallmentAmount(String installmentAmount) {
        paymentPlan.installmentAmount(installmentAmount);
        assertEquals(installmentAmount, paymentPlan.getInstallmentAmount());
    }
    @ParameterizedTest
    @NullSource
    void nullInstallmentAmount(String installmentAmount) {
        paymentPlan.installmentAmount(installmentAmount);
        assertNull(paymentPlan.getInstallmentAmount());
    }
    @ParameterizedTest
    @ValueSource(strings = {""})
    void emptyInstallmentAmount(String installmentAmount) {
        paymentPlan.installmentAmount(installmentAmount);
        assertEquals("", paymentPlan.getInstallmentAmount());
    }
    @Test
    void fluentApiTest() {
        PaymentPlanProposalRequestPaymentPlan result = paymentPlan
                .installmentAmount("500.00")
                .interestRate("5.0")
                .termLength("12");
        assertSame(paymentPlan, result);
        assertEquals("500.00", paymentPlan.getInstallmentAmount());
        assertEquals("5.0", paymentPlan.getInterestRate());
        assertEquals("12", paymentPlan.getTermLength());
    }
}