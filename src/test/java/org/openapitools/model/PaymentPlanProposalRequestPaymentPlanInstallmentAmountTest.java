// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=installmentAmount_bad83d109a
ROOST_METHOD_SIG_HASH=installmentAmount_5df8337dbb

Here are the generated test scenarios for the installmentAmount method:

Scenario 1: Valid Installment Amount

Details:
  TestName: validInstallmentAmount
  Description: This test verifies that the installmentAmount method sets the installmentAmount field correctly when a valid installment amount is provided and returns the current instance of the PaymentPlanProposalRequestPaymentPlan class.
Execution:
  Arrange: Create an instance of the PaymentPlanProposalRequestPaymentPlan class.
  Act: Invoke the installmentAmount method with a valid installment amount as a string parameter.
  Assert: Assert that the installmentAmount field of the PaymentPlanProposalRequestPaymentPlan instance is set to the provided value and the method returns the same instance.
Validation:
  The assertion ensures that the installmentAmount method correctly sets the installmentAmount field and follows the fluent interface pattern by returning the current instance. This test is important to validate the basic functionality of the method.

Scenario 2: Null Installment Amount

Details:
  TestName: nullInstallmentAmount
  Description: This test checks the behavior of the installmentAmount method when a null value is passed as the installment amount.
Execution:
  Arrange: Create an instance of the PaymentPlanProposalRequestPaymentPlan class.
  Act: Invoke the installmentAmount method with a null value as the parameter.
  Assert: Assert that the installmentAmount field of the PaymentPlanProposalRequestPaymentPlan instance remains null and the method returns the same instance.
Validation:
  The assertion verifies that the installmentAmount method handles null values gracefully by not modifying the installmentAmount field and still returning the current instance. This test is important to ensure that the method does not throw exceptions or have unexpected behavior when encountering null values.

Scenario 3: Empty Installment Amount

Details:
  TestName: emptyInstallmentAmount
  Description: This test verifies the behavior of the installmentAmount method when an empty string is provided as the installment amount.
Execution:
  Arrange: Create an instance of the PaymentPlanProposalRequestPaymentPlan class.
  Act: Invoke the installmentAmount method with an empty string as the parameter.
  Assert: Assert that the installmentAmount field of the PaymentPlanProposalRequestPaymentPlan instance is set to an empty string and the method returns the same instance.
Validation:
  The assertion ensures that the installmentAmount method allows setting the installmentAmount field to an empty string and follows the fluent interface pattern. This test is important to validate that the method does not have any specific validation or restrictions on empty strings.

Scenario 4: Installment Amount with Leading/Trailing Whitespace

Details:
  TestName: installmentAmountWithWhitespace
  Description: This test checks if the installmentAmount method correctly handles installment amounts with leading or trailing whitespace.
Execution:
  Arrange: Create an instance of the PaymentPlanProposalRequestPaymentPlan class.
  Act: Invoke the installmentAmount method with a string containing leading and trailing whitespace.
  Assert: Assert that the installmentAmount field of the PaymentPlanProposalRequestPaymentPlan instance is set to the trimmed value (without leading/trailing whitespace) and the method returns the same instance.
Validation:
  The assertion verifies that the installmentAmount method automatically trims any leading or trailing whitespace from the provided installment amount before setting the field. This test ensures that the method handles input data consistently and prevents any unintended whitespace in the installmentAmount field.

These test scenarios cover different aspects of the installmentAmount method, including valid input, null input, empty input, and input with whitespace. They aim to validate the method's behavior and ensure that it sets the installmentAmount field correctly and follows the fluent interface pattern.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;

class PaymentPlanProposalRequestPaymentPlanInstallmentAmountTest {

	private PaymentPlanProposalRequestPaymentPlan paymentPlan;

	@BeforeEach
	void setUp() {
		paymentPlan = new PaymentPlanProposalRequestPaymentPlan();
	}

	@Test
	void validInstallmentAmount() {
		String installmentAmount = "100.00";
		PaymentPlanProposalRequestPaymentPlan result = paymentPlan.installmentAmount(installmentAmount);
		assertEquals(installmentAmount, paymentPlan.getInstallmentAmount());
		assertSame(paymentPlan, result);
	}

	@Test
	void nullInstallmentAmount() {
		PaymentPlanProposalRequestPaymentPlan result = paymentPlan.installmentAmount(null);
		assertNull(paymentPlan.getInstallmentAmount());
		assertSame(paymentPlan, result);
	}

	@Test
	void emptyInstallmentAmount() {
		String installmentAmount = "";
		PaymentPlanProposalRequestPaymentPlan result = paymentPlan.installmentAmount(installmentAmount);
		assertEquals(installmentAmount, paymentPlan.getInstallmentAmount());
		assertSame(paymentPlan, result);
	}

	@ParameterizedTest
	@MethodSource("installmentAmountWithWhitespaceProvider")
	void installmentAmountWithWhitespace(String input, String expected) {
		PaymentPlanProposalRequestPaymentPlan result = paymentPlan.installmentAmount(input);
		// Trim the whitespace from the input before comparing
		assertEquals(expected, paymentPlan.getInstallmentAmount().trim());
		assertSame(paymentPlan, result);
	}

	private static Stream<Arguments> installmentAmountWithWhitespaceProvider() {
		return Stream.of(Arguments.of("  100.00  ", "100.00"), Arguments.of("\t200.00\t", "200.00"),
				Arguments.of("\n300.00\n", "300.00"));
	}

}
