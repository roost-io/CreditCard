// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setCardLast4_1ec3bfb1aa
ROOST_METHOD_SIG_HASH=setCardLast4_67db513785

Here are the generated test scenarios for the setCardLast4 method:

Scenario 1: Valid cardLast4 value

Details:
  TestName: setCardLast4WithValidValue
  Description: This test checks if the setCardLast4 method correctly sets the cardLast4 field when a valid value is provided.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with a valid cardLast4 value, such as "1234".
  Assert: Use assertEquals to verify that the cardLast4 field is set to the provided value.
Validation:
  The assertion verifies that the setCardLast4 method correctly updates the cardLast4 field with the provided value.
  This test ensures that the setter method functions as expected for valid input.

Scenario 2: Null cardLast4 value

Details:
  TestName: setCardLast4WithNullValue
  Description: This test checks if the setCardLast4 method handles a null value correctly.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with a null value.
  Assert: Use assertNull to verify that the cardLast4 field remains null after the method call.
Validation:
  The assertion verifies that the setCardLast4 method does not modify the cardLast4 field when a null value is provided.
  This test ensures that the method handles null input gracefully without throwing an exception or modifying the field.

Scenario 3: Empty cardLast4 value

Details:
  TestName: setCardLast4WithEmptyValue
  Description: This test checks if the setCardLast4 method handles an empty string value correctly.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with an empty string value.
  Assert: Use assertEquals to verify that the cardLast4 field is set to an empty string.
Validation:
  The assertion verifies that the setCardLast4 method correctly updates the cardLast4 field with an empty string value.
  This test ensures that the method allows setting the cardLast4 field to an empty string, which may be a valid scenario in certain cases.

Scenario 4: cardLast4 value with whitespace

Details:
  TestName: setCardLast4WithWhitespaceValue
  Description: This test checks if the setCardLast4 method handles a value with leading or trailing whitespace correctly.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with a value containing leading or trailing whitespace, such as " 1234 ".
  Assert: Use assertEquals to verify that the cardLast4 field is set to the trimmed value, without any leading or trailing whitespace.
Validation:
  The assertion verifies that the setCardLast4 method correctly trims any leading or trailing whitespace from the provided value before setting the cardLast4 field.
  This test ensures that the method handles input with whitespace consistently and stores the trimmed value.

Note: The test scenarios assume that the setCardLast4 method is a simple setter method without any additional validation or logic. If there are specific validation rules or constraints for the cardLast4 field, additional test scenarios should be added to cover those cases.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;

class CollectionNotificationRequestSetCardLast4Test {

	private CollectionNotificationRequest request;

	@BeforeEach
	void setUp() {
		request = new CollectionNotificationRequest();
	}

	@Test
	void setCardLast4WithValidValue() {
		String validCardLast4 = "1234";
		request.setCardLast4(validCardLast4);
		assertEquals(validCardLast4, request.getCardLast4());
	}

	@Test
	void setCardLast4WithNullValue() {
		request.setCardLast4(null);
		assertNull(request.getCardLast4());
	}

	@Test
	void setCardLast4WithEmptyValue() {
		String emptyCardLast4 = "";
		request.setCardLast4(emptyCardLast4);
		assertEquals(emptyCardLast4, request.getCardLast4());
	}

	@ParameterizedTest
	@MethodSource("provideCardLast4ValuesWithWhitespace")
	void setCardLast4WithWhitespaceValue(String cardLast4WithWhitespace, String expectedTrimmedValue) {
		request.setCardLast4(cardLast4WithWhitespace);
		assertEquals(expectedTrimmedValue, request.getCardLast4());
	}

	private static Stream<Arguments> provideCardLast4ValuesWithWhitespace() {
		return Stream.of(Arguments.of(" 1234 ", "1234"), Arguments.of("5678   ", "5678"),
				Arguments.of("   9012", "9012"));
	}

	// Additional test case to validate the length of cardLast4
	@Test
	void setCardLast4WithInvalidLength() {
		String invalidCardLast4 = "12345"; // Assuming cardLast4 should be 4 digits
		assertThrows(IllegalArgumentException.class, () -> request.setCardLast4(invalidCardLast4));
	}

}
