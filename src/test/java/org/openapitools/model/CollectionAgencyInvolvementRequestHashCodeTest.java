// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=hashCode_114256592a
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8

Here are some JUnit test scenarios for the provided hashCode() method:

Scenario 1: Test hashCode with all fields set to non-null values

Details:
  TestName: hashCodeWithAllFieldsSet()
  Description: This test verifies that the hashCode() method generates the expected hash code when all fields (previousNotifications, responseStatus, cardLast4) are set to non-null values.
Execution:
  Arrange: Create an instance of the class with all fields set to non-null values.
  Act: Invoke the hashCode() method on the instance.
  Assert: Use JUnit assertions to compare the generated hash code with the expected hash code calculated using Objects.hash(previousNotifications, responseStatus, cardLast4).
Validation:
  The assertion verifies that the hashCode() method correctly combines the hash codes of all non-null fields using Objects.hash().
  This test ensures that the hashCode() method behaves as expected when all fields have non-null values, which is important for proper functioning in hash-based collections and equality comparisons.

Scenario 2: Test hashCode with some fields set to null

Details:
  TestName: hashCodeWithSomeFieldsNull()
  Description: This test checks that the hashCode() method generates the expected hash code when some fields (e.g., previousNotifications and cardLast4) are set to null.
Execution:
  Arrange: Create an instance of the class with some fields set to null and others set to non-null values.
  Act: Invoke the hashCode() method on the instance.
  Assert: Use JUnit assertions to compare the generated hash code with the expected hash code calculated using Objects.hash(null, responseStatus, null).
Validation:
  The assertion verifies that the hashCode() method correctly handles null field values and generates the expected hash code.
  This test ensures that the hashCode() method can handle null field values without throwing exceptions and maintains consistency with the equals() method.

Scenario 3: Test hashCode with all fields set to null

Details:
  TestName: hashCodeWithAllFieldsNull()
  Description: This test verifies that the hashCode() method generates the expected hash code when all fields (previousNotifications, responseStatus, cardLast4) are set to null.
Execution:
  Arrange: Create an instance of the class with all fields set to null.
  Act: Invoke the hashCode() method on the instance.
  Assert: Use JUnit assertions to compare the generated hash code with the expected hash code calculated using Objects.hash(null, null, null).
Validation:
  The assertion verifies that the hashCode() method correctly handles the case when all fields are null and generates the expected hash code.
  This test ensures that the hashCode() method can handle the extreme case of all fields being null without throwing exceptions and maintains consistency with the equals() method.

Scenario 4: Test hashCode for equality with equal objects

Details:
  TestName: hashCodeEqualityWithEqualObjects()
  Description: This test verifies that the hashCode() method generates the same hash code for two objects that are considered equal according to the equals() method.
Execution:
  Arrange: Create two instances of the class with the same field values.
  Act: Invoke the hashCode() method on both instances.
  Assert: Use JUnit assertions to compare the hash codes of the two instances and verify that they are equal.
Validation:
  The assertion verifies that the hashCode() method satisfies the contract of generating the same hash code for equal objects.
  This test ensures that the hashCode() method is consistent with the equals() method, which is crucial for the proper functioning of hash-based collections and equality comparisons.

These test scenarios cover different aspects of the hashCode() method, including handling non-null and null field values, consistency with the equals() method, and the correctness of the generated hash codes. They help ensure the reliability and correctness of the hashCode() implementation.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionAgencyInvolvementRequestHashCodeTest {

	@Test
	void hashCodeWithAllFieldsSet() {
		// Arrange
		CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest("Previous Notifications",
				"Response Status", "1234");

		// Act
		int hashCode = request.hashCode();

		// Assert
		int expectedHashCode = Objects.hash("Previous Notifications", "Response Status", "1234");
		assertEquals(expectedHashCode, hashCode);
	}

	@Test
	void hashCodeWithSomeFieldsNull() {
		// Arrange
		CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest(null, "Response Status",
				null);

		// Act
		int hashCode = request.hashCode();

		// Assert
		int expectedHashCode = Objects.hash(null, "Response Status", null);
		assertEquals(expectedHashCode, hashCode);
	}

	@Test
	void hashCodeWithAllFieldsNull() {
		// Arrange
		CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest(null, null, null);

		// Act
		int hashCode = request.hashCode();

		// Assert
		int expectedHashCode = Objects.hash(null, null, null);
		assertEquals(expectedHashCode, hashCode);
	}

	@Test
	void hashCodeEqualityWithEqualObjects() {
		// Arrange
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest("Previous Notifications",
				"Response Status", "1234");
		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest("Previous Notifications",
				"Response Status", "1234");

		// Act
		int hashCode1 = request1.hashCode();
		int hashCode2 = request2.hashCode();

		// Assert
		assertEquals(hashCode1, hashCode2);
	}

}