// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=hashCode_6fb4672f43
ROOST_METHOD_SIG_HASH=hashCode_5a2657087a

Here are the JUnit test scenarios for the provided `hashCode()` method:

Scenario 1: Test hashCode with equal objects

Details:
  TestName: hashCodeWithEqualObjects()
  Description: This test verifies that the hashCode() method returns the same hash code for two objects with identical field values.
Execution:
  Arrange: Create two instances of the class with the same values for previousNotifications, responseStatus, and cardLast4.
  Act: Invoke the hashCode() method on both instances.
  Assert: Use assertEquals to verify that the hash codes returned by both instances are equal.
Validation:
  The assertion ensures that the hashCode() method adheres to the contract of returning the same hash code for equal objects.
  This test is important to validate the consistency and correctness of the hashCode() implementation.

Scenario 2: Test hashCode with different previousNotifications

Details:
  TestName: hashCodeWithDifferentPreviousNotifications()
  Description: This test checks if the hashCode() method generates different hash codes when the previousNotifications field has different values.
Execution:
  Arrange: Create two instances of the class with different values for previousNotifications, keeping responseStatus and cardLast4 the same.
  Act: Invoke the hashCode() method on both instances.
  Assert: Use assertNotEquals to verify that the hash codes returned by the two instances are not equal.
Validation:
  The assertion confirms that the hashCode() method considers the previousNotifications field while generating the hash code.
  This test ensures that objects with different previousNotifications values have distinct hash codes.

Scenario 3: Test hashCode with different responseStatus

Details:
  TestName: hashCodeWithDifferentResponseStatus()
  Description: This test verifies that the hashCode() method produces different hash codes when the responseStatus field has different values.
Execution:
  Arrange: Create two instances of the class with different values for responseStatus, keeping previousNotifications and cardLast4 the same.
  Act: Invoke the hashCode() method on both instances.
  Assert: Use assertNotEquals to verify that the hash codes returned by the two instances are not equal.
Validation:
  The assertion validates that the hashCode() method takes the responseStatus field into account while generating the hash code.
  This test ensures that objects with different responseStatus values have distinct hash codes.

Scenario 4: Test hashCode with different cardLast4

Details:
  TestName: hashCodeWithDifferentCardLast4()
  Description: This test checks if the hashCode() method generates different hash codes when the cardLast4 field has different values.
Execution:
  Arrange: Create two instances of the class with different values for cardLast4, keeping previousNotifications and responseStatus the same.
  Act: Invoke the hashCode() method on both instances.
  Assert: Use assertNotEquals to verify that the hash codes returned by the two instances are not equal.
Validation:
  The assertion confirms that the hashCode() method considers the cardLast4 field while generating the hash code.
  This test ensures that objects with different cardLast4 values have distinct hash codes.

Scenario 5: Test hashCode with null fields

Details:
  TestName: hashCodeWithNullFields()
  Description: This test verifies the behavior of the hashCode() method when one or more fields are null.
Execution:
  Arrange: Create an instance of the class with null values for previousNotifications, responseStatus, and cardLast4.
  Act: Invoke the hashCode() method on the instance.
  Assert: Use assertNotEquals to verify that the hash code returned is not equal to the hash code of an instance with non-null values.
Validation:
  The assertion ensures that the hashCode() method handles null fields correctly and generates a different hash code compared to an instance with non-null values.
  This test validates the robustness of the hashCode() implementation when dealing with null field values.

These test scenarios cover different aspects of the `hashCode()` method, including equality, field variations, and null handling. They ensure that the method generates consistent and distinct hash codes based on the values of the `previousNotifications`, `responseStatus`, and `cardLast4` fields.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionAgencyInvolvementRequestHashCodeTest {

	@Test
	void hashCodeWithEqualObjects() {
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Status1")
			.cardLast4("1234");
		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Status1")
			.cardLast4("1234");
		assertEquals(request1.hashCode(), request2.hashCode());
	}

	@Test
	void hashCodeWithDifferentPreviousNotifications() {
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Status1")
			.cardLast4("1234");
		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification2")
			.responseStatus("Status1")
			.cardLast4("1234");
		assertNotEquals(request1.hashCode(), request2.hashCode());
	}

	@Test
	void hashCodeWithDifferentResponseStatus() {
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Status1")
			.cardLast4("1234");
		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Status2")
			.cardLast4("1234");
		assertNotEquals(request1.hashCode(), request2.hashCode());
	}

	@Test
	void hashCodeWithDifferentCardLast4() {
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Status1")
			.cardLast4("1234");
		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Status1")
			.cardLast4("5678");
		assertNotEquals(request1.hashCode(), request2.hashCode());
	}

	@Test
	void hashCodeWithNullFields() {
		CollectionAgencyInvolvementRequest requestWithNulls = new CollectionAgencyInvolvementRequest()
			.previousNotifications(null)
			.responseStatus(null)
			.cardLast4(null);
		CollectionAgencyInvolvementRequest requestWithValues = new CollectionAgencyInvolvementRequest()
			.previousNotifications("Notification1")
			.responseStatus("Status1")
			.cardLast4("1234");
		assertNotEquals(requestWithNulls.hashCode(), requestWithValues.hashCode());
	}

}