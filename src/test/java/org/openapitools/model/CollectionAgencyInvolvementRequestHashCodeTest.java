// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=hashCode_114256592a
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8

Here are some JUnit test scenarios for the provided hashCode() method:

Scenario 1: Test hashCode with all fields set to non-null values

Details:
  TestName: hashCodeWithAllFieldsSet()
  Description: This test checks if the hashCode() method generates the expected hash code when all fields (previousNotifications, responseStatus, cardLast4) are set to non-null values.
Execution:
  Arrange: Create an instance of the class with all fields set to non-null values.
  Act: Call the hashCode() method on the instance.
  Assert: Compare the returned hash code with the expected hash code calculated using Objects.hash(previousNotifications, responseStatus, cardLast4).
Validation:
  The assertion verifies that the hashCode() method correctly generates the hash code based on the values of all fields. This test ensures that the hash code is consistent and unique for objects with the same field values, which is important for proper functioning in hash-based collections and equality comparisons.

Scenario 2: Test hashCode with some fields set to null

Details:
  TestName: hashCodeWithSomeFieldsNull()
  Description: This test checks if the hashCode() method generates the expected hash code when some fields (e.g., previousNotifications and cardLast4) are set to null.
Execution:
  Arrange: Create an instance of the class with some fields set to null.
  Act: Call the hashCode() method on the instance.
  Assert: Compare the returned hash code with the expected hash code calculated using Objects.hash(null, responseStatus, null).
Validation:
  The assertion verifies that the hashCode() method correctly handles null field values and generates the hash code based on the non-null fields. This test ensures that the hash code remains consistent even when some fields are null, preventing unexpected behavior in hash-based operations.

Scenario 3: Test hashCode with all fields set to null

Details:
  TestName: hashCodeWithAllFieldsNull()
  Description: This test checks if the hashCode() method generates the expected hash code when all fields (previousNotifications, responseStatus, cardLast4) are set to null.
Execution:
  Arrange: Create an instance of the class with all fields set to null.
  Act: Call the hashCode() method on the instance.
  Assert: Compare the returned hash code with the expected hash code calculated using Objects.hash(null, null, null).
Validation:
  The assertion verifies that the hashCode() method correctly handles the case when all fields are null and generates a consistent hash code. This test ensures that objects with all null fields have the same hash code, maintaining the contract of the hashCode() method.

Scenario 4: Test hashCode with equal objects

Details:
  TestName: hashCodeWithEqualObjects()
  Description: This test checks if the hashCode() method returns the same hash code for two objects with equal field values.
Execution:
  Arrange: Create two instances of the class with the same field values.
  Act: Call the hashCode() method on both instances.
  Assert: Compare the hash codes returned by both instances using assertEquals().
Validation:
  The assertion verifies that the hashCode() method generates the same hash code for objects with equal field values. This test ensures that the hashCode() method adheres to the contract of returning the same hash code for equal objects, which is crucial for the proper functioning of hash-based collections and equality comparisons.

These test scenarios cover different aspects of the hashCode() method, including handling non-null field values, null field values, and equal objects. They ensure that the method generates consistent and expected hash codes in various scenarios, maintaining the integrity of hash-based operations and equality comparisons.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Objects;

class CollectionAgencyInvolvementRequestHashCodeTest {

	@Test
	void hashCodeWithAllFieldsSet() {
		// Arrange
		CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest("Previous Notifications",
				"Response Status", "1234");

		// Act
		int hashCode = request.hashCode();

		// Assert
		assertEquals(Objects.hash("Previous Notifications", "Response Status", "1234"), hashCode);
	}

	@Test
	void hashCodeWithSomeFieldsNull() {
		// Arrange
		CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest(null, "Response Status",
				null);

		// Act
		int hashCode = request.hashCode();

		// Assert
		assertEquals(Objects.hash(null, "Response Status", null), hashCode);
	}

	@Test
	void hashCodeWithAllFieldsNull() {
		// Arrange
		CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest(null, null, null);

		// Act
		int hashCode = request.hashCode();

		// Assert
		assertEquals(Objects.hash(null, null, null), hashCode);
	}

	@Test
	void hashCodeWithEqualObjects() {
		// Arrange
		CollectionAgencyInvolvementRequest request1 = new CollectionAgencyInvolvementRequest("Previous Notifications",
				"Response Status", "1234");
		CollectionAgencyInvolvementRequest request2 = new CollectionAgencyInvolvementRequest("Previous Notifications",
				"Response Status", "1234");

		// Act
		int hashCode1 = request1.hashCode();
		int hashCode2 = request2.hashCode();

		// Assert
		assertEquals(hashCode1, hashCode2);
	}

}
