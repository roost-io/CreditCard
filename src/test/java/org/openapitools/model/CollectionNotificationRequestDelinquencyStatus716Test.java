// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=delinquencyStatus_b469ffc152
ROOST_METHOD_SIG_HASH=delinquencyStatus_225684ea79

Based on the provided method and imports, here are the generated test scenarios for the `delinquencyStatus` method:

Scenario 1: Valid Delinquency Status

Details:
  TestName: validDelinquencyStatus
  Description: This test verifies that the `delinquencyStatus` method sets the delinquency status correctly and returns the `CollectionNotificationRequest` instance.
Execution:
  Arrange: Create an instance of `CollectionNotificationRequest`.
  Act: Invoke the `delinquencyStatus` method with a valid delinquency status string.
  Assert: Assert that the returned `CollectionNotificationRequest` instance is the same as the original instance and that the delinquency status is set correctly.
Validation:
  The assertion ensures that the `delinquencyStatus` method correctly sets the delinquency status and returns the same `CollectionNotificationRequest` instance, allowing for method chaining. This test validates the basic functionality of the method.

Scenario 2: Null Delinquency Status

Details:
  TestName: nullDelinquencyStatus
  Description: This test checks the behavior of the `delinquencyStatus` method when a null value is passed as the delinquency status.
Execution:
  Arrange: Create an instance of `CollectionNotificationRequest`.
  Act: Invoke the `delinquencyStatus` method with a null value.
  Assert: Assert that the returned `CollectionNotificationRequest` instance is the same as the original instance and that the delinquency status is set to null.
Validation:
  The assertion verifies that the `delinquencyStatus` method handles null values correctly by setting the delinquency status to null and returning the same `CollectionNotificationRequest` instance. This test ensures that the method can handle null inputs gracefully.

Scenario 3: Empty Delinquency Status

Details:
  TestName: emptyDelinquencyStatus
  Description: This test checks the behavior of the `delinquencyStatus` method when an empty string is passed as the delinquency status.
Execution:
  Arrange: Create an instance of `CollectionNotificationRequest`.
  Act: Invoke the `delinquencyStatus` method with an empty string.
  Assert: Assert that the returned `CollectionNotificationRequest` instance is the same as the original instance and that the delinquency status is set to an empty string.
Validation:
  The assertion verifies that the `delinquencyStatus` method handles empty strings correctly by setting the delinquency status to an empty string and returning the same `CollectionNotificationRequest` instance. This test ensures that the method can handle empty string inputs appropriately.

Scenario 4: Multiple Delinquency Status Updates

Details:
  TestName: multipleDelinquencyStatusUpdates
  Description: This test verifies that the `delinquencyStatus` method allows multiple updates to the delinquency status and returns the updated `CollectionNotificationRequest` instance.
Execution:
  Arrange: Create an instance of `CollectionNotificationRequest`.
  Act: Invoke the `delinquencyStatus` method multiple times with different delinquency status values.
  Assert: Assert that the returned `CollectionNotificationRequest` instance is the same as the original instance and that the delinquency status is set to the last updated value.
Validation:
  The assertion ensures that the `delinquencyStatus` method correctly updates the delinquency status when called multiple times and returns the same `CollectionNotificationRequest` instance. This test validates that the method supports method chaining and maintains the latest delinquency status value.

These test scenarios cover the basic functionality, null and empty inputs, and multiple updates to the delinquency status using the `delinquencyStatus` method. They ensure that the method behaves as expected and handles different input scenarios appropriately.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.EmptySource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestDelinquencyStatus716Test {
    @ParameterizedTest
    @ValueSource(strings = {"CURRENT", "DELINQUENT", "COLLECTIONS"})
    void validDelinquencyStatus(String delinquencyStatus) {
        // Arrange
        CollectionNotificationRequest request = new CollectionNotificationRequest();
        // Act
        CollectionNotificationRequest result = request.delinquencyStatus(delinquencyStatus);
        // Assert
        Assertions.assertSame(request, result);
        Assertions.assertEquals(delinquencyStatus, request.getDelinquencyStatus());
    }
    @ParameterizedTest
    @NullSource
    void nullDelinquencyStatus(String delinquencyStatus) {
        // Arrange
        CollectionNotificationRequest request = new CollectionNotificationRequest();
        // Act
        CollectionNotificationRequest result = request.delinquencyStatus(delinquencyStatus);
        // Assert
        Assertions.assertSame(request, result);
        Assertions.assertNull(request.getDelinquencyStatus());
    }
    @ParameterizedTest
    @EmptySource
    void emptyDelinquencyStatus(String delinquencyStatus) {
        // Arrange
        CollectionNotificationRequest request = new CollectionNotificationRequest();
        // Act
        CollectionNotificationRequest result = request.delinquencyStatus(delinquencyStatus);
        // Assert
        Assertions.assertSame(request, result);
        Assertions.assertEquals("", request.getDelinquencyStatus());
    }
    @Test
    void multipleDelinquencyStatusUpdates() {
        // Arrange
        CollectionNotificationRequest request = new CollectionNotificationRequest();
        // Act
        CollectionNotificationRequest result = request
                .delinquencyStatus("CURRENT")
                .delinquencyStatus("DELINQUENT")
                .delinquencyStatus("COLLECTIONS");
        // Assert
        Assertions.assertSame(request, result);
        Assertions.assertEquals("COLLECTIONS", request.getDelinquencyStatus());
    }
}