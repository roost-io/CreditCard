// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=getCardLast4_55bc26ac31
ROOST_METHOD_SIG_HASH=getCardLast4_4a5c700ec4

Here are the generated test scenarios for the getCardLast4() method:

Scenario 1: Valid cardLast4 Value

Details:
  TestName: validCardLast4Value()
  Description: This test verifies that the getCardLast4() method returns the correct value when a valid cardLast4 value is set.
Execution:
  Arrange: Set the cardLast4 field to a valid 4-digit string value.
  Act: Call the getCardLast4() method.
  Assert: Assert that the returned value matches the expected cardLast4 value.
Validation:
  The assertion ensures that the getCardLast4() method correctly retrieves and returns the value of the cardLast4 field.
  This test is important to validate that the getter method functions as expected and maintains data integrity.

Scenario 2: Null cardLast4 Value

Details:
  TestName: nullCardLast4Value()
  Description: This test verifies that the getCardLast4() method handles a null cardLast4 value correctly.
Execution:
  Arrange: Set the cardLast4 field to null.
  Act: Call the getCardLast4() method.
  Assert: Assert that the returned value is null.
Validation:
  The assertion ensures that the getCardLast4() method does not throw an exception when the cardLast4 value is null.
  This test is important to validate that the method can handle null values gracefully and does not cause unexpected behavior.

Scenario 3: cardLast4 Value with Less Than 4 Digits

Details:
  TestName: cardLast4ValueWithLessThan4Digits()
  Description: This test verifies that the getCardLast4() method handles a cardLast4 value with less than 4 digits correctly.
Execution:
  Arrange: Set the cardLast4 field to a string value with less than 4 digits.
  Act: Call the getCardLast4() method.
  Assert: Assert that a validation exception is thrown, indicating that the cardLast4 value does not meet the minimum size constraint.
Validation:
  The assertion ensures that the getCardLast4() method enforces the minimum size constraint of 4 digits for the cardLast4 value.
  This test is important to validate that the method adheres to the specified validation constraints and prevents invalid data from being returned.

Scenario 4: cardLast4 Value with More Than 4 Digits

Details:
  TestName: cardLast4ValueWithMoreThan4Digits()
  Description: This test verifies that the getCardLast4() method handles a cardLast4 value with more than 4 digits correctly.
Execution:
  Arrange: Set the cardLast4 field to a string value with more than 4 digits.
  Act: Call the getCardLast4() method.
  Assert: Assert that a validation exception is thrown, indicating that the cardLast4 value exceeds the maximum size constraint.
Validation:
  The assertion ensures that the getCardLast4() method enforces the maximum size constraint of 4 digits for the cardLast4 value.
  This test is important to validate that the method adheres to the specified validation constraints and prevents invalid data from being returned.

These test scenarios cover different aspects of the getCardLast4() method, including valid and invalid input values, null handling, and validation constraints. They aim to ensure that the method behaves as expected and maintains data integrity in various scenarios.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import javax.validation.ConstraintViolationException;

import static org.junit.jupiter.api.Assertions.*;

class CollectionAgencyInvolvementRequestGetCardLast4Test {

	private CollectionAgencyInvolvementRequest request;

	@BeforeEach
	void setUp() {
		request = new CollectionAgencyInvolvementRequest();
	}

	@Test
	void validCardLast4Value() {
		// Arrange
		String validCardLast4 = "1234";
		request.setCardLast4(validCardLast4);

		// Act
		String result = request.getCardLast4();

		// Assert
		assertEquals(validCardLast4, result);
	}

	@Test
	void nullCardLast4Value() {
		// Arrange
		request.setCardLast4(null);

		// Act & Assert
		assertThrows(ConstraintViolationException.class, request::getCardLast4);
	}

	@ParameterizedTest
	@ValueSource(strings = { "123", "12", "1", "" })
	void cardLast4ValueWithLessThan4Digits(String invalidCardLast4) {
		// Arrange
		request.setCardLast4(invalidCardLast4);

		// Act & Assert
		assertThrows(ConstraintViolationException.class, request::getCardLast4);
	}

	@ParameterizedTest
	@ValueSource(strings = { "12345", "123456", "1234567890" })
	void cardLast4ValueWithMoreThan4Digits(String invalidCardLast4) {
		// Arrange
		request.setCardLast4(invalidCardLast4);

		// Act & Assert
		assertThrows(ConstraintViolationException.class, request::getCardLast4);
	}

}
