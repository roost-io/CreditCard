// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setCardLast4_1ec3bfb1aa
ROOST_METHOD_SIG_HASH=setCardLast4_67db513785

Here are the JUnit test scenarios for the provided setCardLast4 method:

Scenario 1: Valid Card Last 4 Digits

Details:
  TestName: validCardLast4.
  Description: This test verifies that the setCardLast4 method correctly sets the cardLast4 property when a valid value is provided.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with a valid string representing the last 4 digits of a card number.
  Assert: Use assertEquals to check if the cardLast4 property of the object is equal to the provided value.
Validation:
  The assertion ensures that the setCardLast4 method properly assigns the provided value to the cardLast4 property.
  This test is important to validate that the method behaves as expected when given valid input.

Scenario 2: Null Card Last 4 Digits

Details:
  TestName: nullCardLast4.
  Description: This test checks how the setCardLast4 method handles a null value passed as the cardLast4 parameter.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with a null value.
  Assert: Use assertNull to verify that the cardLast4 property of the object remains null after the method invocation.
Validation:
  The assertion confirms that the setCardLast4 method does not modify the cardLast4 property when a null value is provided.
  This test is crucial to ensure that the method gracefully handles null input without throwing exceptions or setting invalid values.

Scenario 3: Empty Card Last 4 Digits

Details:
  TestName: emptyCardLast4.
  Description: This test verifies the behavior of the setCardLast4 method when an empty string is passed as the cardLast4 parameter.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with an empty string.
  Assert: Use assertEquals to check if the cardLast4 property of the object is set to an empty string.
Validation:
  The assertion ensures that the setCardLast4 method allows setting the cardLast4 property to an empty string.
  This test is important to validate that the method handles empty input correctly, depending on the business requirements.

Scenario 4: Card Last 4 Digits with Leading Zeros

Details:
  TestName: cardLast4WithLeadingZeros.
  Description: This test checks if the setCardLast4 method preserves leading zeros when setting the cardLast4 property.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with a string containing leading zeros (e.g., "0012").
  Assert: Use assertEquals to verify that the cardLast4 property of the object is set to the provided value, including the leading zeros.
Validation:
  The assertion confirms that the setCardLast4 method maintains the integrity of the input, including leading zeros.
  This test is crucial to ensure that the method does not inadvertently modify or truncate the cardLast4 value.

Scenario 5: Card Last 4 Digits Exceeding 4 Characters

Details:
  TestName: cardLast4ExceedingLength.
  Description: This test verifies the behavior of the setCardLast4 method when a string longer than 4 characters is provided.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Invoke the setCardLast4 method with a string exceeding 4 characters (e.g., "123456").
  Assert: Use assertEquals to check if the cardLast4 property of the object is set to the provided value, without truncation.
Validation:
  The assertion ensures that the setCardLast4 method does not truncate or modify the input when it exceeds 4 characters.
  This test is important to validate that the method behaves as expected and does not silently truncate the cardLast4 value.

These test scenarios cover various aspects of the setCardLast4 method, including valid input, null input, empty input, leading zeros, and input exceeding the expected length. They aim to ensure the method's robustness and adherence to the desired behavior.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestSetCardLast4Test {
    @ParameterizedTest
    @CsvSource({
            "1234",
            "5678",
            "9012"
    })
    void validCardLast4(String cardLast4) {
        LegalActionInitiationRequest request = new LegalActionInitiationRequest();
        request.setCardLast4(cardLast4);
        Assertions.assertEquals(cardLast4, request.getCardLast4());
    }
    @ParameterizedTest
    @NullSource
    void nullCardLast4(String cardLast4) {
        LegalActionInitiationRequest request = new LegalActionInitiationRequest();
        request.setCardLast4(cardLast4);
        Assertions.assertNull(request.getCardLast4());
    }
    @ParameterizedTest
    @ValueSource(strings = {""})
    void emptyCardLast4(String cardLast4) {
        LegalActionInitiationRequest request = new LegalActionInitiationRequest();
        request.setCardLast4(cardLast4);
        Assertions.assertEquals(cardLast4, request.getCardLast4());
    }
    @ParameterizedTest
    @ValueSource(strings = {"0012", "0000"})
    void cardLast4WithLeadingZeros(String cardLast4) {
        LegalActionInitiationRequest request = new LegalActionInitiationRequest();
        request.setCardLast4(cardLast4);
        Assertions.assertEquals(cardLast4, request.getCardLast4());
    }
    @ParameterizedTest
    @ValueSource(strings = {"12345", "123456789"})
    void cardLast4ExceedingLength(String cardLast4) {
        LegalActionInitiationRequest request = new LegalActionInitiationRequest();
        request.setCardLast4(cardLast4);
        Assertions.assertEquals(cardLast4, request.getCardLast4());
    }
}