// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setCardLast4_1ec3bfb1aa
ROOST_METHOD_SIG_HASH=setCardLast4_67db513785

Here are some JUnit test scenarios for the provided setCardLast4 method:

Scenario 1: Setting a valid card last 4 digits

Details:
  TestName: setValidCardLast4.
  Description: This test checks if the setCardLast4 method correctly sets the cardLast4 field when provided with a valid 4-digit string.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Call the setCardLast4 method with a valid 4-digit string, e.g., "1234".
  Assert: Use assertEquals to verify that the cardLast4 field is set to the provided value.
Validation:
  The assertion verifies that the cardLast4 field is properly updated when a valid value is provided.
  This test ensures that the setter method functions as expected for normal usage scenarios.

Scenario 2: Setting an empty card last 4 digits

Details:
  TestName: setEmptyCardLast4.
  Description: This test checks the behavior of the setCardLast4 method when provided with an empty string.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Call the setCardLast4 method with an empty string, "".
  Assert: Use assertEquals to verify that the cardLast4 field is set to an empty string.
Validation:
  The assertion verifies that the cardLast4 field is set to an empty string when an empty string is provided.
  This test ensures that the setter method handles empty input gracefully without throwing an exception or modifying other fields.

Scenario 3: Setting a null card last 4 digits

Details:
  TestName: setNullCardLast4.
  Description: This test checks the behavior of the setCardLast4 method when provided with a null value.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Call the setCardLast4 method with a null value.
  Assert: Use assertNull to verify that the cardLast4 field is set to null.
Validation:
  The assertion verifies that the cardLast4 field is set to null when a null value is provided.
  This test ensures that the setter method handles null input without throwing an exception or modifying other fields.

Scenario 4: Setting a card last 4 digits with less than 4 digits

Details:
  TestName: setInvalidShortCardLast4.
  Description: This test checks the behavior of the setCardLast4 method when provided with a string containing less than 4 digits.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Call the setCardLast4 method with a string containing less than 4 digits, e.g., "123".
  Assert: Use assertEquals to verify that the cardLast4 field remains unchanged.
Validation:
  The assertion verifies that the cardLast4 field is not modified when an invalid short input is provided.
  This test ensures that the setter method does not update the field with invalid data and maintains the previous value.

Scenario 5: Setting a card last 4 digits with more than 4 digits

Details:
  TestName: setInvalidLongCardLast4.
  Description: This test checks the behavior of the setCardLast4 method when provided with a string containing more than 4 digits.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Call the setCardLast4 method with a string containing more than 4 digits, e.g., "12345".
  Assert: Use assertEquals to verify that the cardLast4 field remains unchanged.
Validation:
  The assertion verifies that the cardLast4 field is not modified when an invalid long input is provided.
  This test ensures that the setter method does not update the field with invalid data and maintains the previous value.

These test scenarios cover various cases, including valid input, empty input, null input, and invalid input with less than or more than 4 digits. They ensure that the setCardLast4 method behaves as expected in different situations and maintains the integrity of the cardLast4 field.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LegalActionInitiationRequestSetCardLast4Test {

	private LegalActionInitiationRequest legalActionInitiationRequest;

	@BeforeEach
	void setUp() {
		legalActionInitiationRequest = new LegalActionInitiationRequest();
	}

	@ParameterizedTest
	@ValueSource(strings = { "1234", "5678", "9012" })
	void setValidCardLast4(String cardLast4) {
		legalActionInitiationRequest.setCardLast4(cardLast4);
		assertEquals(cardLast4, legalActionInitiationRequest.getCardLast4());
	}

	@Test
	void setEmptyCardLast4() {
		// Modify the business logic to handle empty cardLast4 values appropriately
		// For example, throw an exception or set a default value
		legalActionInitiationRequest.setCardLast4("");
		assertEquals("", legalActionInitiationRequest.getCardLast4());
	}

	@ParameterizedTest
	@NullSource
	void setNullCardLast4(String cardLast4) {
		legalActionInitiationRequest.setCardLast4(cardLast4);
		assertNull(legalActionInitiationRequest.getCardLast4());
	}

	@ParameterizedTest
	@ValueSource(strings = { "123", "12", "1" })
	void setInvalidShortCardLast4(String cardLast4) {
		// Modify the business logic to handle invalid short cardLast4 values
		// For example, throw an exception or set a default value
		assertThrows(IllegalArgumentException.class, () -> {
			legalActionInitiationRequest.setCardLast4(cardLast4);
		});
	}

	@ParameterizedTest
	@ValueSource(strings = { "12345", "123456", "1234567" })
	void setInvalidLongCardLast4(String cardLast4) {
		// Modify the business logic to handle invalid long cardLast4 values
		// For example, throw an exception or set a default value
		assertThrows(IllegalArgumentException.class, () -> {
			legalActionInitiationRequest.setCardLast4(cardLast4);
		});
	}

}
