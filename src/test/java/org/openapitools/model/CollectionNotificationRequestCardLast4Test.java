// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=cardLast4_06136621ea
ROOST_METHOD_SIG_HASH=cardLast4_30a5c65934

Here are the generated test scenarios for the given cardLast4 method:

Scenario 1: Valid cardLast4 value

Details:
  TestName: validCardLast4Value
  Description: This test verifies that the cardLast4 method correctly sets the cardLast4 field when a valid value is provided and returns the CollectionNotificationRequest instance.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the cardLast4 method with a valid cardLast4 value.
  Assert: Assert that the returned object is the same instance of CollectionNotificationRequest and assert that the cardLast4 field is set to the provided value.
Validation:
  The assertion checks that the cardLast4 method correctly sets the cardLast4 field and returns the CollectionNotificationRequest instance, ensuring the fluent API behavior is maintained.

Scenario 2: Null cardLast4 value

Details:
  TestName: nullCardLast4Value
  Description: This test verifies that the cardLast4 method handles a null value correctly by setting the cardLast4 field to null and returning the CollectionNotificationRequest instance.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the cardLast4 method with a null value.
  Assert: Assert that the returned object is the same instance of CollectionNotificationRequest and assert that the cardLast4 field is set to null.
Validation:
  The assertion ensures that the cardLast4 method can handle null values gracefully without throwing any exceptions and maintains the fluent API behavior.

Scenario 3: Empty cardLast4 value

Details:
  TestName: emptyCardLast4Value
  Description: This test verifies that the cardLast4 method correctly handles an empty string value by setting the cardLast4 field to an empty string and returning the CollectionNotificationRequest instance.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the cardLast4 method with an empty string value.
  Assert: Assert that the returned object is the same instance of CollectionNotificationRequest and assert that the cardLast4 field is set to an empty string.
Validation:
  The assertion checks that the cardLast4 method can handle empty string values correctly and maintains the fluent API behavior.

Scenario 4: cardLast4 value with whitespace

Details:
  TestName: cardLast4ValueWithWhitespace
  Description: This test verifies that the cardLast4 method correctly handles a value with leading/trailing whitespace by trimming the whitespace and setting the trimmed value to the cardLast4 field.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the cardLast4 method with a value containing leading/trailing whitespace.
  Assert: Assert that the returned object is the same instance of CollectionNotificationRequest and assert that the cardLast4 field is set to the trimmed value.
Validation:
  The assertion ensures that the cardLast4 method handles values with whitespace correctly by trimming the whitespace and setting the trimmed value to the cardLast4 field.

Note: The provided method does not have any specific validation or error handling for the cardLast4 value. The test scenarios assume that any string value, including null and empty strings, is considered valid for the cardLast4 field.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;

class CollectionNotificationRequestCardLast4Test {

	@Test
	void validCardLast4Value() {
		// Arrange
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		String cardLast4 = "1234";
		// Act
		CollectionNotificationRequest result = request.cardLast4(cardLast4);
		// Assert
		assertSame(request, result);
		assertEquals(cardLast4, request.getCardLast4());
	}

	@Test
	void nullCardLast4Value() {
		// Arrange
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		// Act
		CollectionNotificationRequest result = request.cardLast4(null);
		// Assert
		assertSame(request, result);
		assertNull(request.getCardLast4());
	}

	@Test
	void emptyCardLast4Value() {
		// Arrange
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		String cardLast4 = "";
		// Act
		CollectionNotificationRequest result = request.cardLast4(cardLast4);
		// Assert
		assertSame(request, result);
		assertEquals(cardLast4, request.getCardLast4());
	}

	@ParameterizedTest
	@MethodSource("cardLast4ValuesWithWhitespace")
	void cardLast4ValueWithWhitespace(String cardLast4, String expectedCardLast4) {
		// Arrange
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		// Act
		CollectionNotificationRequest result = request.cardLast4(cardLast4);
		// Assert
		assertSame(request, result);
		assertEquals(expectedCardLast4, request.getCardLast4());
	}

	private static Stream<Arguments> cardLast4ValuesWithWhitespace() {
		return Stream.of(Arguments.of("  1234  ", "1234"), Arguments.of("\t5678\t", "5678"),
				Arguments.of("\n9012\n", "9012"));
	}

	// Add test case for cardLast4 value with invalid characters
	@Test
	void cardLast4ValueWithInvalidCharacters() {
		// Arrange
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		String cardLast4 = "123a";
		// Act
		CollectionNotificationRequest result = request.cardLast4(cardLast4);
		// Assert
		assertSame(request, result);
		assertEquals(cardLast4, request.getCardLast4());
		// TODO: Consider adding validation for cardLast4 to allow only digits
	}

}
