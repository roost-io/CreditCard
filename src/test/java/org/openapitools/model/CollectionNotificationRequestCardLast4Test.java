// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=cardLast4_06136621ea
ROOST_METHOD_SIG_HASH=cardLast4_30a5c65934

Here are the generated test scenarios for the provided `cardLast4` method:

Scenario 1: Valid Card Last 4 Digits

Details:
  TestName: validCardLast4SetsValueAndReturnsInstance
  Description: This test verifies that providing a valid card last 4 digits string sets the corresponding private field and returns the current instance of CollectionNotificationRequest.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the cardLast4 method with a valid string representing the last 4 digits of a card.
  Assert: Assert that the private cardLast4 field is set to the provided value and the method returns the same instance of CollectionNotificationRequest.
Validation:
  The assertion ensures that the cardLast4 method correctly sets the private field and maintains the fluent interface by returning the current instance. This test validates the basic functionality and chaining behavior of the method.

Scenario 2: Null Card Last 4 Digits

Details:
  TestName: nullCardLast4ClearsValueAndReturnsInstance
  Description: This test checks that passing a null value to the cardLast4 method clears the corresponding private field and returns the current instance of CollectionNotificationRequest.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the cardLast4 method with a null value.
  Assert: Assert that the private cardLast4 field is set to null and the method returns the same instance of CollectionNotificationRequest.
Validation:
  The assertion verifies that the cardLast4 method handles null values correctly by clearing the private field and maintaining the fluent interface. This test ensures proper behavior when no card last 4 digits are provided.

Scenario 3: Empty Card Last 4 Digits

Details:
  TestName: emptyCardLast4SetsValueAndReturnsInstance
  Description: This test verifies that providing an empty string as the card last 4 digits sets the corresponding private field to an empty string and returns the current instance of CollectionNotificationRequest.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the cardLast4 method with an empty string.
  Assert: Assert that the private cardLast4 field is set to an empty string and the method returns the same instance of CollectionNotificationRequest.
Validation:
  The assertion ensures that the cardLast4 method allows setting an empty string value and maintains the fluent interface. This test validates the behavior when an empty string is provided as the card last 4 digits.

Scenario 4: Card Last 4 Digits with Whitespace

Details:
  TestName: cardLast4WithWhitespaceSetsValueAndReturnsInstance
  Description: This test checks that providing a string with leading/trailing whitespace as the card last 4 digits sets the corresponding private field to the trimmed value and returns the current instance of CollectionNotificationRequest.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Invoke the cardLast4 method with a string containing leading/trailing whitespace.
  Assert: Assert that the private cardLast4 field is set to the trimmed value and the method returns the same instance of CollectionNotificationRequest.
Validation:
  The assertion verifies that the cardLast4 method handles whitespace correctly by trimming the input value and maintaining the fluent interface. This test ensures proper behavior when the card last 4 digits string contains extra whitespace.

These test scenarios cover different aspects of the `cardLast4` method, including valid input, null input, empty string input, and input with whitespace. They validate the basic functionality, handling of edge cases, and the fluent interface behavior of the method.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.junit.jupiter.api.Assertions.*;

class CollectionNotificationRequestCardLast4Test {

	private CollectionNotificationRequest collectionNotificationRequest;

	@BeforeEach
	void setUp() {
		collectionNotificationRequest = new CollectionNotificationRequest();
	}

	@Test
	void validCardLast4SetsValueAndReturnsInstance() {
		String validCardLast4 = "1234";
		CollectionNotificationRequest result = collectionNotificationRequest.cardLast4(validCardLast4);
		assertEquals(validCardLast4, collectionNotificationRequest.getCardLast4());
		assertSame(collectionNotificationRequest, result);
	}

	@Test
	void nullCardLast4ClearsValueAndReturnsInstance() {
		collectionNotificationRequest.setCardLast4("1234");
		CollectionNotificationRequest result = collectionNotificationRequest.cardLast4(null);
		assertNull(collectionNotificationRequest.getCardLast4());
		assertSame(collectionNotificationRequest, result);
	}

	@Test
	void emptyCardLast4SetsValueAndReturnsInstance() {
		String emptyCardLast4 = "";
		CollectionNotificationRequest result = collectionNotificationRequest.cardLast4(emptyCardLast4);
		assertEquals(emptyCardLast4, collectionNotificationRequest.getCardLast4());
		assertSame(collectionNotificationRequest, result);
	}

	@ParameterizedTest
	@CsvSource({ "' 1234 ',1234", "'5678 ',5678", "' 9012',9012" })
	void cardLast4WithWhitespaceSetsValueAndReturnsInstance(String input, String expected) {
		// The cardLast4() method should trim any leading/trailing whitespace from the
		// input
		// before setting the value. Update the method to handle this case.
		CollectionNotificationRequest result = collectionNotificationRequest.cardLast4(input);
		assertEquals(expected, collectionNotificationRequest.getCardLast4());
		assertSame(collectionNotificationRequest, result);
	}

}
