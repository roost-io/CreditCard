// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=paymentDueDate_ede8a708e5
ROOST_METHOD_SIG_HASH=paymentDueDate_2c21b6ecde

Here are the JUnit test scenarios for the provided `paymentDueDate` method:

Scenario 1: Valid Payment Due Date

Details:
  TestName: validPaymentDueDate()
  Description: This test verifies that the `paymentDueDate` method correctly sets the `paymentDueDate` field when a valid `LocalDate` is provided and returns the `BalanceAlertRequest` instance.
Execution:
  Arrange: Create a `BalanceAlertRequest` instance.
  Act: Invoke the `paymentDueDate` method with a valid `LocalDate` parameter.
  Assert: Assert that the `paymentDueDate` field of the `BalanceAlertRequest` instance is set to the provided `LocalDate` value and the method returns the same instance.
Validation:
  The assertion ensures that the `paymentDueDate` method correctly sets the `paymentDueDate` field and returns the `BalanceAlertRequest` instance, allowing for method chaining.

Scenario 2: Null Payment Due Date

Details:
  TestName: nullPaymentDueDate()
  Description: This test verifies that the `paymentDueDate` method handles a null `LocalDate` parameter gracefully and sets the `paymentDueDate` field to null.
Execution:
  Arrange: Create a `BalanceAlertRequest` instance.
  Act: Invoke the `paymentDueDate` method with a null `LocalDate` parameter.
  Assert: Assert that the `paymentDueDate` field of the `BalanceAlertRequest` instance is set to null and the method returns the same instance.
Validation:
  The assertion ensures that the `paymentDueDate` method can handle a null `LocalDate` parameter without throwing an exception and sets the `paymentDueDate` field to null.

Scenario 3: Payment Due Date Before Current Date

Details:
  TestName: paymentDueDateBeforeCurrentDate()
  Description: This test verifies that the `paymentDueDate` method allows setting a `paymentDueDate` that is before the current date.
Execution:
  Arrange: Create a `BalanceAlertRequest` instance and a `LocalDate` representing a date in the past.
  Act: Invoke the `paymentDueDate` method with the past `LocalDate` parameter.
  Assert: Assert that the `paymentDueDate` field of the `BalanceAlertRequest` instance is set to the provided past `LocalDate` value and the method returns the same instance.
Validation:
  The assertion ensures that the `paymentDueDate` method does not impose any restrictions on the `LocalDate` value and allows setting a payment due date that is before the current date.

Scenario 4: Payment Due Date After Current Date

Details:
  TestName: paymentDueDateAfterCurrentDate()
  Description: This test verifies that the `paymentDueDate` method allows setting a `paymentDueDate` that is after the current date.
Execution:
  Arrange: Create a `BalanceAlertRequest` instance and a `LocalDate` representing a date in the future.
  Act: Invoke the `paymentDueDate` method with the future `LocalDate` parameter.
  Assert: Assert that the `paymentDueDate` field of the `BalanceAlertRequest` instance is set to the provided future `LocalDate` value and the method returns the same instance.
Validation:
  The assertion ensures that the `paymentDueDate` method does not impose any restrictions on the `LocalDate` value and allows setting a payment due date that is after the current date.

These test scenarios cover different aspects of the `paymentDueDate` method, including setting a valid payment due date, handling a null value, and allowing dates before and after the current date. They ensure that the method behaves as expected and can be used reliably in the `BalanceAlertRequest` class.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.time.LocalDate;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestPaymentDueDateTest {

	@Test
	void validPaymentDueDate() {
		// Arrange
		BalanceAlertRequest request = new BalanceAlertRequest();
		LocalDate paymentDueDate = LocalDate.now();
		// Act
		BalanceAlertRequest result = request.paymentDueDate(paymentDueDate);
		// Assert
		assertEquals(paymentDueDate, request.getPaymentDueDate());
		assertSame(request, result);
	}

	@Test
	void nullPaymentDueDate() {
		// Arrange
		BalanceAlertRequest request = new BalanceAlertRequest();
		// Act
		BalanceAlertRequest result = request.paymentDueDate(null);
		// Assert
		assertNull(request.getPaymentDueDate());
		assertSame(request, result);
	}

	@ParameterizedTest
	@MethodSource("provideDatesBeforeAndAfterCurrentDate")
	void paymentDueDateBeforeAndAfterCurrentDate(LocalDate paymentDueDate) {
		// Arrange
		BalanceAlertRequest request = new BalanceAlertRequest();
		// Act
		BalanceAlertRequest result = request.paymentDueDate(paymentDueDate);
		// Assert
		assertEquals(paymentDueDate, request.getPaymentDueDate());
		assertSame(request, result);
	}

	private static Stream<Arguments> provideDatesBeforeAndAfterCurrentDate() {
		return Stream.of(Arguments.of(LocalDate.now().minusDays(1)), Arguments.of(LocalDate.now().plusDays(1)));
	}

}