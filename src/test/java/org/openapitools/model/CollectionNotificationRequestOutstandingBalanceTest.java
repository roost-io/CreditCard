// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=outstandingBalance_3aeba44d36
ROOST_METHOD_SIG_HASH=outstandingBalance_040ce8880b

Here are the generated test scenarios for the outstandingBalance method:

Scenario 1: Valid Outstanding Balance

Details:
  TestName: outstandingBalanceWithValidValue
  Description: This test checks if the outstandingBalance method correctly sets the outstandingBalance field when a valid string value is provided and returns the CollectionNotificationRequest instance.
Execution:
  Arrange: Create an instance of the CollectionNotificationRequest class.
  Act: Invoke the outstandingBalance method with a valid string value, e.g., "1000.00".
  Assert: Use assertEquals to verify that the outstandingBalance field is set to the provided value and the returned object is the same instance of CollectionNotificationRequest.
Validation:
  The assertion verifies that the outstandingBalance method correctly sets the outstandingBalance field and maintains the fluent interface by returning the CollectionNotificationRequest instance. This test ensures that the method behaves as expected when a valid outstanding balance value is provided.

Scenario 2: Null Outstanding Balance

Details:
  TestName: outstandingBalanceWithNullValue
  Description: This test checks if the outstandingBalance method correctly handles a null value and sets the outstandingBalance field to null.
Execution:
  Arrange: Create an instance of the CollectionNotificationRequest class.
  Act: Invoke the outstandingBalance method with a null value.
  Assert: Use assertNull to verify that the outstandingBalance field is set to null and the returned object is the same instance of CollectionNotificationRequest.
Validation:
  The assertion verifies that the outstandingBalance method correctly handles a null value and sets the outstandingBalance field to null. This test ensures that the method does not throw an exception and maintains the fluent interface when a null value is provided.

Scenario 3: Empty Outstanding Balance

Details:
  TestName: outstandingBalanceWithEmptyValue
  Description: This test checks if the outstandingBalance method correctly handles an empty string value and sets the outstandingBalance field to an empty string.
Execution:
  Arrange: Create an instance of the CollectionNotificationRequest class.
  Act: Invoke the outstandingBalance method with an empty string value, e.g., "".
  Assert: Use assertEquals to verify that the outstandingBalance field is set to an empty string and the returned object is the same instance of CollectionNotificationRequest.
Validation:
  The assertion verifies that the outstandingBalance method correctly handles an empty string value and sets the outstandingBalance field to an empty string. This test ensures that the method does not throw an exception and maintains the fluent interface when an empty string value is provided.

Scenario 4: Outstanding Balance with Special Characters

Details:
  TestName: outstandingBalanceWithSpecialCharacters
  Description: This test checks if the outstandingBalance method correctly handles a string value containing special characters and sets the outstandingBalance field accordingly.
Execution:
  Arrange: Create an instance of the CollectionNotificationRequest class.
  Act: Invoke the outstandingBalance method with a string value containing special characters, e.g., "$1,000.00".
  Assert: Use assertEquals to verify that the outstandingBalance field is set to the provided value and the returned object is the same instance of CollectionNotificationRequest.
Validation:
  The assertion verifies that the outstandingBalance method correctly handles a string value containing special characters and sets the outstandingBalance field accordingly. This test ensures that the method does not throw an exception and maintains the fluent interface when a string value with special characters is provided.

These test scenarios cover different cases for the outstandingBalance method, including valid values, null values, empty values, and values with special characters. They ensure that the method correctly sets the outstandingBalance field and maintains the fluent interface in each scenario.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.EmptySource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;

import static org.junit.jupiter.api.Assertions.*;

class CollectionNotificationRequestOutstandingBalanceTest {

	@ParameterizedTest
	@ValueSource(strings = { "1000.00", "500.50", "0.00" })
	void outstandingBalanceWithValidValue(String outstandingBalance) {
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		CollectionNotificationRequest result = request.outstandingBalance(outstandingBalance);
		assertEquals(outstandingBalance, request.getOutstandingBalance());
		assertSame(request, result);
	}

	@ParameterizedTest
	@NullSource
	void outstandingBalanceWithNullValue(String outstandingBalance) {
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		CollectionNotificationRequest result = request.outstandingBalance(outstandingBalance);
		assertNull(request.getOutstandingBalance());
		assertSame(request, result);
	}

	@ParameterizedTest
	@EmptySource
	void outstandingBalanceWithEmptyValue(String outstandingBalance) {
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		CollectionNotificationRequest result = request.outstandingBalance(outstandingBalance);
		assertEquals("", request.getOutstandingBalance());
		assertSame(request, result);
	}

	@ParameterizedTest
	@ValueSource(strings = { "$1,000.00", "€500.50", "¥1,000" })
	void outstandingBalanceWithSpecialCharacters(String outstandingBalance) {
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		CollectionNotificationRequest result = request.outstandingBalance(outstandingBalance);
		assertEquals(outstandingBalance, request.getOutstandingBalance());
		assertSame(request, result);
	}

	// Add test case for negative outstanding balance
	@ParameterizedTest
	@ValueSource(strings = { "-1000.00", "-500.50" })
	void outstandingBalanceWithNegativeValue(String outstandingBalance) {
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		CollectionNotificationRequest result = request.outstandingBalance(outstandingBalance);
		assertEquals(outstandingBalance, request.getOutstandingBalance());
		assertSame(request, result);
	}

	// Add test case for invalid outstanding balance format
	@ParameterizedTest
	@ValueSource(strings = { "1000", "500.123", "abc" })
	void outstandingBalanceWithInvalidFormat(String outstandingBalance) {
		// Depending on the requirements, the behavior for invalid format should be
		// defined
		// For example, throw an exception or set a default value
		// Modify the test case accordingly
		CollectionNotificationRequest request = new CollectionNotificationRequest();
		CollectionNotificationRequest result = request.outstandingBalance(outstandingBalance);
		assertEquals(outstandingBalance, request.getOutstandingBalance());
		assertSame(request, result);
	}

}
