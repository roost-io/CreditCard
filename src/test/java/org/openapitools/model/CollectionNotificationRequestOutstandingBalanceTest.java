// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=outstandingBalance_3aeba44d36
ROOST_METHOD_SIG_HASH=outstandingBalance_040ce8880b

Here are the generated test scenarios for the outstandingBalance method:

Scenario 1: Valid Outstanding Balance

Details:
  TestName: outstandingBalanceWithValidValue
  Description: This test verifies that the outstandingBalance method sets the outstandingBalance field correctly when provided with a valid string value and returns the CollectionNotificationRequest instance.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the outstandingBalance method with a valid string value.
  Assert: Assert that the outstandingBalance field is set to the provided value and the method returns the CollectionNotificationRequest instance.
Validation:
  The assertion ensures that the outstandingBalance field is properly set and the method maintains the fluent interface by returning the instance. This test validates the basic functionality of the method when provided with valid input.

Scenario 2: Null Outstanding Balance

Details:
  TestName: outstandingBalanceWithNullValue
  Description: This test checks the behavior of the outstandingBalance method when provided with a null value. It verifies that the method handles null input gracefully and sets the outstandingBalance field to null.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the outstandingBalance method with a null value.
  Assert: Assert that the outstandingBalance field is set to null and the method returns the CollectionNotificationRequest instance.
Validation:
  The assertion confirms that the method can handle null input without throwing an exception and sets the outstandingBalance field to null. This test ensures the method's robustness and ability to handle null values.

Scenario 3: Empty Outstanding Balance

Details:
  TestName: outstandingBalanceWithEmptyValue
  Description: This test verifies the behavior of the outstandingBalance method when provided with an empty string value. It checks if the method sets the outstandingBalance field to an empty string.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the outstandingBalance method with an empty string value.
  Assert: Assert that the outstandingBalance field is set to an empty string and the method returns the CollectionNotificationRequest instance.
Validation:
  The assertion validates that the method can handle empty string input and sets the outstandingBalance field accordingly. This test ensures the method's ability to handle edge cases and sets the field to an empty string when provided with an empty value.

Scenario 4: Outstanding Balance with Special Characters

Details:
  TestName: outstandingBalanceWithSpecialCharacters
  Description: This test verifies that the outstandingBalance method can handle string values containing special characters and sets the outstandingBalance field correctly.
Execution:
  Arrange: Create an instance of CollectionNotificationRequest.
  Act: Call the outstandingBalance method with a string value containing special characters.
  Assert: Assert that the outstandingBalance field is set to the provided value and the method returns the CollectionNotificationRequest instance.
Validation:
  The assertion ensures that the method can handle string values with special characters and sets the outstandingBalance field as expected. This test validates the method's ability to handle diverse input formats.

Note: The provided method does not have any specific validation or error handling for the outstandingBalance parameter. The test scenarios assume that the method accepts any string value or null and sets the outstandingBalance field accordingly.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestOutstandingBalanceTest {

	private CollectionNotificationRequest request;

	@BeforeEach
	void setUp() {
		request = new CollectionNotificationRequest();
	}

	@ParameterizedTest
	@ValueSource(strings = { "100.00", "1234.56", "0.00" })
	void outstandingBalanceWithValidValue(String outstandingBalance) {
		CollectionNotificationRequest result = request.outstandingBalance(outstandingBalance);
		assertEquals(outstandingBalance, request.getOutstandingBalance());
		assertSame(request, result);
	}

	@Test
	void outstandingBalanceWithNullValue() {
		CollectionNotificationRequest result = request.outstandingBalance(null);
		assertNull(request.getOutstandingBalance());
		assertSame(request, result);
	}

	@Test
	void outstandingBalanceWithEmptyValue() {
		CollectionNotificationRequest result = request.outstandingBalance("");
		assertEquals("", request.getOutstandingBalance());
		assertSame(request, result);
	}

	@ParameterizedTest
	@ValueSource(strings = { "$100.00", "1,234.56", "â‚¬0.00" })
	void outstandingBalanceWithSpecialCharacters(String outstandingBalance) {
		CollectionNotificationRequest result = request.outstandingBalance(outstandingBalance);
		assertEquals(outstandingBalance, request.getOutstandingBalance());
		assertSame(request, result);
	}

}