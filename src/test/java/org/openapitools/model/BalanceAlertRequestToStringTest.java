// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=toString_6499c0f630
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

Here are the JUnit test scenarios for the provided toString() method:

Scenario 1: Test toString() with all fields set

Details:
  TestName: toStringWithAllFieldsSet
  Description: This test verifies that the toString() method returns the expected string representation when all fields (paymentDueDate, currentDate, cardLast4) are set with valid values.
Execution:
  Arrange: Create an instance of the BalanceAlertRequest class and set all fields with valid values.
  Act: Invoke the toString() method on the instance.
  Assert: Use JUnit assertions to compare the returned string with the expected format and values.
Validation:
  The assertion verifies that the toString() method correctly includes all field values in the string representation.
  This test ensures that the toString() method provides a meaningful and accurate representation of the object's state.

Scenario 2: Test toString() with null fields

Details:
  TestName: toStringWithNullFields
  Description: This test checks the behavior of the toString() method when one or more fields are null.
Execution:
  Arrange: Create an instance of the BalanceAlertRequest class and set some fields to null.
  Act: Invoke the toString() method on the instance.
  Assert: Use JUnit assertions to verify that the returned string includes "null" for the null fields.
Validation:
  The assertion confirms that the toString() method handles null field values gracefully and includes "null" in the string representation.
  This test ensures that the toString() method doesn't throw any exceptions and provides a consistent output even when fields are null.

Scenario 3: Test toString() with empty cardLast4

Details:
  TestName: toStringWithEmptyCardLast4
  Description: This test verifies the behavior of the toString() method when the cardLast4 field is an empty string.
Execution:
  Arrange: Create an instance of the BalanceAlertRequest class and set the cardLast4 field to an empty string.
  Act: Invoke the toString() method on the instance.
  Assert: Use JUnit assertions to check that the returned string includes an empty string for the cardLast4 field.
Validation:
  The assertion ensures that the toString() method handles an empty cardLast4 field correctly and includes it in the string representation.
  This test validates that the toString() method doesn't omit or modify the empty cardLast4 field in the output.

Scenario 4: Test toString() with special characters in cardLast4

Details:
  TestName: toStringWithSpecialCharactersInCardLast4
  Description: This test verifies that the toString() method handles special characters in the cardLast4 field correctly.
Execution:
  Arrange: Create an instance of the BalanceAlertRequest class and set the cardLast4 field with a string containing special characters.
  Act: Invoke the toString() method on the instance.
  Assert: Use JUnit assertions to compare the returned string with the expected format and the special characters in cardLast4.
Validation:
  The assertion confirms that the toString() method includes the special characters in cardLast4 without any escaping or modification.
  This test ensures that the toString() method can handle and represent special characters accurately in the string representation.

These test scenarios cover different aspects of the toString() method, including handling of valid field values, null fields, empty cardLast4, and special characters in cardLast4. They aim to verify the correct behavior and output of the toString() method under various conditions.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.time.LocalDate;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.assertEquals;

class BalanceAlertRequestToStringTest {

	@Test
	void toStringWithAllFieldsSet() {
		LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		String cardLast4 = "1234";
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest(paymentDueDate, currentDate, cardLast4);
		String expectedString = "class BalanceAlertRequest {\n" + "    paymentDueDate: 2023-06-15\n"
				+ "    currentDate: 2023-06-10\n" + "    cardLast4: 1234\n" + "}";
		assertEquals(expectedString, balanceAlertRequest.toString());
	}

	@ParameterizedTest
	@MethodSource("provideNullFieldsArguments")
	void toStringWithNullFields(LocalDate paymentDueDate, LocalDate currentDate, String cardLast4,
			String expectedString) {
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest(paymentDueDate, currentDate, cardLast4);
		assertEquals(expectedString, balanceAlertRequest.toString());
	}

	private static Stream<Arguments> provideNullFieldsArguments() {
		return Stream.of(
				Arguments.of(null, LocalDate.of(2023, 6, 10), "1234",
						"class BalanceAlertRequest {\n" + "    paymentDueDate: null\n" + "    currentDate: 2023-06-10\n"
								+ "    cardLast4: 1234\n" + "}"),
				Arguments.of(LocalDate.of(2023, 6, 15), null, "1234",
						"class BalanceAlertRequest {\n" + "    paymentDueDate: 2023-06-15\n" + "    currentDate: null\n"
								+ "    cardLast4: 1234\n" + "}"),
				Arguments.of(LocalDate.of(2023, 6, 15), LocalDate.of(2023, 6, 10), null,
						"class BalanceAlertRequest {\n" + "    paymentDueDate: 2023-06-15\n"
								+ "    currentDate: 2023-06-10\n" + "    cardLast4: null\n" + "}"));
	}

	@Test
	void toStringWithEmptyCardLast4() {
		LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		String cardLast4 = "";
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest(paymentDueDate, currentDate, cardLast4);
		String expectedString = "class BalanceAlertRequest {\n" + "    paymentDueDate: 2023-06-15\n"
				+ "    currentDate: 2023-06-10\n" + "    cardLast4: \n" + "}";
		assertEquals(expectedString, balanceAlertRequest.toString());
	}

	@Test
	void toStringWithSpecialCharactersInCardLast4() {
		LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		String cardLast4 = "!@#$";
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest(paymentDueDate, currentDate, cardLast4);
		String expectedString = "class BalanceAlertRequest {\n" + "    paymentDueDate: 2023-06-15\n"
				+ "    currentDate: 2023-06-10\n" + "    cardLast4: !@#$\n" + "}";
		assertEquals(expectedString, balanceAlertRequest.toString());
	}

}
