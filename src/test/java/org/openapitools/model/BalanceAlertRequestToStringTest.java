// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=toString_6499c0f630
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

Here are the JUnit test scenarios for the provided toString() method:

Scenario 1: Test toString() with all fields populated

Details:
  TestName: toStringWithAllFieldsPopulated()
  Description: This test verifies that the toString() method correctly generates a string representation of the BalanceAlertRequest object when all fields are populated with valid values.
Execution:
  Arrange: Create a BalanceAlertRequest object and set values for paymentDueDate, currentDate, and cardLast4 fields.
  Act: Invoke the toString() method on the BalanceAlertRequest object.
  Assert: Use JUnit assertions to compare the generated string with the expected string format and values.
Validation:
  The assertion verifies that the toString() method correctly includes all field names and their corresponding values in the generated string.
  This test ensures that the toString() method provides a readable and informative representation of the BalanceAlertRequest object for logging or debugging purposes.

Scenario 2: Test toString() with null fields

Details:
  TestName: toStringWithNullFields()
  Description: This test checks how the toString() method handles null values for the fields in the BalanceAlertRequest object.
Execution:
  Arrange: Create a BalanceAlertRequest object and leave the paymentDueDate, currentDate, and cardLast4 fields as null.
  Act: Invoke the toString() method on the BalanceAlertRequest object.
  Assert: Use JUnit assertions to verify that the generated string includes the field names and "null" as the value for each field.
Validation:
  The assertion confirms that the toString() method properly handles null field values and includes them in the generated string.
  This test ensures that the toString() method doesn't throw any exceptions and provides a consistent string representation even when fields are null.

Scenario 3: Test toString() with empty cardLast4

Details:
  TestName: toStringWithEmptyCardLast4()
  Description: This test verifies that the toString() method handles an empty string value for the cardLast4 field correctly.
Execution:
  Arrange: Create a BalanceAlertRequest object and set values for paymentDueDate and currentDate fields. Set cardLast4 as an empty string.
  Act: Invoke the toString() method on the BalanceAlertRequest object.
  Assert: Use JUnit assertions to check that the generated string includes the empty string value for the cardLast4 field.
Validation:
  The assertion ensures that the toString() method correctly includes the empty string value for cardLast4 in the generated string.
  This test validates that the toString() method handles empty string values appropriately and doesn't omit or modify them in the output.

Scenario 4: Test toString() with special characters in cardLast4

Details:
  TestName: toStringWithSpecialCharactersInCardLast4()
  Description: This test verifies that the toString() method properly handles special characters in the cardLast4 field.
Execution:
  Arrange: Create a BalanceAlertRequest object and set values for paymentDueDate and currentDate fields. Set cardLast4 with a string containing special characters.
  Act: Invoke the toString() method on the BalanceAlertRequest object.
  Assert: Use JUnit assertions to verify that the generated string includes the special characters in the cardLast4 field without any formatting issues.
Validation:
  The assertion confirms that the toString() method correctly includes special characters in the cardLast4 field without any escaping or formatting problems.
  This test ensures that the toString() method can handle and display special characters in the cardLast4 field as expected.

These test scenarios cover different aspects of the toString() method, including handling of populated fields, null values, empty strings, and special characters. They ensure that the method generates the expected string representation of the BalanceAlertRequest object in various scenarios.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.time.LocalDate;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class BalanceAlertRequestToStringTest {

	@Test
	void toStringWithAllFieldsPopulated() {
		// Arrange
		LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		String cardLast4 = "1234";
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest(paymentDueDate, currentDate, cardLast4);
		// Act
		String result = balanceAlertRequest.toString();
		// Assert
		String expected = "class BalanceAlertRequest {\n" + "    paymentDueDate: 2023-06-15\n"
				+ "    currentDate: 2023-06-10\n" + "    cardLast4: 1234\n" + "}";
		assertEquals(expected, result);
	}

	@Test
	void toStringWithNullFields() {
		// Arrange
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest(null, null, null);
		// Act
		String result = balanceAlertRequest.toString();
		// Assert
		String expected = "class BalanceAlertRequest {\n" + "    paymentDueDate: null\n" + "    currentDate: null\n"
				+ "    cardLast4: null\n" + "}";
		assertEquals(expected, result);
	}

	@Test
	void toStringWithEmptyCardLast4() {
		// Arrange
		LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		String cardLast4 = "";
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest(paymentDueDate, currentDate, cardLast4);
		// Act
		String result = balanceAlertRequest.toString();
		// Assert
		String expected = "class BalanceAlertRequest {\n" + "    paymentDueDate: 2023-06-15\n"
				+ "    currentDate: 2023-06-10\n" + "    cardLast4: \n" + "}";
		assertEquals(expected, result);
	}

	@ParameterizedTest
	@MethodSource("provideSpecialCharacters")
	void toStringWithSpecialCharactersInCardLast4(String specialCharacters) {
		// Arrange
		LocalDate paymentDueDate = LocalDate.of(2023, 6, 15);
		LocalDate currentDate = LocalDate.of(2023, 6, 10);
		String cardLast4 = specialCharacters;
		BalanceAlertRequest balanceAlertRequest = new BalanceAlertRequest(paymentDueDate, currentDate, cardLast4);
		// Act
		String result = balanceAlertRequest.toString();
		// Assert
		String expected = "class BalanceAlertRequest {\n" + "    paymentDueDate: 2023-06-15\n"
				+ "    currentDate: 2023-06-10\n" + "    cardLast4: " + specialCharacters + "\n" + "}";
		assertEquals(expected, result);
	}

	private static Stream<Arguments> provideSpecialCharacters() {
		return Stream.of(Arguments.of("!@#$%"), Arguments.of("&*()_+"), Arguments.of("[]{}|\\"), Arguments.of("<>?/"));
	}

}