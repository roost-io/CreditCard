// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setCardLast4_1ec3bfb1aa
ROOST_METHOD_SIG_HASH=setCardLast4_67db513785

Here are some JUnit test scenarios for the provided setCardLast4 method:

Scenario 1: Valid Card Last 4 Digits

Details:
  TestName: validCardLast4.
  Description: This test checks if the setCardLast4 method correctly sets the cardLast4 property when a valid 4-digit string is provided.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Call the setCardLast4 method with a valid 4-digit string, e.g., "1234".
  Assert: Use assertEquals to verify that the cardLast4 property of the object is set to the provided value.
Validation:
  The assertion verifies that the setCardLast4 method correctly assigns the provided value to the cardLast4 property.
  This test ensures that the basic functionality of setting the card last 4 digits works as expected.

Scenario 2: Null Card Last 4 Digits

Details:
  TestName: nullCardLast4.
  Description: This test checks how the setCardLast4 method handles a null value passed as the cardLast4 parameter.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Call the setCardLast4 method with a null value.
  Assert: Use assertNull to verify that the cardLast4 property of the object remains null after the method call.
Validation:
  The assertion verifies that the setCardLast4 method does not throw an exception or modify the cardLast4 property when a null value is provided.
  This test ensures that the method handles null values gracefully, depending on the desired behavior.

Scenario 3: Empty Card Last 4 Digits

Details:
  TestName: emptyCardLast4.
  Description: This test checks how the setCardLast4 method handles an empty string passed as the cardLast4 parameter.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Call the setCardLast4 method with an empty string, e.g., "".
  Assert: Use assertEquals to verify that the cardLast4 property of the object is set to an empty string.
Validation:
  The assertion verifies that the setCardLast4 method allows setting the cardLast4 property to an empty string.
  This test ensures that the method handles empty strings correctly, depending on the desired behavior.

Scenario 4: Card Last 4 Digits with Less Than 4 Characters

Details:
  TestName: cardLast4WithLessThan4Chars.
  Description: This test checks how the setCardLast4 method handles a string with less than 4 characters passed as the cardLast4 parameter.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Call the setCardLast4 method with a string containing less than 4 characters, e.g., "123".
  Assert: Use assertEquals to verify that the cardLast4 property of the object is set to the provided value.
Validation:
  The assertion verifies that the setCardLast4 method allows setting the cardLast4 property to a string with less than 4 characters.
  This test ensures that the method handles strings with fewer characters correctly, depending on the desired behavior.

Scenario 5: Card Last 4 Digits with More Than 4 Characters

Details:
  TestName: cardLast4WithMoreThan4Chars.
  Description: This test checks how the setCardLast4 method handles a string with more than 4 characters passed as the cardLast4 parameter.
Execution:
  Arrange: Create an instance of the class containing the setCardLast4 method.
  Act: Call the setCardLast4 method with a string containing more than 4 characters, e.g., "12345".
  Assert: Use assertEquals to verify that the cardLast4 property of the object is set to the provided value.
Validation:
  The assertion verifies that the setCardLast4 method allows setting the cardLast4 property to a string with more than 4 characters.
  This test ensures that the method handles strings with extra characters correctly, depending on the desired behavior.

These test scenarios cover different cases for the setCardLast4 method, including valid input, null input, empty string, and strings with varying lengths. The actual behavior and assertions may need to be adjusted based on the specific requirements and validation rules of the application.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionAgencyInvolvementRequestSetCardLast4782Test {
    private CollectionAgencyInvolvementRequest request;
    @BeforeEach
    void setUp() {
        request = new CollectionAgencyInvolvementRequest();
    }
    @ParameterizedTest
    @CsvSource({
            "1234, 1234",
            "5678, 5678",
            "9012, 9012"
    })
    void validCardLast4(String input, String expected) {
        request.setCardLast4(input);
        assertEquals(expected, request.getCardLast4());
    }
    @Test
    void nullCardLast4() {
        request.setCardLast4(null);
        assertNull(request.getCardLast4());
    }
    @Test
    void emptyCardLast4() {
        request.setCardLast4("");
        assertEquals("", request.getCardLast4());
    }
    @ParameterizedTest
    @CsvSource({
            "1, 1",
            "12, 12",
            "123, 123"
    })
    void cardLast4WithLessThan4Chars(String input, String expected) {
        request.setCardLast4(input);
        assertEquals(expected, request.getCardLast4());
    }
    @ParameterizedTest
    @CsvSource({
            "12345, 12345",
            "123456, 123456",
            "1234567, 1234567"
    })
    void cardLast4WithMoreThan4Chars(String input, String expected) {
        request.setCardLast4(input);
        assertEquals(expected, request.getCardLast4());
    }
}