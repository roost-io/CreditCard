// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=getNonPaymentStatus_9121636930
ROOST_METHOD_SIG_HASH=getNonPaymentStatus_d50301ee1d

Here are the generated test scenarios for the getNonPaymentStatus method:

Scenario 1: Verify getNonPaymentStatus returns the correct nonPaymentStatus value

Details:
  TestName: getNonPaymentStatusReturnsCorrectValue
  Description: This test verifies that the getNonPaymentStatus method returns the correct value of the nonPaymentStatus field.
Execution:
  Arrange: Set the nonPaymentStatus field to a known value using reflection since it is private.
  Act: Call the getNonPaymentStatus method.
  Assert: Use assertEquals to verify the returned value matches the known value set in the arrange step.
Validation:
  The assertion checks that the getter method properly returns the value of the private field.
  This test ensures the basic functionality of the getter works as expected.

Scenario 2: Verify getNonPaymentStatus handles null nonPaymentStatus value

Details:
  TestName: getNonPaymentStatusHandlesNullValue
  Description: This test checks that the getNonPaymentStatus method can handle a null value for the nonPaymentStatus field.
Execution:
  Arrange: Set the nonPaymentStatus field to null using reflection.
  Act: Call the getNonPaymentStatus method.
  Assert: Use assertNull to verify the method returns null.
Validation:
  The assertion verifies the getter properly returns null when the field value is null.
  This tests the method's null safety and checks that it doesn't throw an exception.

Scenario 3: Verify getNonPaymentStatus is annotated with @NotNull

Details:
  TestName: getNonPaymentStatusHasNotNullAnnotation
  Description: This test verifies the getNonPaymentStatus method is annotated with @NotNull.
Execution:
  Arrange: Use reflection to get the Method object for getNonPaymentStatus.
  Act: Check if the method has the @NotNull annotation.
  Assert: Use assertTrue to verify the method has the @NotNull annotation.
Validation:
  The assertion checks the method is properly annotated with the @NotNull constraint.
  This test helps ensure the API contract is followed and the method won't return null.

Scenario 4: Verify getNonPaymentStatus is annotated with @Schema

Details:
  TestName: getNonPaymentStatusHasSchemaAnnotation
  Description: This test checks that the getNonPaymentStatus method has the correct @Schema annotation.
Execution:
  Arrange: Use reflection to get the Method object for getNonPaymentStatus.
  Act: Check if the method has a @Schema annotation with the correct name, requiredMode.
  Assert: Use assertTrue to verify @Schema is present with name="nonPaymentStatus", requiredMode=REQUIRED.
Validation:
  The assertion verifies the OpenAPI @Schema annotation is properly defined on the method.
  This test checks the API documentation will be generated correctly.

Scenario 5: Verify getNonPaymentStatus is annotated with @JsonProperty

Details:
  TestName: getNonPaymentStatusHasJsonPropertyAnnotation
  Description: This test verifies the getNonPaymentStatus method has the @JsonProperty annotation.
Execution:
  Arrange: Use reflection to get the Method object for getNonPaymentStatus.
  Act: Check if the method has a @JsonProperty annotation with value "nonPaymentStatus".
  Assert: Use assertTrue to verify @JsonProperty is present with the correct value.
Validation:
  The assertion checks the method has the correct Jackson @JsonProperty for serialization.
  This test ensures the JSON output will contain the expected "nonPaymentStatus" property.

Let me know if you would like me to generate any additional test scenarios for this method!
*/

// ********RoostGPT********
package org.openapitools.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import javax.validation.constraints.NotNull;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;

class LegalActionInitiationRequestGetNonPaymentStatusTest {

	@ParameterizedTest
	@MethodSource("provideNonPaymentStatusValues")
	void getNonPaymentStatusReturnsCorrectValue(String nonPaymentStatus) throws Exception {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		Field field = LegalActionInitiationRequest.class.getDeclaredField("nonPaymentStatus");
		field.setAccessible(true);
		field.set(request, nonPaymentStatus);
		String result = request.getNonPaymentStatus();
		assertEquals(nonPaymentStatus, result);
	}

	private static Stream<Arguments> provideNonPaymentStatusValues() {
		return Stream.of(Arguments.of("Status1"), Arguments.of("Status2"), Arguments.of("Status3"));
	}

	@Test
	void getNonPaymentStatusHandlesNullValue() throws Exception {
		LegalActionInitiationRequest request = new LegalActionInitiationRequest();
		Field field = LegalActionInitiationRequest.class.getDeclaredField("nonPaymentStatus");
		field.setAccessible(true);
		field.set(request, null);
		String result = request.getNonPaymentStatus();
		assertNull(result);
	}

	@Test
	void getNonPaymentStatusHasNotNullAnnotation() throws Exception {
		Method method = LegalActionInitiationRequest.class.getMethod("getNonPaymentStatus");
		assertTrue(method.isAnnotationPresent(NotNull.class));
	}

	@Test
	void getNonPaymentStatusHasSchemaAnnotation() throws Exception {
		Method method = LegalActionInitiationRequest.class.getMethod("getNonPaymentStatus");
		Schema schemaAnnotation = method.getAnnotation(Schema.class);
		assertNotNull(schemaAnnotation);
		assertEquals("nonPaymentStatus", schemaAnnotation.name());
		assertEquals(Schema.RequiredMode.REQUIRED, schemaAnnotation.requiredMode());
	}

	@Test
	void getNonPaymentStatusHasJsonPropertyAnnotation() throws Exception {
		Method method = LegalActionInitiationRequest.class.getMethod("getNonPaymentStatus");
		JsonProperty jsonPropertyAnnotation = method.getAnnotation(JsonProperty.class);
		assertNotNull(jsonPropertyAnnotation);
		assertEquals("nonPaymentStatus", jsonPropertyAnnotation.value());
	}

}
