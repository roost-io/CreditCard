// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=toString_7fab2c71bc
ROOST_METHOD_SIG_HASH=toString_ceffa8036e

Here are the JUnit test scenarios for the provided `toString` method:

Scenario 1: Verify toString method output with populated fields

Details:
  TestName: toStringWithPopulatedFields
  Description: This test verifies that the toString method generates the expected string representation of the CollectionAgencyInvolvementRequest object when all fields are populated with non-null values.
Execution:
  Arrange: Create a CollectionAgencyInvolvementRequest object and set the previousNotifications, responseStatus, and cardLast4 fields with sample values.
  Act: Invoke the toString method on the CollectionAgencyInvolvementRequest object.
  Assert: Use JUnit assertions to compare the generated string with the expected string representation.
Validation:
  The assertion verifies that the toString method correctly includes the field names and their corresponding values in the generated string.
  This test ensures that the toString method provides a readable and informative string representation of the object, which is useful for logging, debugging, and displaying object details.

Scenario 2: Verify toString method output with null fields

Details:
  TestName: toStringWithNullFields
  Description: This test verifies that the toString method handles null field values gracefully and generates the expected string representation of the CollectionAgencyInvolvementRequest object.
Execution:
  Arrange: Create a CollectionAgencyInvolvementRequest object and set the previousNotifications, responseStatus, and cardLast4 fields to null.
  Act: Invoke the toString method on the CollectionAgencyInvolvementRequest object.
  Assert: Use JUnit assertions to compare the generated string with the expected string representation, ensuring that null values are represented appropriately (e.g., "null" or empty string).
Validation:
  The assertion verifies that the toString method does not throw any exceptions when encountering null field values and includes the field names with appropriate null representations in the generated string.
  This test ensures that the toString method is robust and handles null values correctly, preventing any unexpected behavior or exceptions.

Scenario 3: Verify toString method output with empty object

Details:
  TestName: toStringWithEmptyObject
  Description: This test verifies that the toString method generates the expected string representation of an empty CollectionAgencyInvolvementRequest object.
Execution:
  Arrange: Create an empty CollectionAgencyInvolvementRequest object without setting any field values.
  Act: Invoke the toString method on the empty CollectionAgencyInvolvementRequest object.
  Assert: Use JUnit assertions to compare the generated string with the expected string representation of an empty object.
Validation:
  The assertion verifies that the toString method generates a string representation that correctly indicates an empty object, with field names present but no values.
  This test ensures that the toString method handles empty objects correctly and provides a consistent string representation even when no field values are set.

Scenario 4: Verify toString method output with special characters in field values

Details:
  TestName: toStringWithSpecialCharacters
  Description: This test verifies that the toString method properly handles and escapes special characters in field values when generating the string representation of the CollectionAgencyInvolvementRequest object.
Execution:
  Arrange: Create a CollectionAgencyInvolvementRequest object and set the previousNotifications, responseStatus, and cardLast4 fields with values containing special characters (e.g., quotes, backslashes, newlines).
  Act: Invoke the toString method on the CollectionAgencyInvolvementRequest object.
  Assert: Use JUnit assertions to compare the generated string with the expected string representation, ensuring that special characters are properly escaped and represented.
Validation:
  The assertion verifies that the toString method correctly handles and escapes special characters in field values, preventing any formatting issues or unintended behavior in the generated string.
  This test ensures that the toString method is robust and can handle field values with special characters, maintaining the integrity of the string representation.

These test scenarios cover different aspects of the `toString` method, including handling populated fields, null values, empty objects, and special characters in field values. They ensure that the method generates the expected string representation of the `CollectionAgencyInvolvementRequest` object in various scenarios, providing confidence in its correctness and reliability.
*/

// ********RoostGPT********
package org.openapitools.model;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionAgencyInvolvementRequestToString570Test {
    @Test
    void toStringWithPopulatedFields() {
        // Arrange
        CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest()
                .previousNotifications("Previous Notifications")
                .responseStatus("Response Status")
                .cardLast4("1234");
        // Act
        String result = request.toString();
        // Assert
        String expected = "class CollectionAgencyInvolvementRequest {\n" +
                "    previousNotifications: Previous Notifications\n" +
                "    responseStatus: Response Status\n" +
                "    cardLast4: 1234\n" +
                "}";
        assertEquals(expected, result);
    }
    @Test
    void toStringWithNullFields() {
        // Arrange
        CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest();
        // Act
        String result = request.toString();
        // Assert
        String expected = "class CollectionAgencyInvolvementRequest {\n" +
                "    previousNotifications: null\n" +
                "    responseStatus: null\n" +
                "    cardLast4: null\n" +
                "}";
        assertEquals(expected, result);
    }
    @Test
    void toStringWithEmptyObject() {
        // Arrange
        CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest();
        // Act
        String result = request.toString();
        // Assert
        String expected = "class CollectionAgencyInvolvementRequest {\n" +
                "    previousNotifications: null\n" +
                "    responseStatus: null\n" +
                "    cardLast4: null\n" +
                "}";
        assertEquals(expected, result);
    }
    @Test
    void toStringWithSpecialCharacters() {
        // Arrange
        CollectionAgencyInvolvementRequest request = new CollectionAgencyInvolvementRequest()
                .previousNotifications("Previous\nNotifications")
                .responseStatus("Response \"Status\"")
                .cardLast4("12\\34");
        // Act
        String result = request.toString();
        // Assert
        String expected = "class CollectionAgencyInvolvementRequest {\n" +
                "    previousNotifications: Previous\n" +
                "    Notifications\n" +
                "    responseStatus: Response \"Status\"\n" +
                "    cardLast4: 12\\34\n" +
                "}";
        assertEquals(expected, result);
    }
}