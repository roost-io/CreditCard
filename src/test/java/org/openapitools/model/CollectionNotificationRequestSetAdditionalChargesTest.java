// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setAdditionalCharges_049abcdd1e
ROOST_METHOD_SIG_HASH=setAdditionalCharges_f550589599

Here are some JUnit test scenarios for the setAdditionalCharges method:

Scenario 1: Test setting additional charges with a valid value

Details:
  TestName: setAdditionalChargesWithValidValue
  Description: This test checks if the setAdditionalCharges method correctly sets the additionalCharges field when provided with a valid string value.
Execution:
  Arrange: Create an instance of the class containing the setAdditionalCharges method.
  Act: Call the setAdditionalCharges method with a valid string value.
  Assert: Use assertEquals to verify that the additionalCharges field is set to the provided value.
Validation:
  The assertion ensures that the setAdditionalCharges method properly updates the additionalCharges field when given a valid input. This test is important to validate that the setter method functions as expected and allows setting the additional charges correctly.

Scenario 2: Test setting additional charges with null

Details:
  TestName: setAdditionalChargesWithNull
  Description: This test verifies the behavior of the setAdditionalCharges method when passed a null value.
Execution:
  Arrange: Create an instance of the class containing the setAdditionalCharges method.
  Act: Call the setAdditionalCharges method with null as the argument.
  Assert: Use assertNull to check if the additionalCharges field is set to null.
Validation:
  The assertion confirms that the setAdditionalCharges method handles null values appropriately by setting the additionalCharges field to null. This test is crucial to ensure that the method does not throw an exception or have unexpected behavior when encountering null input.

Scenario 3: Test setting additional charges with an empty string

Details:
  TestName: setAdditionalChargesWithEmptyString
  Description: This test examines how the setAdditionalCharges method responds when provided with an empty string.
Execution:
  Arrange: Create an instance of the class containing the setAdditionalCharges method.
  Act: Call the setAdditionalCharges method with an empty string ("") as the argument.
  Assert: Use assertEquals to verify that the additionalCharges field is set to an empty string.
Validation:
  The assertion ensures that the setAdditionalCharges method correctly handles empty string input by setting the additionalCharges field to an empty string. This test is important to validate that the method does not treat empty strings as null or have any unintended side effects.

Scenario 4: Test setting additional charges after setting other fields

Details:
  TestName: setAdditionalChargesAfterSettingOtherFields
  Description: This test verifies that the setAdditionalCharges method works independently and does not affect other fields in the class.
Execution:
  Arrange: Create an instance of the class and set values for the delinquencyStatus, outstandingBalance, and cardLast4 fields.
  Act: Call the setAdditionalCharges method with a valid string value.
  Assert: Use assertEquals to check if the additionalCharges field is set to the provided value, and use assertEquals to ensure that the other fields (delinquencyStatus, outstandingBalance, cardLast4) retain their previously set values.
Validation:
  The assertions confirm that the setAdditionalCharges method only modifies the additionalCharges field and does not interfere with or alter the values of other fields in the class. This test is crucial to maintain the integrity and independence of the setter method.

These test scenarios cover different aspects of the setAdditionalCharges method, including valid input, null input, empty string input, and interaction with other fields in the class. They help ensure the method's correctness and robustness in various situations.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestSetAdditionalChargesTest {

	private CollectionNotificationRequest collectionNotificationRequest;

	@BeforeEach
	void setUp() {
		collectionNotificationRequest = new CollectionNotificationRequest();
	}

	@Test
	void setAdditionalChargesWithValidValue() {
		String validAdditionalCharges = "10.50";
		collectionNotificationRequest.setAdditionalCharges(validAdditionalCharges);
		assertEquals(validAdditionalCharges, collectionNotificationRequest.getAdditionalCharges());
	}

	@Test
	void setAdditionalChargesWithNull() {
		collectionNotificationRequest.setAdditionalCharges(null);
		assertNull(collectionNotificationRequest.getAdditionalCharges());
	}

	@Test
	void setAdditionalChargesWithEmptyString() {
		String emptyString = "";
		collectionNotificationRequest.setAdditionalCharges(emptyString);
		assertEquals(emptyString, collectionNotificationRequest.getAdditionalCharges());
	}

	@Test
	void setAdditionalChargesAfterSettingOtherFields() {
		String delinquencyStatus = "DELINQUENT";
		String outstandingBalance = "100.00";
		String cardLast4 = "1234";
		String additionalCharges = "25.00";
		collectionNotificationRequest.setDelinquencyStatus(delinquencyStatus);
		collectionNotificationRequest.setOutstandingBalance(outstandingBalance);
		collectionNotificationRequest.setCardLast4(cardLast4);
		collectionNotificationRequest.setAdditionalCharges(additionalCharges);
		assertEquals(delinquencyStatus, collectionNotificationRequest.getDelinquencyStatus());
		assertEquals(outstandingBalance, collectionNotificationRequest.getOutstandingBalance());
		assertEquals(cardLast4, collectionNotificationRequest.getCardLast4());
		assertEquals(additionalCharges, collectionNotificationRequest.getAdditionalCharges());
	}

}