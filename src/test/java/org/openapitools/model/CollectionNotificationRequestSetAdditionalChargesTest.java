// ********RoostGPT********
/*
Test generated by RoostGPT for test CreditCard-Unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setAdditionalCharges_049abcdd1e
ROOST_METHOD_SIG_HASH=setAdditionalCharges_f550589599

Here are the JUnit test scenarios for the provided setAdditionalCharges method:

Scenario 1: Set Additional Charges with Valid String

Details:
  TestName: setAdditionalChargesWithValidString()
  Description: This test verifies that the setAdditionalCharges method correctly sets the additionalCharges field when provided with a valid string value.
Execution:
  Arrange: Create an instance of the class containing the setAdditionalCharges method.
  Act: Invoke the setAdditionalCharges method with a valid string value.
  Assert: Use assertEquals to verify that the additionalCharges field is set to the provided value.
Validation:
  The assertion ensures that the setAdditionalCharges method correctly assigns the provided string value to the additionalCharges field.
  This test is important to validate that the method behaves as expected when given valid input.

Scenario 2: Set Additional Charges with Empty String

Details:
  TestName: setAdditionalChargesWithEmptyString()
  Description: This test checks the behavior of the setAdditionalCharges method when provided with an empty string value.
Execution:
  Arrange: Create an instance of the class containing the setAdditionalCharges method.
  Act: Invoke the setAdditionalCharges method with an empty string value.
  Assert: Use assertEquals to verify that the additionalCharges field is set to an empty string.
Validation:
  The assertion confirms that the setAdditionalCharges method handles empty string input correctly and sets the additionalCharges field accordingly.
  This test is relevant to ensure that the method does not throw any exceptions or exhibit unexpected behavior when given an empty string.

Scenario 3: Set Additional Charges with Null Value

Details:
  TestName: setAdditionalChargesWithNull()
  Description: This test examines the behavior of the setAdditionalCharges method when provided with a null value.
Execution:
  Arrange: Create an instance of the class containing the setAdditionalCharges method.
  Act: Invoke the setAdditionalCharges method with a null value.
  Assert: Use assertNull to verify that the additionalCharges field is set to null.
Validation:
  The assertion validates that the setAdditionalCharges method handles null input correctly and sets the additionalCharges field to null.
  This test is crucial to ensure that the method does not throw any null pointer exceptions and properly handles null values.

Scenario 4: Set Additional Charges with Special Characters

Details:
  TestName: setAdditionalChargesWithSpecialCharacters()
  Description: This test verifies that the setAdditionalCharges method correctly handles string values containing special characters.
Execution:
  Arrange: Create an instance of the class containing the setAdditionalCharges method.
  Act: Invoke the setAdditionalCharges method with a string value containing special characters.
  Assert: Use assertEquals to verify that the additionalCharges field is set to the provided value.
Validation:
  The assertion ensures that the setAdditionalCharges method correctly assigns the string value with special characters to the additionalCharges field.
  This test is important to validate that the method can handle and store string values containing special characters without any issues.

These test scenarios cover different aspects of the setAdditionalCharges method, including valid input, empty string, null value, and special characters. They ensure that the method behaves as expected in various scenarios and handles different types of input correctly.
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CollectionNotificationRequestSetAdditionalChargesTest {

	private CollectionNotificationRequest request;

	@BeforeEach
	void setUp() {
		request = new CollectionNotificationRequest();
	}

	@ParameterizedTest
	@ValueSource(strings = { "100.00", "50.75", "0.00" })
	void setAdditionalChargesWithValidString(String additionalCharges) {
		request.setAdditionalCharges(additionalCharges);
		assertEquals(additionalCharges, request.getAdditionalCharges());
	}

	@Test
	void setAdditionalChargesWithEmptyString() {
		String additionalCharges = "";
		request.setAdditionalCharges(additionalCharges);
		assertEquals(additionalCharges, request.getAdditionalCharges());
	}

	@ParameterizedTest
	@NullSource
	void setAdditionalChargesWithNull(String additionalCharges) {
		request.setAdditionalCharges(additionalCharges);
		assertNull(request.getAdditionalCharges());
	}

	@ParameterizedTest
	@CsvSource({ "$100.00", "€50.75", "₹0.00" })
	void setAdditionalChargesWithSpecialCharacters(String additionalCharges) {
		request.setAdditionalCharges(additionalCharges);
		assertEquals(additionalCharges, request.getAdditionalCharges());
	}

}