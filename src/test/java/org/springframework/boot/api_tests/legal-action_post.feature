# ********RoostGPT********

# Test generated by RoostGPT for test CrediCard-Karate using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /legal-action_post for http method type POST 
# RoostTestHash=475eb11067
# 
# 

# ********RoostGPT********
Feature: Legal Action API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase
  * configure headers = { 'Authorization': 'Bearer ' + karate.properties['AUTH_TOKEN'] }

Scenario: Initiate legal action with valid request
  Given path '/legal-action'
  And request
    """
    {
      "nonPaymentStatus": "OVERDUE",
      "legalStatus": "PENDING",
      "cardLast4": "1234"
    }
    """
  When method POST
  Then status 200
  And match response == '#string'

Scenario: Initiate legal action with missing required fields
  Given path '/legal-action'
  And request
    """
    {
      "nonPaymentStatus": "OVERDUE",
      "legalStatus": "PENDING"
    }
    """
  When method POST
  Then status 400
  And match response contains 'cardLast4 is required'

Scenario Outline: Initiate legal action with invalid cardLast4 length
  Given path '/legal-action'
  And request
    """
    {
      "nonPaymentStatus": "OVERDUE",
      "legalStatus": "PENDING",
      "cardLast4": "<cardLast4>"
    }
    """
  When method POST
  Then status 400
  And match response contains 'cardLast4 must have a length between 4 and 4'

  Examples:
    | cardLast4 |
    | 123       |
    | 12345     |

Scenario: Initiate legal action with unauthorized request
  * configure headers = null
  Given path '/legal-action' 
  And request
    """
    {
      "nonPaymentStatus": "OVERDUE",
      "legalStatus": "PENDING",
      "cardLast4": "1234"
    }
    """
  When method POST
  Then status 401
