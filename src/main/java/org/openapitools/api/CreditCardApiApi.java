/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreditCardApiAlertsPost200Response;
import org.openapitools.model.CreditCardApiDetailsGet200Response;
import org.openapitools.model.CreditCardApiDetailsGet400Response;
import org.openapitools.model.CreditCardApiDetailsGet401Response;
import org.openapitools.model.CreditCardApiPaymentsPost200Response;
import org.openapitools.model.CreditCardApiPaymentsPostRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-19T11:57:54.777818+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "credit-card-api", description = "the credit-card-api API")
public interface CreditCardApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /credit-card-api/alerts
     *
     * @param cardNumber Credit Card number with overdue payment (required)
     * @return Overdue payment alert action successfully initiated (status code 200)
     */
    @Operation(
        operationId = "creditCardApiAlertsPost",
        responses = {
            @ApiResponse(responseCode = "200", description = "Overdue payment alert action successfully initiated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreditCardApiAlertsPost200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/credit-card-api/alerts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CreditCardApiAlertsPost200Response> creditCardApiAlertsPost(
        @NotNull @Pattern(regexp = "^[0-9]{10}$") @Parameter(name = "cardNumber", description = "Credit Card number with overdue payment", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "cardNumber", required = true) String cardNumber
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Call initiated\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /credit-card-api/details
     *
     * @param cardNumber Credit Card number to fetch details (required)
     * @return Credit card details successfully fetched (status code 200)
     *         or Invalid card number provided (status code 400)
     *         or Unauthorized access (status code 401)
     */
    @Operation(
        operationId = "creditCardApiDetailsGet",
        responses = {
            @ApiResponse(responseCode = "200", description = "Credit card details successfully fetched", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreditCardApiDetailsGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid card number provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreditCardApiDetailsGet400Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreditCardApiDetailsGet401Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/credit-card-api/details",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CreditCardApiDetailsGet200Response> creditCardApiDetailsGet(
        @NotNull @Pattern(regexp = "^[0-9]{10}$") @Parameter(name = "cardNumber", description = "Credit Card number to fetch details", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "cardNumber", required = true) String cardNumber
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"balance\" : 0, \"dueDate\" : \"dueDate\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Invalid card number\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Access denied\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /credit-card-api/payments
     *
     * @param creditCardApiPaymentsPostRequest  (required)
     * @return Payment successful and balance updated (status code 200)
     */
    @Operation(
        operationId = "creditCardApiPaymentsPost",
        responses = {
            @ApiResponse(responseCode = "200", description = "Payment successful and balance updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreditCardApiPaymentsPost200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/credit-card-api/payments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreditCardApiPaymentsPost200Response> creditCardApiPaymentsPost(
        @Parameter(name = "CreditCardApiPaymentsPostRequest", description = "", required = true) @Valid @RequestBody CreditCardApiPaymentsPostRequest creditCardApiPaymentsPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"newBalance\" : 0.8008281904610115, \"message\" : \"Payment successful\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
