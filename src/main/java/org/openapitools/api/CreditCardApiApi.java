/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreditCardApiAlertsPost200Response;
import org.openapitools.model.CreditCardApiDetailsGet200Response;
import org.openapitools.model.CreditCardApiDetailsGet400Response;
import org.openapitools.model.CreditCardApiDetailsGet401Response;
import org.openapitools.model.CreditCardApiPaymentsPost200Response;
import org.openapitools.model.CreditCardApiPaymentsPostRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ResponseStatusException;
import java.math.BigDecimal;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-19T11:57:54.777818+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "credit-card-api", description = "the credit-card-api API")
public interface CreditCardApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /credit-card-api/alerts
     *
     * @param cardNumber Credit Card number with overdue payment (required)
     * @return Overdue payment alert action successfully initiated (status code 200)
     */
    @Operation(
        operationId = "creditCardApiAlertsPost",
        responses = {
            @ApiResponse(responseCode = "200", description = "Overdue payment alert action successfully initiated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreditCardApiAlertsPost200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/credit-card-api/alerts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CreditCardApiAlertsPost200Response> creditCardApiAlertsPost(
          //@NotNull @Pattern(regexp = "^[0-9]{10}$") @Parameter(name = "cardNumber", description = "Credit Card number with overdue payment", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "cardNumber", required = true) String cardNumber
    ) {
        // Dummy logic for example purposes
        CreditCardApiAlertsPost200Response response = new CreditCardApiAlertsPost200Response();
        response.setMessage("Alert has been triggered for overdue payment.");
        return ResponseEntity.ok(response);
    }


    /**
     * GET /credit-card-api/details
     *
     * @param cardNumber Credit Card number to fetch details (required)
     * @return Credit card details successfully fetched (status code 200)
     *         or Invalid card number provided (status code 400)
     *         or Unauthorized access (status code 401)
     */
    @Operation(
        operationId = "creditCardApiDetailsGet",
        responses = {
            @ApiResponse(responseCode = "200", description = "Credit card details successfully fetched", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreditCardApiDetailsGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid card number provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreditCardApiDetailsGet400Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreditCardApiDetailsGet401Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/credit-card-api/details",
        produces = { "application/json" }
    )

    @GetMapping("/credit-card-api/details")
    default ResponseEntity<?> creditCardApiDetailsGet(
        @NotNull @Pattern(regexp = "^[0-9]{10}$") @RequestParam(value = "cardNumber", required = true) String cardNumber
    ) {
        if (cardNumber.equals("1234567890")) {
            CreditCardApiDetailsGet200Response response = new CreditCardApiDetailsGet200Response();
            response.setBalance(100);
            response.setDueDate("2024-05-01");
            return ResponseEntity.ok(response);
        } else {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid card number provided");
        }
    }


    /**
     * POST /credit-card-api/payments
     *
     * @param creditCardApiPaymentsPostRequest  (required)
     * @return Payment successful and balance updated (status code 200)
     */
    @Operation(
        operationId = "creditCardApiPaymentsPost",
        responses = {
            @ApiResponse(responseCode = "200", description = "Payment successful and balance updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreditCardApiPaymentsPost200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/credit-card-api/payments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )

        
    default ResponseEntity<?> creditCardApiPaymentsPost(
        @Valid @RequestBody CreditCardApiPaymentsPostRequest request
    ) {
        if (request.getCardNumber() != null && request.getCardNumber().matches("^[0-9]{10}$")) {
            BigDecimal deduction = new BigDecimal(50);  // Example deduction amount
            BigDecimal newBalance = request.getAmount().subtract(deduction);  // Using BigDecimal's subtract method
    
            CreditCardApiPaymentsPost200Response response = new CreditCardApiPaymentsPost200Response();
            response.setNewBalance(newBalance);  // Set the new balance after deduction
            response.setMessage("Payment successful");
            return ResponseEntity.ok(response);
        } else {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid card number");
        }
}
}
